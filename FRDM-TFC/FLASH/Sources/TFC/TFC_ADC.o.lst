   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	motor,4,4
  18              		.comm	servo,4,4
  19              		.comm	LEDconfig,4,4
  20              		.comm	target,4,4
  21              		.comm	auslmultiplier,4,4
  22              		.comm	speedMultiplier,4,4
  23              		.comm	minSpeed,4,4
  24              		.comm	linetimeout,4,4
  25              		.comm	ruckwartsZeit,4,4
  26              		.comm	camData,512,4
  27              		.comm	active,4,4
  28              		.comm	Sausl,4,4
  29              		.comm	linemissing,4,4
  30              		.comm	checkLineStep,4,4
  31              		.comm	Motorspeed,4,4
  32              		.comm	Servoausl,4,4
  33              		.comm	drivingBack,4,4
  34              		.comm	PotADC_Value,4,4
  35              		.comm	BatSenseADC_Value,2,2
  36              		.section	.bss.CurrentADC_State,"aw",%nobits
  39              	CurrentADC_State:
  40 0000 00       		.space	1
  41              		.global	CurrentLineScanPixel
  42              		.section	.bss.CurrentLineScanPixel,"aw",%nobits
  45              	CurrentLineScanPixel:
  46 0000 00       		.space	1
  47              		.global	CurrentLineScanChannel
  48              		.section	.bss.CurrentLineScanChannel,"aw",%nobits
  51              	CurrentLineScanChannel:
  52 0000 00       		.space	1
  53              		.section	.text.ADC_Cal,"ax",%progbits
  54              		.align	2
  55              		.global	ADC_Cal
  56              		.code	16
  57              		.thumb_func
  59              	ADC_Cal:
  60              	.LFB0:
  61              		.file 1 "../Sources/TFC/TFC_ADC.c"
   1:../Sources/TFC/TFC_ADC.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_ADC.c **** 
   3:../Sources/TFC/TFC_ADC.c **** 
   4:../Sources/TFC/TFC_ADC.c **** #define TFC_POT_0_ADC_CHANNEL		13
   5:../Sources/TFC/TFC_ADC.c **** #define TFC_POT_1_ADC_CHANNEL		12
   6:../Sources/TFC/TFC_ADC.c **** #define TFC_BAT_SENSE_CHANNEL		4
   7:../Sources/TFC/TFC_ADC.c **** #define TFC_LINESCAN0_ADC_CHANNEL	6
   8:../Sources/TFC/TFC_ADC.c **** #define TFC_LINESCAN1_ADC_CHANNEL	7
   9:../Sources/TFC/TFC_ADC.c **** 
  10:../Sources/TFC/TFC_ADC.c **** #define ADC_MAX_CODE    (4095)
  11:../Sources/TFC/TFC_ADC.c **** 
  12:../Sources/TFC/TFC_ADC.c **** #define ADC0_irq_no   57
  13:../Sources/TFC/TFC_ADC.c **** #define ADC1_irq_no   58
  14:../Sources/TFC/TFC_ADC.c **** 
  15:../Sources/TFC/TFC_ADC.c **** #define ADC0_CHANA    19                                    // set to desired ADC0 channel trigger 
  16:../Sources/TFC/TFC_ADC.c **** #define ADC0_CHANB    20                                    // set to desired ADC0 channel trigger 
  17:../Sources/TFC/TFC_ADC.c **** 
  18:../Sources/TFC/TFC_ADC.c **** #define ADC1_CHANA    20                                    // set to desired ADC1 channel trigger 
  19:../Sources/TFC/TFC_ADC.c **** #define ADC1_CHANB    20                                    // set to desired ADC1 channel trigger 
  20:../Sources/TFC/TFC_ADC.c **** 
  21:../Sources/TFC/TFC_ADC.c **** #define ADC0_DLYA     0x2000                                // ADC0 trigger A delay 
  22:../Sources/TFC/TFC_ADC.c **** #define ADC0_DLYB     0x4000                                // ADC0 trigger B delay 
  23:../Sources/TFC/TFC_ADC.c **** #define ADC1_DLYA     0x6000                                // ADC1 trigger A delay
  24:../Sources/TFC/TFC_ADC.c **** #define ADC1_DLYB     0x7fff                                // ADC1 trigger B delay 
  25:../Sources/TFC/TFC_ADC.c **** 
  26:../Sources/TFC/TFC_ADC.c **** 
  27:../Sources/TFC/TFC_ADC.c **** #define ADC0A_DONE   0x01       
  28:../Sources/TFC/TFC_ADC.c **** #define ADC0B_DONE   0x02       
  29:../Sources/TFC/TFC_ADC.c **** #define ADC1A_DONE   0x04       
  30:../Sources/TFC/TFC_ADC.c **** #define ADC1B_DONE   0x08       
  31:../Sources/TFC/TFC_ADC.c **** 
  32:../Sources/TFC/TFC_ADC.c **** 
  33:../Sources/TFC/TFC_ADC.c **** // Bit shifting of bitfiled is already taken into account so 
  34:../Sources/TFC/TFC_ADC.c **** // bitfiled values are always represented as relative to their position.
  35:../Sources/TFC/TFC_ADC.c ****   
  36:../Sources/TFC/TFC_ADC.c **** /************************* #Defines ******************************************/
  37:../Sources/TFC/TFC_ADC.c **** 
  38:../Sources/TFC/TFC_ADC.c **** 
  39:../Sources/TFC/TFC_ADC.c **** #define A                 0x0
  40:../Sources/TFC/TFC_ADC.c **** #define B                 0x1
  41:../Sources/TFC/TFC_ADC.c **** 
  42:../Sources/TFC/TFC_ADC.c **** 
  43:../Sources/TFC/TFC_ADC.c **** /////// NOTE: the following defines relate to the ADC register definitions
  44:../Sources/TFC/TFC_ADC.c **** /////// and the content follows the reference manual, using the same symbols.
  45:../Sources/TFC/TFC_ADC.c **** 
  46:../Sources/TFC/TFC_ADC.c **** 
  47:../Sources/TFC/TFC_ADC.c **** //// ADCSC1 (register)
  48:../Sources/TFC/TFC_ADC.c **** 
  49:../Sources/TFC/TFC_ADC.c **** // Conversion Complete (COCO) mask
  50:../Sources/TFC/TFC_ADC.c **** #define COCO_COMPLETE     ADC_SC1_COCO_MASK
  51:../Sources/TFC/TFC_ADC.c **** #define COCO_NOT          0x00
  52:../Sources/TFC/TFC_ADC.c **** 
  53:../Sources/TFC/TFC_ADC.c **** // ADC interrupts: enabled, or disabled.
  54:../Sources/TFC/TFC_ADC.c **** #define AIEN_ON           ADC_SC1_AIEN_MASK
  55:../Sources/TFC/TFC_ADC.c **** #define AIEN_OFF          0x00
  56:../Sources/TFC/TFC_ADC.c **** 
  57:../Sources/TFC/TFC_ADC.c **** // Differential or Single ended ADC input
  58:../Sources/TFC/TFC_ADC.c **** #define DIFF_SINGLE       0x00
  59:../Sources/TFC/TFC_ADC.c **** #define DIFF_DIFFERENTIAL ADC_SC1_DIFF_MASK
  60:../Sources/TFC/TFC_ADC.c **** 
  61:../Sources/TFC/TFC_ADC.c **** //// ADCCFG1
  62:../Sources/TFC/TFC_ADC.c **** 
  63:../Sources/TFC/TFC_ADC.c **** // Power setting of ADC
  64:../Sources/TFC/TFC_ADC.c **** #define ADLPC_LOW         ADC_CFG1_ADLPC_MASK
  65:../Sources/TFC/TFC_ADC.c **** #define ADLPC_NORMAL      0x00
  66:../Sources/TFC/TFC_ADC.c **** 
  67:../Sources/TFC/TFC_ADC.c **** // Clock divisor
  68:../Sources/TFC/TFC_ADC.c **** #define ADIV_1            0x00
  69:../Sources/TFC/TFC_ADC.c **** #define ADIV_2            0x01
  70:../Sources/TFC/TFC_ADC.c **** #define ADIV_4            0x02
  71:../Sources/TFC/TFC_ADC.c **** #define ADIV_8            0x03
  72:../Sources/TFC/TFC_ADC.c **** 
  73:../Sources/TFC/TFC_ADC.c **** // Long samle time, or Short sample time
  74:../Sources/TFC/TFC_ADC.c **** #define ADLSMP_LONG       ADC_CFG1_ADLSMP_MASK
  75:../Sources/TFC/TFC_ADC.c **** #define ADLSMP_SHORT      0x00
  76:../Sources/TFC/TFC_ADC.c **** 
  77:../Sources/TFC/TFC_ADC.c **** // How many bits for the conversion?  8, 12, 10, or 16 (single ended).
  78:../Sources/TFC/TFC_ADC.c **** #define MODE_8            0x00
  79:../Sources/TFC/TFC_ADC.c **** #define MODE_12           0x01
  80:../Sources/TFC/TFC_ADC.c **** #define MODE_10           0x02
  81:../Sources/TFC/TFC_ADC.c **** #define MODE_16           0x03
  82:../Sources/TFC/TFC_ADC.c **** 
  83:../Sources/TFC/TFC_ADC.c **** 
  84:../Sources/TFC/TFC_ADC.c **** 
  85:../Sources/TFC/TFC_ADC.c **** // ADC Input Clock Source choice? Bus clock, Bus clock/2, "altclk", or the 
  86:../Sources/TFC/TFC_ADC.c **** //                                ADC's own asynchronous clock for less noise
  87:../Sources/TFC/TFC_ADC.c **** #define ADICLK_BUS        0x00
  88:../Sources/TFC/TFC_ADC.c **** #define ADICLK_BUS_2      0x01
  89:../Sources/TFC/TFC_ADC.c **** #define ADICLK_ALTCLK     0x02
  90:../Sources/TFC/TFC_ADC.c **** #define ADICLK_ADACK      0x03
  91:../Sources/TFC/TFC_ADC.c **** 
  92:../Sources/TFC/TFC_ADC.c **** //// ADCCFG2
  93:../Sources/TFC/TFC_ADC.c **** 
  94:../Sources/TFC/TFC_ADC.c **** // Select between B or A channels
  95:../Sources/TFC/TFC_ADC.c **** #define MUXSEL_ADCB       ADC_CFG2_MUXSEL_MASK
  96:../Sources/TFC/TFC_ADC.c **** #define MUXSEL_ADCA       0x00
  97:../Sources/TFC/TFC_ADC.c **** 
  98:../Sources/TFC/TFC_ADC.c **** // Ansync clock output enable: enable, or disable the output of it
  99:../Sources/TFC/TFC_ADC.c **** #define ADACKEN_ENABLED   ADC_CFG2_ADACKEN_MASK
 100:../Sources/TFC/TFC_ADC.c **** #define ADACKEN_DISABLED  0x00
 101:../Sources/TFC/TFC_ADC.c **** 
 102:../Sources/TFC/TFC_ADC.c **** // High speed or low speed conversion mode
 103:../Sources/TFC/TFC_ADC.c **** #define ADHSC_HISPEED     ADC_CFG2_ADHSC_MASK
 104:../Sources/TFC/TFC_ADC.c **** #define ADHSC_NORMAL      0x00
 105:../Sources/TFC/TFC_ADC.c **** 
 106:../Sources/TFC/TFC_ADC.c **** // Long Sample Time selector: 20, 12, 6, or 2 extra clocks for a longer sample time
 107:../Sources/TFC/TFC_ADC.c **** #define ADLSTS_20          0x00
 108:../Sources/TFC/TFC_ADC.c **** #define ADLSTS_12          0x01
 109:../Sources/TFC/TFC_ADC.c **** #define ADLSTS_6           0x02
 110:../Sources/TFC/TFC_ADC.c **** #define ADLSTS_2           0x03
 111:../Sources/TFC/TFC_ADC.c **** 
 112:../Sources/TFC/TFC_ADC.c **** ////ADCSC2
 113:../Sources/TFC/TFC_ADC.c **** 
 114:../Sources/TFC/TFC_ADC.c **** // Read-only status bit indicating conversion status
 115:../Sources/TFC/TFC_ADC.c **** #define ADACT_ACTIVE       ADC_SC2_ADACT_MASK
 116:../Sources/TFC/TFC_ADC.c **** #define ADACT_INACTIVE     0x00
 117:../Sources/TFC/TFC_ADC.c **** 
 118:../Sources/TFC/TFC_ADC.c **** // Trigger for starting conversion: Hardware trigger, or software trigger.
 119:../Sources/TFC/TFC_ADC.c **** // For using PDB, the Hardware trigger option is selected.
 120:../Sources/TFC/TFC_ADC.c **** #define ADTRG_HW           ADC_SC2_ADTRG_MASK
 121:../Sources/TFC/TFC_ADC.c **** #define ADTRG_SW           0x00
 122:../Sources/TFC/TFC_ADC.c **** 
 123:../Sources/TFC/TFC_ADC.c **** // ADC Compare Function Enable: Disabled, or Enabled.
 124:../Sources/TFC/TFC_ADC.c **** #define ACFE_DISABLED      0x00
 125:../Sources/TFC/TFC_ADC.c **** #define ACFE_ENABLED       ADC_SC2_ACFE_MASK
 126:../Sources/TFC/TFC_ADC.c **** 
 127:../Sources/TFC/TFC_ADC.c **** // Compare Function Greater Than Enable: Greater, or Less.
 128:../Sources/TFC/TFC_ADC.c **** #define ACFGT_GREATER      ADC_SC2_ACFGT_MASK
 129:../Sources/TFC/TFC_ADC.c **** #define ACFGT_LESS         0x00
 130:../Sources/TFC/TFC_ADC.c **** 
 131:../Sources/TFC/TFC_ADC.c **** // Compare Function Range Enable: Enabled or Disabled.
 132:../Sources/TFC/TFC_ADC.c **** #define ACREN_ENABLED      ADC_SC2_ACREN_MASK
 133:../Sources/TFC/TFC_ADC.c **** #define ACREN_DISABLED     0x00
 134:../Sources/TFC/TFC_ADC.c **** 
 135:../Sources/TFC/TFC_ADC.c **** // DMA enable: enabled or disabled.
 136:../Sources/TFC/TFC_ADC.c **** #define DMAEN_ENABLED      ADC_SC2_DMAEN_MASK
 137:../Sources/TFC/TFC_ADC.c **** #define DMAEN_DISABLED     0x00
 138:../Sources/TFC/TFC_ADC.c **** 
 139:../Sources/TFC/TFC_ADC.c **** // Voltage Reference selection for the ADC conversions
 140:../Sources/TFC/TFC_ADC.c **** // (***not*** the PGA which uses VREFO only).
 141:../Sources/TFC/TFC_ADC.c **** // VREFH and VREFL (0) , or VREFO (1).
 142:../Sources/TFC/TFC_ADC.c **** 
 143:../Sources/TFC/TFC_ADC.c **** #define REFSEL_EXT         0x00
 144:../Sources/TFC/TFC_ADC.c **** #define REFSEL_ALT         0x01
 145:../Sources/TFC/TFC_ADC.c **** #define REFSEL_RES         0x02     /* reserved */
 146:../Sources/TFC/TFC_ADC.c **** #define REFSEL_RES_EXT     0x03     /* reserved but defaults to Vref */
 147:../Sources/TFC/TFC_ADC.c **** 
 148:../Sources/TFC/TFC_ADC.c **** ////ADCSC3
 149:../Sources/TFC/TFC_ADC.c **** 
 150:../Sources/TFC/TFC_ADC.c **** // Calibration begin or off
 151:../Sources/TFC/TFC_ADC.c **** #define CAL_BEGIN          ADC_SC3_CAL_MASK
 152:../Sources/TFC/TFC_ADC.c **** #define CAL_OFF            0x00
 153:../Sources/TFC/TFC_ADC.c **** 
 154:../Sources/TFC/TFC_ADC.c **** // Status indicating Calibration failed, or normal success
 155:../Sources/TFC/TFC_ADC.c **** #define CALF_FAIL          ADC_SC3_CALF_MASK
 156:../Sources/TFC/TFC_ADC.c **** #define CALF_NORMAL        0x00
 157:../Sources/TFC/TFC_ADC.c **** 
 158:../Sources/TFC/TFC_ADC.c **** // ADC to continously convert, or do a sinle conversion
 159:../Sources/TFC/TFC_ADC.c **** #define ADCO_CONTINUOUS    ADC_SC3_ADCO_MASK
 160:../Sources/TFC/TFC_ADC.c **** #define ADCO_SINGLE        0x00
 161:../Sources/TFC/TFC_ADC.c **** 
 162:../Sources/TFC/TFC_ADC.c **** // Averaging enabled in the ADC, or not.
 163:../Sources/TFC/TFC_ADC.c **** #define AVGE_ENABLED       ADC_SC3_AVGE_MASK
 164:../Sources/TFC/TFC_ADC.c **** #define AVGE_DISABLED      0x00
 165:../Sources/TFC/TFC_ADC.c **** 
 166:../Sources/TFC/TFC_ADC.c **** // How many to average prior to "interrupting" the MCU?  4, 8, 16, or 32
 167:../Sources/TFC/TFC_ADC.c **** #define AVGS_4             0x00
 168:../Sources/TFC/TFC_ADC.c **** #define AVGS_8             0x01
 169:../Sources/TFC/TFC_ADC.c **** #define AVGS_16            0x02
 170:../Sources/TFC/TFC_ADC.c **** #define AVGS_32            0x03
 171:../Sources/TFC/TFC_ADC.c **** 
 172:../Sources/TFC/TFC_ADC.c **** ////PGA
 173:../Sources/TFC/TFC_ADC.c **** 
 174:../Sources/TFC/TFC_ADC.c **** // PGA enabled or not?
 175:../Sources/TFC/TFC_ADC.c **** #define PGAEN_ENABLED      ADC_PGA_PGAEN_MASK
 176:../Sources/TFC/TFC_ADC.c **** #define PGAEN_DISABLED     0x00 
 177:../Sources/TFC/TFC_ADC.c **** 
 178:../Sources/TFC/TFC_ADC.c **** // Chopper stabilization of the amplifier, or not.
 179:../Sources/TFC/TFC_ADC.c **** #define PGACHP_CHOP        ADC_PGA_PGACHP_MASK 
 180:../Sources/TFC/TFC_ADC.c **** #define PGACHP_NOCHOP      0x00
 181:../Sources/TFC/TFC_ADC.c **** 
 182:../Sources/TFC/TFC_ADC.c **** // PGA in low power mode, or normal mode.
 183:../Sources/TFC/TFC_ADC.c **** #define PGALP_LOW          ADC_PGA_PGALP_MASK
 184:../Sources/TFC/TFC_ADC.c **** #define PGALP_NORMAL       0x00
 185:../Sources/TFC/TFC_ADC.c **** 
 186:../Sources/TFC/TFC_ADC.c **** // Gain of PGA.  Selectable from 1 to 64.
 187:../Sources/TFC/TFC_ADC.c **** #define PGAG_1             0x00
 188:../Sources/TFC/TFC_ADC.c **** #define PGAG_2             0x01
 189:../Sources/TFC/TFC_ADC.c **** #define PGAG_4             0x02
 190:../Sources/TFC/TFC_ADC.c **** #define PGAG_8             0x03
 191:../Sources/TFC/TFC_ADC.c **** #define PGAG_16            0x04
 192:../Sources/TFC/TFC_ADC.c **** #define PGAG_32            0x05
 193:../Sources/TFC/TFC_ADC.c **** #define PGAG_64            0x06
 194:../Sources/TFC/TFC_ADC.c **** 
 195:../Sources/TFC/TFC_ADC.c **** /////////// The above values fit into the structure below to select ADC/PGA
 196:../Sources/TFC/TFC_ADC.c **** /////////// configuration desired:
 197:../Sources/TFC/TFC_ADC.c **** 
 198:../Sources/TFC/TFC_ADC.c **** typedef struct adc_cfg {
 199:../Sources/TFC/TFC_ADC.c ****   uint8_t  CONFIG1; 
 200:../Sources/TFC/TFC_ADC.c ****   uint8_t  CONFIG2; 
 201:../Sources/TFC/TFC_ADC.c ****   uint16_t COMPARE1; 
 202:../Sources/TFC/TFC_ADC.c ****   uint16_t COMPARE2; 
 203:../Sources/TFC/TFC_ADC.c ****   uint8_t  STATUS2;
 204:../Sources/TFC/TFC_ADC.c ****   uint8_t  STATUS3; 
 205:../Sources/TFC/TFC_ADC.c ****   uint8_t  STATUS1A; 
 206:../Sources/TFC/TFC_ADC.c ****   uint8_t  STATUS1B;
 207:../Sources/TFC/TFC_ADC.c ****   uint32_t PGA;
 208:../Sources/TFC/TFC_ADC.c ****   } *tADC_ConfigPtr, tADC_Config ;  
 209:../Sources/TFC/TFC_ADC.c ****   
 210:../Sources/TFC/TFC_ADC.c **** 
 211:../Sources/TFC/TFC_ADC.c **** #define CAL_BLK_NUMREC 18 
 212:../Sources/TFC/TFC_ADC.c **** 
 213:../Sources/TFC/TFC_ADC.c **** typedef struct adc_cal {
 214:../Sources/TFC/TFC_ADC.c ****  
 215:../Sources/TFC/TFC_ADC.c **** uint16_t  OFS;
 216:../Sources/TFC/TFC_ADC.c **** uint16_t  PG;
 217:../Sources/TFC/TFC_ADC.c **** uint16_t  MG;
 218:../Sources/TFC/TFC_ADC.c **** uint8_t   CLPD;
 219:../Sources/TFC/TFC_ADC.c **** uint8_t   CLPS;
 220:../Sources/TFC/TFC_ADC.c **** uint16_t  CLP4;
 221:../Sources/TFC/TFC_ADC.c **** uint16_t  CLP3;
 222:../Sources/TFC/TFC_ADC.c **** uint8_t   CLP2;
 223:../Sources/TFC/TFC_ADC.c **** uint8_t   CLP1;
 224:../Sources/TFC/TFC_ADC.c **** uint8_t   CLP0;
 225:../Sources/TFC/TFC_ADC.c **** uint8_t   dummy;
 226:../Sources/TFC/TFC_ADC.c **** uint8_t   CLMD;
 227:../Sources/TFC/TFC_ADC.c **** uint8_t   CLMS;
 228:../Sources/TFC/TFC_ADC.c **** uint16_t  CLM4;
 229:../Sources/TFC/TFC_ADC.c **** uint16_t  CLM3;
 230:../Sources/TFC/TFC_ADC.c **** uint8_t   CLM2;
 231:../Sources/TFC/TFC_ADC.c **** uint8_t   CLM1;
 232:../Sources/TFC/TFC_ADC.c **** uint8_t   CLM0;
 233:../Sources/TFC/TFC_ADC.c **** } tADC_Cal_Blk ;  
 234:../Sources/TFC/TFC_ADC.c **** 
 235:../Sources/TFC/TFC_ADC.c **** 
 236:../Sources/TFC/TFC_ADC.c **** // function prototypes:
 237:../Sources/TFC/TFC_ADC.c **** 
 238:../Sources/TFC/TFC_ADC.c **** uint8_t ADC_Cal(ADC_MemMapPtr);
 239:../Sources/TFC/TFC_ADC.c **** 
 240:../Sources/TFC/TFC_ADC.c **** void ADC_Config_Alt(ADC_MemMapPtr, tADC_ConfigPtr);
 241:../Sources/TFC/TFC_ADC.c **** 
 242:../Sources/TFC/TFC_ADC.c **** void ADC_Read_Cal(ADC_MemMapPtr, tADC_Cal_Blk *);
 243:../Sources/TFC/TFC_ADC.c **** 
 244:../Sources/TFC/TFC_ADC.c **** #define ADC_STATE_INIT							0
 245:../Sources/TFC/TFC_ADC.c **** #define ADC_STATE_CAPTURE_POT_0			        1
 246:../Sources/TFC/TFC_ADC.c **** #define ADC_STATE_CAPTURE_POT_1			        2
 247:../Sources/TFC/TFC_ADC.c **** #define ADC_STATE_CAPTURE_BATTERY_LEVEL			3
 248:../Sources/TFC/TFC_ADC.c **** #define ADC_STATE_CAPTURE_LINE_SCAN		        4
 249:../Sources/TFC/TFC_ADC.c **** 
 250:../Sources/TFC/TFC_ADC.c **** 
 251:../Sources/TFC/TFC_ADC.c **** volatile uint16_t PotADC_Value[2];
 252:../Sources/TFC/TFC_ADC.c **** volatile uint16_t BatSenseADC_Value;
 253:../Sources/TFC/TFC_ADC.c **** static uint8_t 	CurrentADC_State =	ADC_STATE_INIT;	
 254:../Sources/TFC/TFC_ADC.c **** 
 255:../Sources/TFC/TFC_ADC.c **** volatile uint8_t CurrentLineScanPixel = 0;
 256:../Sources/TFC/TFC_ADC.c **** volatile uint8_t CurrentLineScanChannel = 0;
 257:../Sources/TFC/TFC_ADC.c **** 
 258:../Sources/TFC/TFC_ADC.c **** void InitADC0();
 259:../Sources/TFC/TFC_ADC.c **** 
 260:../Sources/TFC/TFC_ADC.c **** /******************************************************************************
 261:../Sources/TFC/TFC_ADC.c **** Function 1. Name	AUTO CAL ROUTINE   
 262:../Sources/TFC/TFC_ADC.c **** 
 263:../Sources/TFC/TFC_ADC.c **** Parameters		ADC module pointer points to adc0 or adc1 register map 
 264:../Sources/TFC/TFC_ADC.c ****                          base address.
 265:../Sources/TFC/TFC_ADC.c **** Returns			Zero indicates success.
 266:../Sources/TFC/TFC_ADC.c **** Notes         		Calibrates the ADC16. Required to meet specifications 
 267:../Sources/TFC/TFC_ADC.c ****                         after reset and before a conversion is initiated.
 268:../Sources/TFC/TFC_ADC.c **** ******************************************************************************/
 269:../Sources/TFC/TFC_ADC.c **** unsigned char ADC_Cal(ADC_MemMapPtr adcmap)
 270:../Sources/TFC/TFC_ADC.c **** {
  62              		.loc 1 270 0
  63              		.cfi_startproc
  64 0000 80B5     		push	{r7, lr}
  65              	.LCFI0:
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 7, -8
  68              		.cfi_offset 14, -4
  69 0002 84B0     		sub	sp, sp, #16
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 24
  72 0004 00AF     		add	r7, sp, #0
  73              	.LCFI2:
  74              		.cfi_def_cfa_register 7
  75 0006 7860     		str	r0, [r7, #4]
 271:../Sources/TFC/TFC_ADC.c **** 
 272:../Sources/TFC/TFC_ADC.c ****   unsigned short cal_var;
 273:../Sources/TFC/TFC_ADC.c ****   
 274:../Sources/TFC/TFC_ADC.c ****   ADC_SC2_REG(adcmap) &=  ~ADC_SC2_ADTRG_MASK ; // Enable Software Conversion Trigger for Calibrati
  76              		.loc 1 274 0
  77 0008 7B68     		ldr	r3, [r7, #4]
  78 000a 1B6A     		ldr	r3, [r3, #32]
  79 000c 4022     		mov	r2, #64
  80 000e 191C     		mov	r1, r3
  81 0010 9143     		bic	r1, r2
  82 0012 0A1C     		mov	r2, r1
  83 0014 7B68     		ldr	r3, [r7, #4]
  84 0016 1A62     		str	r2, [r3, #32]
 275:../Sources/TFC/TFC_ADC.c ****   ADC_SC3_REG(adcmap) &= ( ~ADC_SC3_ADCO_MASK & ~ADC_SC3_AVGS_MASK ); // set single conversion, cle
  85              		.loc 1 275 0
  86 0018 7B68     		ldr	r3, [r7, #4]
  87 001a 5B6A     		ldr	r3, [r3, #36]
  88 001c 0B22     		mov	r2, #11
  89 001e 191C     		mov	r1, r3
  90 0020 9143     		bic	r1, r2
  91 0022 0A1C     		mov	r2, r1
  92 0024 7B68     		ldr	r3, [r7, #4]
  93 0026 5A62     		str	r2, [r3, #36]
 276:../Sources/TFC/TFC_ADC.c ****   ADC_SC3_REG(adcmap) |= ( ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(AVGS_32) );  // Turn averaging ON and s
  94              		.loc 1 276 0
  95 0028 7B68     		ldr	r3, [r7, #4]
  96 002a 5B6A     		ldr	r3, [r3, #36]
  97 002c 0722     		mov	r2, #7
  98 002e 1A43     		orr	r2, r3
  99 0030 7B68     		ldr	r3, [r7, #4]
 100 0032 5A62     		str	r2, [r3, #36]
 277:../Sources/TFC/TFC_ADC.c ****   
 278:../Sources/TFC/TFC_ADC.c ****   
 279:../Sources/TFC/TFC_ADC.c ****   ADC_SC3_REG(adcmap) |= ADC_SC3_CAL_MASK ;      // Start CAL
 101              		.loc 1 279 0
 102 0034 7B68     		ldr	r3, [r7, #4]
 103 0036 5B6A     		ldr	r3, [r3, #36]
 104 0038 8022     		mov	r2, #128
 105 003a 1A43     		orr	r2, r3
 106 003c 7B68     		ldr	r3, [r7, #4]
 107 003e 5A62     		str	r2, [r3, #36]
 280:../Sources/TFC/TFC_ADC.c ****   while ( (ADC_SC1_REG(adcmap,A) & ADC_SC1_COCO_MASK ) == COCO_NOT ); // Wait calibration end
 108              		.loc 1 280 0
 109 0040 C046     		mov	r8, r8
 110              	.L2:
 111              		.loc 1 280 0 is_stmt 0
 112 0042 7B68     		ldr	r3, [r7, #4]
 113 0044 1A68     		ldr	r2, [r3]
 114 0046 8023     		mov	r3, #128
 115 0048 1340     		and	r3, r2
 116 004a FAD0     		beq	.L2
 281:../Sources/TFC/TFC_ADC.c ****   	
 282:../Sources/TFC/TFC_ADC.c ****   if ((ADC_SC3_REG(adcmap)& ADC_SC3_CALF_MASK) == CALF_FAIL )
 117              		.loc 1 282 0 is_stmt 1
 118 004c 7B68     		ldr	r3, [r7, #4]
 119 004e 5A6A     		ldr	r2, [r3, #36]
 120 0050 4023     		mov	r3, #64
 121 0052 1340     		and	r3, r2
 122 0054 01D0     		beq	.L3
 283:../Sources/TFC/TFC_ADC.c ****   {  
 284:../Sources/TFC/TFC_ADC.c ****    return(1);    // Check for Calibration fail error and return 
 123              		.loc 1 284 0
 124 0056 0123     		mov	r3, #1
 125 0058 A6E0     		b	.L4
 126              	.L3:
 285:../Sources/TFC/TFC_ADC.c ****   }
 286:../Sources/TFC/TFC_ADC.c ****   // Calculate plus-side calibration
 287:../Sources/TFC/TFC_ADC.c ****   cal_var = 0x00;
 127              		.loc 1 287 0
 128 005a 3B1C     		mov	r3, r7
 129 005c 0E33     		add	r3, r3, #14
 130 005e 0022     		mov	r2, #0
 131 0060 1A80     		strh	r2, [r3]
 288:../Sources/TFC/TFC_ADC.c ****   
 289:../Sources/TFC/TFC_ADC.c ****   cal_var =  ADC_CLP0_REG(adcmap); 
 132              		.loc 1 289 0
 133 0062 7B68     		ldr	r3, [r7, #4]
 134 0064 DA6C     		ldr	r2, [r3, #76]
 135 0066 3B1C     		mov	r3, r7
 136 0068 0E33     		add	r3, r3, #14
 137 006a 1A80     		strh	r2, [r3]
 290:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLP1_REG(adcmap);
 138              		.loc 1 290 0
 139 006c 7B68     		ldr	r3, [r7, #4]
 140 006e 9B6C     		ldr	r3, [r3, #72]
 141 0070 99B2     		uxth	r1, r3
 142 0072 3B1C     		mov	r3, r7
 143 0074 0E33     		add	r3, r3, #14
 144 0076 3A1C     		mov	r2, r7
 145 0078 0E32     		add	r2, r2, #14
 146 007a 1288     		ldrh	r2, [r2]
 147 007c 8A18     		add	r2, r1, r2
 148 007e 1A80     		strh	r2, [r3]
 291:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLP2_REG(adcmap);
 149              		.loc 1 291 0
 150 0080 7B68     		ldr	r3, [r7, #4]
 151 0082 5B6C     		ldr	r3, [r3, #68]
 152 0084 99B2     		uxth	r1, r3
 153 0086 3B1C     		mov	r3, r7
 154 0088 0E33     		add	r3, r3, #14
 155 008a 3A1C     		mov	r2, r7
 156 008c 0E32     		add	r2, r2, #14
 157 008e 1288     		ldrh	r2, [r2]
 158 0090 8A18     		add	r2, r1, r2
 159 0092 1A80     		strh	r2, [r3]
 292:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLP3_REG(adcmap);
 160              		.loc 1 292 0
 161 0094 7B68     		ldr	r3, [r7, #4]
 162 0096 1B6C     		ldr	r3, [r3, #64]
 163 0098 99B2     		uxth	r1, r3
 164 009a 3B1C     		mov	r3, r7
 165 009c 0E33     		add	r3, r3, #14
 166 009e 3A1C     		mov	r2, r7
 167 00a0 0E32     		add	r2, r2, #14
 168 00a2 1288     		ldrh	r2, [r2]
 169 00a4 8A18     		add	r2, r1, r2
 170 00a6 1A80     		strh	r2, [r3]
 293:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLP4_REG(adcmap);
 171              		.loc 1 293 0
 172 00a8 7B68     		ldr	r3, [r7, #4]
 173 00aa DB6B     		ldr	r3, [r3, #60]
 174 00ac 99B2     		uxth	r1, r3
 175 00ae 3B1C     		mov	r3, r7
 176 00b0 0E33     		add	r3, r3, #14
 177 00b2 3A1C     		mov	r2, r7
 178 00b4 0E32     		add	r2, r2, #14
 179 00b6 1288     		ldrh	r2, [r2]
 180 00b8 8A18     		add	r2, r1, r2
 181 00ba 1A80     		strh	r2, [r3]
 294:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLPS_REG(adcmap);
 182              		.loc 1 294 0
 183 00bc 7B68     		ldr	r3, [r7, #4]
 184 00be 9B6B     		ldr	r3, [r3, #56]
 185 00c0 99B2     		uxth	r1, r3
 186 00c2 3B1C     		mov	r3, r7
 187 00c4 0E33     		add	r3, r3, #14
 188 00c6 3A1C     		mov	r2, r7
 189 00c8 0E32     		add	r2, r2, #14
 190 00ca 1288     		ldrh	r2, [r2]
 191 00cc 8A18     		add	r2, r1, r2
 192 00ce 1A80     		strh	r2, [r3]
 295:../Sources/TFC/TFC_ADC.c **** 
 296:../Sources/TFC/TFC_ADC.c ****   cal_var = cal_var/2;
 193              		.loc 1 296 0
 194 00d0 3B1C     		mov	r3, r7
 195 00d2 0E33     		add	r3, r3, #14
 196 00d4 3A1C     		mov	r2, r7
 197 00d6 0E32     		add	r2, r2, #14
 198 00d8 1288     		ldrh	r2, [r2]
 199 00da 5208     		lsr	r2, r2, #1
 200 00dc 1A80     		strh	r2, [r3]
 297:../Sources/TFC/TFC_ADC.c ****   cal_var |= 0x8000; // Set MSB
 201              		.loc 1 297 0
 202 00de 3B1C     		mov	r3, r7
 203 00e0 0E33     		add	r3, r3, #14
 204 00e2 3A1C     		mov	r2, r7
 205 00e4 0E32     		add	r2, r2, #14
 206 00e6 1288     		ldrh	r2, [r2]
 207 00e8 3149     		ldr	r1, .L5
 208 00ea 0A43     		orr	r2, r1
 209 00ec 1A80     		strh	r2, [r3]
 298:../Sources/TFC/TFC_ADC.c **** 
 299:../Sources/TFC/TFC_ADC.c ****   ADC_PG_REG(adcmap) = ADC_PG_PG(cal_var);
 210              		.loc 1 299 0
 211 00ee 3B1C     		mov	r3, r7
 212 00f0 0E33     		add	r3, r3, #14
 213 00f2 1A88     		ldrh	r2, [r3]
 214 00f4 7B68     		ldr	r3, [r7, #4]
 215 00f6 DA62     		str	r2, [r3, #44]
 300:../Sources/TFC/TFC_ADC.c ****  
 301:../Sources/TFC/TFC_ADC.c **** 
 302:../Sources/TFC/TFC_ADC.c ****   // Calculate minus-side calibration
 303:../Sources/TFC/TFC_ADC.c ****   cal_var = 0x00;
 216              		.loc 1 303 0
 217 00f8 3B1C     		mov	r3, r7
 218 00fa 0E33     		add	r3, r3, #14
 219 00fc 0022     		mov	r2, #0
 220 00fe 1A80     		strh	r2, [r3]
 304:../Sources/TFC/TFC_ADC.c **** 
 305:../Sources/TFC/TFC_ADC.c ****   cal_var =  ADC_CLM0_REG(adcmap); 
 221              		.loc 1 305 0
 222 0100 7B68     		ldr	r3, [r7, #4]
 223 0102 DA6E     		ldr	r2, [r3, #108]
 224 0104 3B1C     		mov	r3, r7
 225 0106 0E33     		add	r3, r3, #14
 226 0108 1A80     		strh	r2, [r3]
 306:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLM1_REG(adcmap);
 227              		.loc 1 306 0
 228 010a 7B68     		ldr	r3, [r7, #4]
 229 010c 9B6E     		ldr	r3, [r3, #104]
 230 010e 99B2     		uxth	r1, r3
 231 0110 3B1C     		mov	r3, r7
 232 0112 0E33     		add	r3, r3, #14
 233 0114 3A1C     		mov	r2, r7
 234 0116 0E32     		add	r2, r2, #14
 235 0118 1288     		ldrh	r2, [r2]
 236 011a 8A18     		add	r2, r1, r2
 237 011c 1A80     		strh	r2, [r3]
 307:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLM2_REG(adcmap);
 238              		.loc 1 307 0
 239 011e 7B68     		ldr	r3, [r7, #4]
 240 0120 5B6E     		ldr	r3, [r3, #100]
 241 0122 99B2     		uxth	r1, r3
 242 0124 3B1C     		mov	r3, r7
 243 0126 0E33     		add	r3, r3, #14
 244 0128 3A1C     		mov	r2, r7
 245 012a 0E32     		add	r2, r2, #14
 246 012c 1288     		ldrh	r2, [r2]
 247 012e 8A18     		add	r2, r1, r2
 248 0130 1A80     		strh	r2, [r3]
 308:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLM3_REG(adcmap);
 249              		.loc 1 308 0
 250 0132 7B68     		ldr	r3, [r7, #4]
 251 0134 1B6E     		ldr	r3, [r3, #96]
 252 0136 99B2     		uxth	r1, r3
 253 0138 3B1C     		mov	r3, r7
 254 013a 0E33     		add	r3, r3, #14
 255 013c 3A1C     		mov	r2, r7
 256 013e 0E32     		add	r2, r2, #14
 257 0140 1288     		ldrh	r2, [r2]
 258 0142 8A18     		add	r2, r1, r2
 259 0144 1A80     		strh	r2, [r3]
 309:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLM4_REG(adcmap);
 260              		.loc 1 309 0
 261 0146 7B68     		ldr	r3, [r7, #4]
 262 0148 DB6D     		ldr	r3, [r3, #92]
 263 014a 99B2     		uxth	r1, r3
 264 014c 3B1C     		mov	r3, r7
 265 014e 0E33     		add	r3, r3, #14
 266 0150 3A1C     		mov	r2, r7
 267 0152 0E32     		add	r2, r2, #14
 268 0154 1288     		ldrh	r2, [r2]
 269 0156 8A18     		add	r2, r1, r2
 270 0158 1A80     		strh	r2, [r3]
 310:../Sources/TFC/TFC_ADC.c ****   cal_var += ADC_CLMS_REG(adcmap);
 271              		.loc 1 310 0
 272 015a 7B68     		ldr	r3, [r7, #4]
 273 015c 9B6D     		ldr	r3, [r3, #88]
 274 015e 99B2     		uxth	r1, r3
 275 0160 3B1C     		mov	r3, r7
 276 0162 0E33     		add	r3, r3, #14
 277 0164 3A1C     		mov	r2, r7
 278 0166 0E32     		add	r2, r2, #14
 279 0168 1288     		ldrh	r2, [r2]
 280 016a 8A18     		add	r2, r1, r2
 281 016c 1A80     		strh	r2, [r3]
 311:../Sources/TFC/TFC_ADC.c **** 
 312:../Sources/TFC/TFC_ADC.c ****   cal_var = cal_var/2;
 282              		.loc 1 312 0
 283 016e 3B1C     		mov	r3, r7
 284 0170 0E33     		add	r3, r3, #14
 285 0172 3A1C     		mov	r2, r7
 286 0174 0E32     		add	r2, r2, #14
 287 0176 1288     		ldrh	r2, [r2]
 288 0178 5208     		lsr	r2, r2, #1
 289 017a 1A80     		strh	r2, [r3]
 313:../Sources/TFC/TFC_ADC.c **** 
 314:../Sources/TFC/TFC_ADC.c ****   cal_var |= 0x8000; // Set MSB
 290              		.loc 1 314 0
 291 017c 3B1C     		mov	r3, r7
 292 017e 0E33     		add	r3, r3, #14
 293 0180 3A1C     		mov	r2, r7
 294 0182 0E32     		add	r2, r2, #14
 295 0184 1288     		ldrh	r2, [r2]
 296 0186 0A49     		ldr	r1, .L5
 297 0188 0A43     		orr	r2, r1
 298 018a 1A80     		strh	r2, [r3]
 315:../Sources/TFC/TFC_ADC.c **** 
 316:../Sources/TFC/TFC_ADC.c ****   ADC_MG_REG(adcmap) = ADC_MG_MG(cal_var); 
 299              		.loc 1 316 0
 300 018c 3B1C     		mov	r3, r7
 301 018e 0E33     		add	r3, r3, #14
 302 0190 1A88     		ldrh	r2, [r3]
 303 0192 7B68     		ldr	r3, [r7, #4]
 304 0194 1A63     		str	r2, [r3, #48]
 317:../Sources/TFC/TFC_ADC.c ****   
 318:../Sources/TFC/TFC_ADC.c ****   ADC_SC3_REG(adcmap) &= ~ADC_SC3_CAL_MASK ; /* Clear CAL bit */
 305              		.loc 1 318 0
 306 0196 7B68     		ldr	r3, [r7, #4]
 307 0198 5B6A     		ldr	r3, [r3, #36]
 308 019a 8022     		mov	r2, #128
 309 019c 191C     		mov	r1, r3
 310 019e 9143     		bic	r1, r2
 311 01a0 0A1C     		mov	r2, r1
 312 01a2 7B68     		ldr	r3, [r7, #4]
 313 01a4 5A62     		str	r2, [r3, #36]
 319:../Sources/TFC/TFC_ADC.c **** 
 320:../Sources/TFC/TFC_ADC.c ****   return(0);
 314              		.loc 1 320 0
 315 01a6 0023     		mov	r3, #0
 316              	.L4:
 321:../Sources/TFC/TFC_ADC.c **** }
 317              		.loc 1 321 0
 318 01a8 181C     		mov	r0, r3
 319 01aa BD46     		mov	sp, r7
 320 01ac 04B0     		add	sp, sp, #16
 321              		@ sp needed for prologue
 322 01ae 80BD     		pop	{r7, pc}
 323              	.L6:
 324              		.align	2
 325              	.L5:
 326 01b0 0080FFFF 		.word	-32768
 327              		.cfi_endproc
 328              	.LFE0:
 330              		.section	.text.ADC_Config_Alt,"ax",%progbits
 331              		.align	2
 332              		.global	ADC_Config_Alt
 333              		.code	16
 334              		.thumb_func
 336              	ADC_Config_Alt:
 337              	.LFB1:
 322:../Sources/TFC/TFC_ADC.c **** 
 323:../Sources/TFC/TFC_ADC.c **** 
 324:../Sources/TFC/TFC_ADC.c **** 
 325:../Sources/TFC/TFC_ADC.c **** 
 326:../Sources/TFC/TFC_ADC.c **** /******************************************************************************
 327:../Sources/TFC/TFC_ADC.c **** Function 2 Name 	ADC_Config_Alt 
 328:../Sources/TFC/TFC_ADC.c **** Parameters		the register values to be set in the adc in a structure
 329:../Sources/TFC/TFC_ADC.c **** Returns			NONE
 330:../Sources/TFC/TFC_ADC.c **** Notes         		Configures ADC0 or ADC1 depending on adcmap
 331:../Sources/TFC/TFC_ADC.c ****                         Prior to calling this function populate the structure
 332:../Sources/TFC/TFC_ADC.c ****                         elements with the desired ADC configuration.
 333:../Sources/TFC/TFC_ADC.c **** ******************************************************************************/
 334:../Sources/TFC/TFC_ADC.c **** 
 335:../Sources/TFC/TFC_ADC.c **** 
 336:../Sources/TFC/TFC_ADC.c **** void ADC_Config_Alt(ADC_MemMapPtr adcmap, tADC_ConfigPtr ADC_CfgPtr)
 337:../Sources/TFC/TFC_ADC.c **** {
 338              		.loc 1 337 0
 339              		.cfi_startproc
 340 0000 80B5     		push	{r7, lr}
 341              	.LCFI3:
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 7, -8
 344              		.cfi_offset 14, -4
 345 0002 82B0     		sub	sp, sp, #8
 346              	.LCFI4:
 347              		.cfi_def_cfa_offset 16
 348 0004 00AF     		add	r7, sp, #0
 349              	.LCFI5:
 350              		.cfi_def_cfa_register 7
 351 0006 7860     		str	r0, [r7, #4]
 352 0008 3960     		str	r1, [r7]
 338:../Sources/TFC/TFC_ADC.c ****  ADC_CFG1_REG(adcmap) = ADC_CfgPtr->CONFIG1;
 353              		.loc 1 338 0
 354 000a 3B68     		ldr	r3, [r7]
 355 000c 1B78     		ldrb	r3, [r3]
 356 000e 1A1C     		mov	r2, r3
 357 0010 7B68     		ldr	r3, [r7, #4]
 358 0012 9A60     		str	r2, [r3, #8]
 339:../Sources/TFC/TFC_ADC.c ****  ADC_CFG2_REG(adcmap) = ADC_CfgPtr->CONFIG2;
 359              		.loc 1 339 0
 360 0014 3B68     		ldr	r3, [r7]
 361 0016 5B78     		ldrb	r3, [r3, #1]
 362 0018 1A1C     		mov	r2, r3
 363 001a 7B68     		ldr	r3, [r7, #4]
 364 001c DA60     		str	r2, [r3, #12]
 340:../Sources/TFC/TFC_ADC.c ****  ADC_CV1_REG(adcmap)  = ADC_CfgPtr->COMPARE1; 
 365              		.loc 1 340 0
 366 001e 3B68     		ldr	r3, [r7]
 367 0020 5B88     		ldrh	r3, [r3, #2]
 368 0022 1A1C     		mov	r2, r3
 369 0024 7B68     		ldr	r3, [r7, #4]
 370 0026 9A61     		str	r2, [r3, #24]
 341:../Sources/TFC/TFC_ADC.c ****  ADC_CV2_REG(adcmap)  = ADC_CfgPtr->COMPARE2;
 371              		.loc 1 341 0
 372 0028 3B68     		ldr	r3, [r7]
 373 002a 9B88     		ldrh	r3, [r3, #4]
 374 002c 1A1C     		mov	r2, r3
 375 002e 7B68     		ldr	r3, [r7, #4]
 376 0030 DA61     		str	r2, [r3, #28]
 342:../Sources/TFC/TFC_ADC.c ****  ADC_SC2_REG(adcmap)  = ADC_CfgPtr->STATUS2;
 377              		.loc 1 342 0
 378 0032 3B68     		ldr	r3, [r7]
 379 0034 9B79     		ldrb	r3, [r3, #6]
 380 0036 1A1C     		mov	r2, r3
 381 0038 7B68     		ldr	r3, [r7, #4]
 382 003a 1A62     		str	r2, [r3, #32]
 343:../Sources/TFC/TFC_ADC.c ****  ADC_SC3_REG(adcmap)  = ADC_CfgPtr->STATUS3;
 383              		.loc 1 343 0
 384 003c 3B68     		ldr	r3, [r7]
 385 003e DB79     		ldrb	r3, [r3, #7]
 386 0040 1A1C     		mov	r2, r3
 387 0042 7B68     		ldr	r3, [r7, #4]
 388 0044 5A62     		str	r2, [r3, #36]
 344:../Sources/TFC/TFC_ADC.c ****  //ADC_PGA_REG(adcmap)  = ADC_CfgPtr->PGA;
 345:../Sources/TFC/TFC_ADC.c ****  ADC_SC1_REG(adcmap,A)= ADC_CfgPtr->STATUS1A;       
 389              		.loc 1 345 0
 390 0046 3B68     		ldr	r3, [r7]
 391 0048 1B7A     		ldrb	r3, [r3, #8]
 392 004a 1A1C     		mov	r2, r3
 393 004c 7B68     		ldr	r3, [r7, #4]
 394 004e 1A60     		str	r2, [r3]
 346:../Sources/TFC/TFC_ADC.c ****  ADC_SC1_REG(adcmap,B)= ADC_CfgPtr->STATUS1B;
 395              		.loc 1 346 0
 396 0050 3B68     		ldr	r3, [r7]
 397 0052 5B7A     		ldrb	r3, [r3, #9]
 398 0054 1A1C     		mov	r2, r3
 399 0056 7B68     		ldr	r3, [r7, #4]
 400 0058 5A60     		str	r2, [r3, #4]
 347:../Sources/TFC/TFC_ADC.c **** }
 401              		.loc 1 347 0
 402 005a BD46     		mov	sp, r7
 403 005c 02B0     		add	sp, sp, #8
 404              		@ sp needed for prologue
 405 005e 80BD     		pop	{r7, pc}
 406              		.cfi_endproc
 407              	.LFE1:
 409              		.section	.text.ADC_Read_Cal,"ax",%progbits
 410              		.align	2
 411              		.global	ADC_Read_Cal
 412              		.code	16
 413              		.thumb_func
 415              	ADC_Read_Cal:
 416              	.LFB2:
 348:../Sources/TFC/TFC_ADC.c **** 
 349:../Sources/TFC/TFC_ADC.c **** 
 350:../Sources/TFC/TFC_ADC.c **** void ADC_Read_Cal(ADC_MemMapPtr adcmap, tADC_Cal_Blk *blk)
 351:../Sources/TFC/TFC_ADC.c **** {
 417              		.loc 1 351 0
 418              		.cfi_startproc
 419 0000 80B5     		push	{r7, lr}
 420              	.LCFI6:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 82B0     		sub	sp, sp, #8
 425              	.LCFI7:
 426              		.cfi_def_cfa_offset 16
 427 0004 00AF     		add	r7, sp, #0
 428              	.LCFI8:
 429              		.cfi_def_cfa_register 7
 430 0006 7860     		str	r0, [r7, #4]
 431 0008 3960     		str	r1, [r7]
 352:../Sources/TFC/TFC_ADC.c ****   blk->OFS  = ADC_OFS_REG(adcmap);
 432              		.loc 1 352 0
 433 000a 7B68     		ldr	r3, [r7, #4]
 434 000c 9B6A     		ldr	r3, [r3, #40]
 435 000e 9AB2     		uxth	r2, r3
 436 0010 3B68     		ldr	r3, [r7]
 437 0012 1A80     		strh	r2, [r3]
 353:../Sources/TFC/TFC_ADC.c ****   blk->PG   = ADC_PG_REG(adcmap); 
 438              		.loc 1 353 0
 439 0014 7B68     		ldr	r3, [r7, #4]
 440 0016 DB6A     		ldr	r3, [r3, #44]
 441 0018 9AB2     		uxth	r2, r3
 442 001a 3B68     		ldr	r3, [r7]
 443 001c 5A80     		strh	r2, [r3, #2]
 354:../Sources/TFC/TFC_ADC.c ****   blk->MG   = ADC_MG_REG(adcmap); 
 444              		.loc 1 354 0
 445 001e 7B68     		ldr	r3, [r7, #4]
 446 0020 1B6B     		ldr	r3, [r3, #48]
 447 0022 9AB2     		uxth	r2, r3
 448 0024 3B68     		ldr	r3, [r7]
 449 0026 9A80     		strh	r2, [r3, #4]
 355:../Sources/TFC/TFC_ADC.c ****   blk->CLPD = ADC_CLPD_REG(adcmap); 
 450              		.loc 1 355 0
 451 0028 7B68     		ldr	r3, [r7, #4]
 452 002a 5B6B     		ldr	r3, [r3, #52]
 453 002c DAB2     		uxtb	r2, r3
 454 002e 3B68     		ldr	r3, [r7]
 455 0030 9A71     		strb	r2, [r3, #6]
 356:../Sources/TFC/TFC_ADC.c ****   blk->CLPS = ADC_CLPS_REG(adcmap); 
 456              		.loc 1 356 0
 457 0032 7B68     		ldr	r3, [r7, #4]
 458 0034 9B6B     		ldr	r3, [r3, #56]
 459 0036 DAB2     		uxtb	r2, r3
 460 0038 3B68     		ldr	r3, [r7]
 461 003a DA71     		strb	r2, [r3, #7]
 357:../Sources/TFC/TFC_ADC.c ****   blk->CLP4 = ADC_CLP4_REG(adcmap);
 462              		.loc 1 357 0
 463 003c 7B68     		ldr	r3, [r7, #4]
 464 003e DB6B     		ldr	r3, [r3, #60]
 465 0040 9AB2     		uxth	r2, r3
 466 0042 3B68     		ldr	r3, [r7]
 467 0044 1A81     		strh	r2, [r3, #8]
 358:../Sources/TFC/TFC_ADC.c ****   blk->CLP3 = ADC_CLP3_REG(adcmap); 
 468              		.loc 1 358 0
 469 0046 7B68     		ldr	r3, [r7, #4]
 470 0048 1B6C     		ldr	r3, [r3, #64]
 471 004a 9AB2     		uxth	r2, r3
 472 004c 3B68     		ldr	r3, [r7]
 473 004e 5A81     		strh	r2, [r3, #10]
 359:../Sources/TFC/TFC_ADC.c ****   blk->CLP2 = ADC_CLP2_REG(adcmap); 
 474              		.loc 1 359 0
 475 0050 7B68     		ldr	r3, [r7, #4]
 476 0052 5B6C     		ldr	r3, [r3, #68]
 477 0054 DAB2     		uxtb	r2, r3
 478 0056 3B68     		ldr	r3, [r7]
 479 0058 1A73     		strb	r2, [r3, #12]
 360:../Sources/TFC/TFC_ADC.c ****   blk->CLP1 = ADC_CLP1_REG(adcmap);
 480              		.loc 1 360 0
 481 005a 7B68     		ldr	r3, [r7, #4]
 482 005c 9B6C     		ldr	r3, [r3, #72]
 483 005e DAB2     		uxtb	r2, r3
 484 0060 3B68     		ldr	r3, [r7]
 485 0062 5A73     		strb	r2, [r3, #13]
 361:../Sources/TFC/TFC_ADC.c ****   blk->CLP0 = ADC_CLP0_REG(adcmap);
 486              		.loc 1 361 0
 487 0064 7B68     		ldr	r3, [r7, #4]
 488 0066 DB6C     		ldr	r3, [r3, #76]
 489 0068 DAB2     		uxtb	r2, r3
 490 006a 3B68     		ldr	r3, [r7]
 491 006c 9A73     		strb	r2, [r3, #14]
 362:../Sources/TFC/TFC_ADC.c ****   blk->CLMD = ADC_CLMD_REG(adcmap); 
 492              		.loc 1 362 0
 493 006e 7B68     		ldr	r3, [r7, #4]
 494 0070 5B6D     		ldr	r3, [r3, #84]
 495 0072 DAB2     		uxtb	r2, r3
 496 0074 3B68     		ldr	r3, [r7]
 497 0076 1A74     		strb	r2, [r3, #16]
 363:../Sources/TFC/TFC_ADC.c ****   blk->CLMS = ADC_CLMS_REG(adcmap); 
 498              		.loc 1 363 0
 499 0078 7B68     		ldr	r3, [r7, #4]
 500 007a 9B6D     		ldr	r3, [r3, #88]
 501 007c DAB2     		uxtb	r2, r3
 502 007e 3B68     		ldr	r3, [r7]
 503 0080 5A74     		strb	r2, [r3, #17]
 364:../Sources/TFC/TFC_ADC.c ****   blk->CLM4 = ADC_CLM4_REG(adcmap);
 504              		.loc 1 364 0
 505 0082 7B68     		ldr	r3, [r7, #4]
 506 0084 DB6D     		ldr	r3, [r3, #92]
 507 0086 9AB2     		uxth	r2, r3
 508 0088 3B68     		ldr	r3, [r7]
 509 008a 5A82     		strh	r2, [r3, #18]
 365:../Sources/TFC/TFC_ADC.c ****   blk->CLM3 = ADC_CLM3_REG(adcmap); 
 510              		.loc 1 365 0
 511 008c 7B68     		ldr	r3, [r7, #4]
 512 008e 1B6E     		ldr	r3, [r3, #96]
 513 0090 9AB2     		uxth	r2, r3
 514 0092 3B68     		ldr	r3, [r7]
 515 0094 9A82     		strh	r2, [r3, #20]
 366:../Sources/TFC/TFC_ADC.c ****   blk->CLM2 = ADC_CLM2_REG(adcmap); 
 516              		.loc 1 366 0
 517 0096 7B68     		ldr	r3, [r7, #4]
 518 0098 5B6E     		ldr	r3, [r3, #100]
 519 009a DAB2     		uxtb	r2, r3
 520 009c 3B68     		ldr	r3, [r7]
 521 009e 9A75     		strb	r2, [r3, #22]
 367:../Sources/TFC/TFC_ADC.c ****   blk->CLM1 = ADC_CLM1_REG(adcmap);
 522              		.loc 1 367 0
 523 00a0 7B68     		ldr	r3, [r7, #4]
 524 00a2 9B6E     		ldr	r3, [r3, #104]
 525 00a4 DAB2     		uxtb	r2, r3
 526 00a6 3B68     		ldr	r3, [r7]
 527 00a8 DA75     		strb	r2, [r3, #23]
 368:../Sources/TFC/TFC_ADC.c ****   blk->CLM0 = ADC_CLM0_REG(adcmap);
 528              		.loc 1 368 0
 529 00aa 7B68     		ldr	r3, [r7, #4]
 530 00ac DB6E     		ldr	r3, [r3, #108]
 531 00ae DAB2     		uxtb	r2, r3
 532 00b0 3B68     		ldr	r3, [r7]
 533 00b2 1A76     		strb	r2, [r3, #24]
 369:../Sources/TFC/TFC_ADC.c ****   
 370:../Sources/TFC/TFC_ADC.c **** }
 534              		.loc 1 370 0
 535 00b4 BD46     		mov	sp, r7
 536 00b6 02B0     		add	sp, sp, #8
 537              		@ sp needed for prologue
 538 00b8 80BD     		pop	{r7, pc}
 539              		.cfi_endproc
 540              	.LFE2:
 542 00ba C046     		.section	.text.InitADC0,"ax",%progbits
 543              		.align	2
 544              		.global	InitADC0
 545              		.code	16
 546              		.thumb_func
 548              	InitADC0:
 549              	.LFB3:
 371:../Sources/TFC/TFC_ADC.c **** 
 372:../Sources/TFC/TFC_ADC.c **** 
 373:../Sources/TFC/TFC_ADC.c **** 
 374:../Sources/TFC/TFC_ADC.c **** void InitADC0()
 375:../Sources/TFC/TFC_ADC.c **** {
 550              		.loc 1 375 0
 551              		.cfi_startproc
 552 0000 80B5     		push	{r7, lr}
 553              	.LCFI9:
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 7, -8
 556              		.cfi_offset 14, -4
 557 0002 84B0     		sub	sp, sp, #16
 558              	.LCFI10:
 559              		.cfi_def_cfa_offset 24
 560 0004 00AF     		add	r7, sp, #0
 561              	.LCFI11:
 562              		.cfi_def_cfa_register 7
 376:../Sources/TFC/TFC_ADC.c **** 	tADC_Config Master_Adc0_Config;
 377:../Sources/TFC/TFC_ADC.c **** 	
 378:../Sources/TFC/TFC_ADC.c **** 	
 379:../Sources/TFC/TFC_ADC.c ****     SIM_SCGC6 |= (SIM_SCGC6_ADC0_MASK);
 563              		.loc 1 379 0
 564 0006 1F4A     		ldr	r2, .L10
 565 0008 1E49     		ldr	r1, .L10
 566 000a 1F4B     		ldr	r3, .L10+4
 567 000c CB58     		ldr	r3, [r1, r3]
 568 000e 8021     		mov	r1, #128
 569 0010 0905     		lsl	r1, r1, #20
 570 0012 1943     		orr	r1, r3
 571 0014 1C4B     		ldr	r3, .L10+4
 572 0016 D150     		str	r1, [r2, r3]
 380:../Sources/TFC/TFC_ADC.c ****     
 381:../Sources/TFC/TFC_ADC.c ****     //Lets calibrate the ADC. 1st setup how the channel will be used.
 382:../Sources/TFC/TFC_ADC.c **** 
 383:../Sources/TFC/TFC_ADC.c ****     disable_irq(INT_ADC0-16);   
 573              		.loc 1 383 0
 574 0018 0F20     		mov	r0, #15
 575 001a FFF7FEFF 		bl	disable_irq
 384:../Sources/TFC/TFC_ADC.c ****      
 385:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.CONFIG1 = ADLPC_NORMAL 			//No low power mode
 576              		.loc 1 385 0
 577 001e 3B1C     		mov	r3, r7
 578 0020 5422     		mov	r2, #84
 579 0022 1A70     		strb	r2, [r3]
 386:../Sources/TFC/TFC_ADC.c **** 								| ADC_CFG1_ADIV(ADIV_4) //divide input by 4
 387:../Sources/TFC/TFC_ADC.c **** 								| ADLSMP_LONG 			//long sample time
 388:../Sources/TFC/TFC_ADC.c **** 								| ADC_CFG1_MODE(MODE_12)//single ended 8-bit conversion
 389:../Sources/TFC/TFC_ADC.c **** 								| ADC_CFG1_ADICLK(ADICLK_BUS);
 390:../Sources/TFC/TFC_ADC.c ****     
 391:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.CONFIG2 = MUXSEL_ADCA // select the A side of the ADC channel.
 580              		.loc 1 391 0
 581 0024 3B1C     		mov	r3, r7
 582 0026 0722     		mov	r2, #7
 583 0028 5A70     		strb	r2, [r3, #1]
 392:../Sources/TFC/TFC_ADC.c **** 								| ADACKEN_DISABLED
 393:../Sources/TFC/TFC_ADC.c **** 								| ADHSC_HISPEED
 394:../Sources/TFC/TFC_ADC.c **** 								| ADC_CFG2_ADLSTS(ADLSTS_2);//Extra long sample Time (20 extra clocks)
 395:../Sources/TFC/TFC_ADC.c ****     
 396:../Sources/TFC/TFC_ADC.c ****     
 397:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.COMPARE1 = 00000; // Comparators don't matter for calibration
 584              		.loc 1 397 0
 585 002a 3B1C     		mov	r3, r7
 586 002c 0022     		mov	r2, #0
 587 002e 5A80     		strh	r2, [r3, #2]
 398:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.COMPARE1 = 0xFFFF;
 588              		.loc 1 398 0
 589 0030 3B1C     		mov	r3, r7
 590 0032 0122     		mov	r2, #1
 591 0034 5242     		neg	r2, r2
 592 0036 5A80     		strh	r2, [r3, #2]
 399:../Sources/TFC/TFC_ADC.c ****     
 400:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.STATUS2  = ADTRG_HW //hardware triggers for calibration
 593              		.loc 1 400 0
 594 0038 3B1C     		mov	r3, r7
 595 003a 5822     		mov	r2, #88
 596 003c 9A71     		strb	r2, [r3, #6]
 401:../Sources/TFC/TFC_ADC.c ****                                | ACFE_DISABLED //disable comparator
 402:../Sources/TFC/TFC_ADC.c ****                                | ACFGT_GREATER
 403:../Sources/TFC/TFC_ADC.c ****                                | ACREN_ENABLED
 404:../Sources/TFC/TFC_ADC.c ****                                | DMAEN_DISABLED //Disable DMA
 405:../Sources/TFC/TFC_ADC.c ****                                | ADC_SC2_REFSEL(REFSEL_EXT); //External Reference
 406:../Sources/TFC/TFC_ADC.c ****         
 407:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.STATUS3 = CAL_OFF  
 597              		.loc 1 407 0
 598 003e 3B1C     		mov	r3, r7
 599 0040 0422     		mov	r2, #4
 600 0042 DA71     		strb	r2, [r3, #7]
 408:../Sources/TFC/TFC_ADC.c **** 								| ADCO_SINGLE
 409:../Sources/TFC/TFC_ADC.c ****     							| AVGE_ENABLED
 410:../Sources/TFC/TFC_ADC.c **** 								| ADC_SC3_AVGS(AVGS_4);
 411:../Sources/TFC/TFC_ADC.c **** 								
 412:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.PGA =     0; // Disable the PGA
 601              		.loc 1 412 0
 602 0044 3B1C     		mov	r3, r7
 603 0046 0022     		mov	r2, #0
 604 0048 DA60     		str	r2, [r3, #12]
 413:../Sources/TFC/TFC_ADC.c ****    
 414:../Sources/TFC/TFC_ADC.c ****    
 415:../Sources/TFC/TFC_ADC.c ****     // Configure ADC as it will be used, but because ADC_SC1_ADCH is 31,
 416:../Sources/TFC/TFC_ADC.c ****     // the ADC will be inactive.  Channel 31 is just disable function.
 417:../Sources/TFC/TFC_ADC.c ****     // There really is no channel 31.
 418:../Sources/TFC/TFC_ADC.c ****     
 419:../Sources/TFC/TFC_ADC.c ****     Master_Adc0_Config.STATUS1A = AIEN_ON | DIFF_SINGLE | ADC_SC1_ADCH(31);
 605              		.loc 1 419 0
 606 004a 3B1C     		mov	r3, r7
 607 004c 5F22     		mov	r2, #95
 608 004e 1A72     		strb	r2, [r3, #8]
 420:../Sources/TFC/TFC_ADC.c **** 
 421:../Sources/TFC/TFC_ADC.c ****     
 422:../Sources/TFC/TFC_ADC.c ****     ADC_Config_Alt(ADC0_BASE_PTR, &Master_Adc0_Config);  // config ADC
 609              		.loc 1 422 0
 610 0050 0E4A     		ldr	r2, .L10+8
 611 0052 3B1C     		mov	r3, r7
 612 0054 101C     		mov	r0, r2
 613 0056 191C     		mov	r1, r3
 614 0058 FFF7FEFF 		bl	ADC_Config_Alt
 423:../Sources/TFC/TFC_ADC.c ****  
 424:../Sources/TFC/TFC_ADC.c ****     // Calibrate the ADC in the configuration in which it will be used:
 425:../Sources/TFC/TFC_ADC.c ****      ADC_Cal(ADC0_BASE_PTR);                    // do the calibration
 615              		.loc 1 425 0
 616 005c 0B4B     		ldr	r3, .L10+8
 617 005e 181C     		mov	r0, r3
 618 0060 FFF7FEFF 		bl	ADC_Cal
 426:../Sources/TFC/TFC_ADC.c ****      
 427:../Sources/TFC/TFC_ADC.c ****      
 428:../Sources/TFC/TFC_ADC.c ****      Master_Adc0_Config.STATUS2  = ACFE_DISABLED //disable comparator
 619              		.loc 1 428 0
 620 0064 3B1C     		mov	r3, r7
 621 0066 1822     		mov	r2, #24
 622 0068 9A71     		strb	r2, [r3, #6]
 429:../Sources/TFC/TFC_ADC.c ****                                 | ACFGT_GREATER
 430:../Sources/TFC/TFC_ADC.c ****                                 | ACREN_ENABLED
 431:../Sources/TFC/TFC_ADC.c ****                                 | DMAEN_DISABLED //Disable DMA
 432:../Sources/TFC/TFC_ADC.c ****                                 | ADC_SC2_REFSEL(REFSEL_EXT); //External Reference
 433:../Sources/TFC/TFC_ADC.c ****     
 434:../Sources/TFC/TFC_ADC.c ****      Master_Adc0_Config.STATUS3 = CAL_OFF  
 623              		.loc 1 434 0
 624 006a 3B1C     		mov	r3, r7
 625 006c 0022     		mov	r2, #0
 626 006e DA71     		strb	r2, [r3, #7]
 435:../Sources/TFC/TFC_ADC.c ****      							| ADCO_SINGLE;
 436:../Sources/TFC/TFC_ADC.c ****      	 	 	 	 	 	 	
 437:../Sources/TFC/TFC_ADC.c ****      	 	 	 	 	 	 	
 438:../Sources/TFC/TFC_ADC.c ****      			
 439:../Sources/TFC/TFC_ADC.c ****      ADC_Config_Alt(ADC0_BASE_PTR, &Master_Adc0_Config);
 627              		.loc 1 439 0
 628 0070 064A     		ldr	r2, .L10+8
 629 0072 3B1C     		mov	r3, r7
 630 0074 101C     		mov	r0, r2
 631 0076 191C     		mov	r1, r3
 632 0078 FFF7FEFF 		bl	ADC_Config_Alt
 440:../Sources/TFC/TFC_ADC.c **** }
 633              		.loc 1 440 0
 634 007c BD46     		mov	sp, r7
 635 007e 04B0     		add	sp, sp, #16
 636              		@ sp needed for prologue
 637 0080 80BD     		pop	{r7, pc}
 638              	.L11:
 639 0082 C046     		.align	2
 640              	.L10:
 641 0084 00700440 		.word	1074032640
 642 0088 3C100000 		.word	4156
 643 008c 00B00340 		.word	1073983488
 644              		.cfi_endproc
 645              	.LFE3:
 647              		.section	.text.TFC_InitADCs,"ax",%progbits
 648              		.align	2
 649              		.global	TFC_InitADCs
 650              		.code	16
 651              		.thumb_func
 653              	TFC_InitADCs:
 654              	.LFB4:
 441:../Sources/TFC/TFC_ADC.c **** 
 442:../Sources/TFC/TFC_ADC.c **** 
 443:../Sources/TFC/TFC_ADC.c **** 
 444:../Sources/TFC/TFC_ADC.c **** void TFC_InitADCs()
 445:../Sources/TFC/TFC_ADC.c **** {
 655              		.loc 1 445 0
 656              		.cfi_startproc
 657 0000 80B5     		push	{r7, lr}
 658              	.LCFI12:
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 7, -8
 661              		.cfi_offset 14, -4
 662 0002 00AF     		add	r7, sp, #0
 663              	.LCFI13:
 664              		.cfi_def_cfa_register 7
 446:../Sources/TFC/TFC_ADC.c **** 
 447:../Sources/TFC/TFC_ADC.c **** 	 InitADC0();
 665              		.loc 1 447 0
 666 0004 FFF7FEFF 		bl	InitADC0
 448:../Sources/TFC/TFC_ADC.c **** 
 449:../Sources/TFC/TFC_ADC.c **** 	
 450:../Sources/TFC/TFC_ADC.c **** 	//All Adc processing of the Pots and linescan will be done in the ADC0 IRQ!
 451:../Sources/TFC/TFC_ADC.c **** 	//A state machine will scan through the channels.
 452:../Sources/TFC/TFC_ADC.c **** 	//This is done to automate the linescan capture on Channel 0 to ensure that timing is very even
 453:../Sources/TFC/TFC_ADC.c **** 	CurrentADC_State =	ADC_STATE_INIT;	
 667              		.loc 1 453 0
 668 0008 144B     		ldr	r3, .L13
 669 000a 0022     		mov	r2, #0
 670 000c 1A70     		strb	r2, [r3]
 454:../Sources/TFC/TFC_ADC.c **** 
 455:../Sources/TFC/TFC_ADC.c ****     //The pump will be primed with the PIT interrupt.  upon timeout/interrupt it will set the SI si
 456:../Sources/TFC/TFC_ADC.c **** 	//for the camera and then start the conversions for the pots.
 457:../Sources/TFC/TFC_ADC.c **** 	
 458:../Sources/TFC/TFC_ADC.c **** 	//Enable clock to the PIT
 459:../Sources/TFC/TFC_ADC.c **** 	SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;
 671              		.loc 1 459 0
 672 000e 144A     		ldr	r2, .L13+4
 673 0010 1349     		ldr	r1, .L13+4
 674 0012 144B     		ldr	r3, .L13+8
 675 0014 CB58     		ldr	r3, [r1, r3]
 676 0016 8021     		mov	r1, #128
 677 0018 0904     		lsl	r1, r1, #16
 678 001a 1943     		orr	r1, r3
 679 001c 114B     		ldr	r3, .L13+8
 680 001e D150     		str	r1, [r2, r3]
 460:../Sources/TFC/TFC_ADC.c **** 	
 461:../Sources/TFC/TFC_ADC.c **** 	//We will use PIT0
 462:../Sources/TFC/TFC_ADC.c **** 	TFC_SetLineScanExposureTime(TFC_DEFAULT_LINESCAN_EXPOSURE_TIME_uS);
 681              		.loc 1 462 0
 682 0020 114B     		ldr	r3, .L13+12
 683 0022 181C     		mov	r0, r3
 684 0024 FFF7FEFF 		bl	TFC_SetLineScanExposureTime
 463:../Sources/TFC/TFC_ADC.c **** 	//enable PIT0 and its interrupt
 464:../Sources/TFC/TFC_ADC.c **** 	PIT_TCTRL0 = PIT_TCTRL_TEN_MASK | PIT_TCTRL_TIE_MASK;
 685              		.loc 1 464 0
 686 0028 104A     		ldr	r2, .L13+16
 687 002a 8423     		mov	r3, #132
 688 002c 5B00     		lsl	r3, r3, #1
 689 002e 0321     		mov	r1, #3
 690 0030 D150     		str	r1, [r2, r3]
 465:../Sources/TFC/TFC_ADC.c **** 
 466:../Sources/TFC/TFC_ADC.c **** 	PIT_MCR |= PIT_MCR_FRZ_MASK; // stop the pit when in debug mode
 691              		.loc 1 466 0
 692 0032 0E4B     		ldr	r3, .L13+16
 693 0034 0D4A     		ldr	r2, .L13+16
 694 0036 1268     		ldr	r2, [r2]
 695 0038 0121     		mov	r1, #1
 696 003a 0A43     		orr	r2, r1
 697 003c 1A60     		str	r2, [r3]
 467:../Sources/TFC/TFC_ADC.c **** 	//Enable the PIT module
 468:../Sources/TFC/TFC_ADC.c **** 	PIT_MCR &= ~PIT_MCR_MDIS_MASK;
 698              		.loc 1 468 0
 699 003e 0B4B     		ldr	r3, .L13+16
 700 0040 0A4A     		ldr	r2, .L13+16
 701 0042 1268     		ldr	r2, [r2]
 702 0044 0221     		mov	r1, #2
 703 0046 8A43     		bic	r2, r1
 704 0048 1A60     		str	r2, [r3]
 469:../Sources/TFC/TFC_ADC.c **** 	
 470:../Sources/TFC/TFC_ADC.c **** 	enable_irq(INT_PIT-16);
 705              		.loc 1 470 0
 706 004a 1620     		mov	r0, #22
 707 004c FFF7FEFF 		bl	enable_irq
 471:../Sources/TFC/TFC_ADC.c **** 	enable_irq(INT_ADC0-16);
 708              		.loc 1 471 0
 709 0050 0F20     		mov	r0, #15
 710 0052 FFF7FEFF 		bl	enable_irq
 472:../Sources/TFC/TFC_ADC.c **** 	
 473:../Sources/TFC/TFC_ADC.c **** 
 474:../Sources/TFC/TFC_ADC.c **** 	
 475:../Sources/TFC/TFC_ADC.c **** }
 711              		.loc 1 475 0
 712 0056 BD46     		mov	sp, r7
 713              		@ sp needed for prologue
 714 0058 80BD     		pop	{r7, pc}
 715              	.L14:
 716 005a C046     		.align	2
 717              	.L13:
 718 005c 00000000 		.word	CurrentADC_State
 719 0060 00700440 		.word	1074032640
 720 0064 3C100000 		.word	4156
 721 0068 50C30000 		.word	50000
 722 006c 00700340 		.word	1073967104
 723              		.cfi_endproc
 724              	.LFE4:
 726              		.section	.text.PIT_IRQHandler,"ax",%progbits
 727              		.align	2
 728              		.global	PIT_IRQHandler
 729              		.code	16
 730              		.thumb_func
 732              	PIT_IRQHandler:
 733              	.LFB5:
 476:../Sources/TFC/TFC_ADC.c **** 
 477:../Sources/TFC/TFC_ADC.c **** void PIT_IRQHandler()
 478:../Sources/TFC/TFC_ADC.c **** {
 734              		.loc 1 478 0
 735              		.cfi_startproc
 736 0000 80B5     		push	{r7, lr}
 737              	.LCFI14:
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 7, -8
 740              		.cfi_offset 14, -4
 741 0002 00AF     		add	r7, sp, #0
 742              	.LCFI15:
 743              		.cfi_def_cfa_register 7
 479:../Sources/TFC/TFC_ADC.c **** 	PIT_TFLG0 = PIT_TFLG_TIF_MASK; //Turn off the Pit 0 Irq flag 
 744              		.loc 1 479 0
 745 0004 0A4A     		ldr	r2, .L16
 746 0006 8623     		mov	r3, #134
 747 0008 5B00     		lsl	r3, r3, #1
 748 000a 0121     		mov	r1, #1
 749 000c D150     		str	r1, [r2, r3]
 480:../Sources/TFC/TFC_ADC.c **** 	
 481:../Sources/TFC/TFC_ADC.c **** 	TAOS_SI_HIGH;
 750              		.loc 1 481 0
 751 000e 094B     		ldr	r3, .L16+4
 752 0010 8022     		mov	r2, #128
 753 0012 5A60     		str	r2, [r3, #4]
 482:../Sources/TFC/TFC_ADC.c **** 	//Prime the ADC pump and start capturing POT 0
 483:../Sources/TFC/TFC_ADC.c **** 	CurrentADC_State = ADC_STATE_CAPTURE_POT_0;
 754              		.loc 1 483 0
 755 0014 084B     		ldr	r3, .L16+8
 756 0016 0122     		mov	r2, #1
 757 0018 1A70     		strb	r2, [r3]
 484:../Sources/TFC/TFC_ADC.c **** 	
 485:../Sources/TFC/TFC_ADC.c **** 	ADC0_CFG2  &= ~ADC_CFG2_MUXSEL_MASK; //Select the A side of the mux
 758              		.loc 1 485 0
 759 001a 084B     		ldr	r3, .L16+12
 760 001c 074A     		ldr	r2, .L16+12
 761 001e D268     		ldr	r2, [r2, #12]
 762 0020 1021     		mov	r1, #16
 763 0022 8A43     		bic	r2, r1
 764 0024 DA60     		str	r2, [r3, #12]
 486:../Sources/TFC/TFC_ADC.c **** 	ADC0_SC1A  =  TFC_POT_0_ADC_CHANNEL | ADC_SC1_AIEN_MASK;  //Start the State machine at POT0
 765              		.loc 1 486 0
 766 0026 054B     		ldr	r3, .L16+12
 767 0028 4D22     		mov	r2, #77
 768 002a 1A60     		str	r2, [r3]
 487:../Sources/TFC/TFC_ADC.c **** }
 769              		.loc 1 487 0
 770 002c BD46     		mov	sp, r7
 771              		@ sp needed for prologue
 772 002e 80BD     		pop	{r7, pc}
 773              	.L17:
 774              		.align	2
 775              	.L16:
 776 0030 00700340 		.word	1073967104
 777 0034 C0F00F40 		.word	1074786496
 778 0038 00000000 		.word	CurrentADC_State
 779 003c 00B00340 		.word	1073983488
 780              		.cfi_endproc
 781              	.LFE5:
 783              		.section	.text.ADC0_IRQHandler,"ax",%progbits
 784              		.align	2
 785              		.global	ADC0_IRQHandler
 786              		.code	16
 787              		.thumb_func
 789              	ADC0_IRQHandler:
 790              	.LFB6:
 488:../Sources/TFC/TFC_ADC.c **** 
 489:../Sources/TFC/TFC_ADC.c **** 
 490:../Sources/TFC/TFC_ADC.c **** 
 491:../Sources/TFC/TFC_ADC.c **** void ADC0_IRQHandler()
 492:../Sources/TFC/TFC_ADC.c **** {
 791              		.loc 1 492 0
 792              		.cfi_startproc
 793 0000 80B5     		push	{r7, lr}
 794              	.LCFI16:
 795              		.cfi_def_cfa_offset 8
 796              		.cfi_offset 7, -8
 797              		.cfi_offset 14, -4
 798 0002 82B0     		sub	sp, sp, #8
 799              	.LCFI17:
 800              		.cfi_def_cfa_offset 16
 801 0004 00AF     		add	r7, sp, #0
 802              	.LCFI18:
 803              		.cfi_def_cfa_register 7
 493:../Sources/TFC/TFC_ADC.c **** 	uint8_t Junk;
 494:../Sources/TFC/TFC_ADC.c **** 	switch(CurrentADC_State)
 804              		.loc 1 494 0
 805 0006 754B     		ldr	r3, .L38
 806 0008 1B78     		ldrb	r3, [r3]
 807 000a 022B     		cmp	r3, #2
 808 000c 1ED0     		beq	.L21
 809 000e 02DC     		bgt	.L24
 810 0010 012B     		cmp	r3, #1
 811 0012 09D0     		beq	.L20
 812 0014 03E0     		b	.L19
 813              	.L24:
 814 0016 032B     		cmp	r3, #3
 815 0018 2AD0     		beq	.L22
 816 001a 042B     		cmp	r3, #4
 817 001c 53D0     		beq	.L23
 818              	.L19:
 495:../Sources/TFC/TFC_ADC.c **** 	{
 496:../Sources/TFC/TFC_ADC.c **** 		default:
 497:../Sources/TFC/TFC_ADC.c **** 			Junk =  ADC0_RA;
 819              		.loc 1 497 0
 820 001e 704B     		ldr	r3, .L38+4
 821 0020 1A69     		ldr	r2, [r3, #16]
 822 0022 FB1D     		add	r3, r7, #7
 823 0024 1A70     		strb	r2, [r3]
 498:../Sources/TFC/TFC_ADC.c **** 		break;
 824              		.loc 1 498 0
 825 0026 D6E0     		b	.L18
 826              	.L20:
 499:../Sources/TFC/TFC_ADC.c **** 		
 500:../Sources/TFC/TFC_ADC.c **** 		case ADC_STATE_CAPTURE_POT_0:
 501:../Sources/TFC/TFC_ADC.c **** 				
 502:../Sources/TFC/TFC_ADC.c **** 				PotADC_Value[0] = ADC0_RA;
 827              		.loc 1 502 0
 828 0028 6D4B     		ldr	r3, .L38+4
 829 002a 1B69     		ldr	r3, [r3, #16]
 830 002c 9AB2     		uxth	r2, r3
 831 002e 6D4B     		ldr	r3, .L38+8
 832 0030 1A80     		strh	r2, [r3]
 503:../Sources/TFC/TFC_ADC.c **** 				ADC0_CFG2  &= ~ADC_CFG2_MUXSEL_MASK; //Select the A side of the mux
 833              		.loc 1 503 0
 834 0032 6B4B     		ldr	r3, .L38+4
 835 0034 6A4A     		ldr	r2, .L38+4
 836 0036 D268     		ldr	r2, [r2, #12]
 837 0038 1021     		mov	r1, #16
 838 003a 8A43     		bic	r2, r1
 839 003c DA60     		str	r2, [r3, #12]
 504:../Sources/TFC/TFC_ADC.c **** 				ADC0_SC1A  =  TFC_POT_1_ADC_CHANNEL | ADC_SC1_AIEN_MASK;
 840              		.loc 1 504 0
 841 003e 684B     		ldr	r3, .L38+4
 842 0040 4C22     		mov	r2, #76
 843 0042 1A60     		str	r2, [r3]
 505:../Sources/TFC/TFC_ADC.c **** 				CurrentADC_State = ADC_STATE_CAPTURE_POT_1;
 844              		.loc 1 505 0
 845 0044 654B     		ldr	r3, .L38
 846 0046 0222     		mov	r2, #2
 847 0048 1A70     		strb	r2, [r3]
 506:../Sources/TFC/TFC_ADC.c **** 				
 507:../Sources/TFC/TFC_ADC.c **** 			break;
 848              		.loc 1 507 0
 849 004a C4E0     		b	.L18
 850              	.L21:
 508:../Sources/TFC/TFC_ADC.c **** 		
 509:../Sources/TFC/TFC_ADC.c **** 		case ADC_STATE_CAPTURE_POT_1:
 510:../Sources/TFC/TFC_ADC.c **** 		
 511:../Sources/TFC/TFC_ADC.c **** 				PotADC_Value[1] = ADC0_RA;
 851              		.loc 1 511 0
 852 004c 644B     		ldr	r3, .L38+4
 853 004e 1B69     		ldr	r3, [r3, #16]
 854 0050 9AB2     		uxth	r2, r3
 855 0052 644B     		ldr	r3, .L38+8
 856 0054 5A80     		strh	r2, [r3, #2]
 512:../Sources/TFC/TFC_ADC.c **** 				ADC0_CFG2  |= ADC_CFG2_MUXSEL_MASK; //Select the B side of the mux
 857              		.loc 1 512 0
 858 0056 624B     		ldr	r3, .L38+4
 859 0058 614A     		ldr	r2, .L38+4
 860 005a D268     		ldr	r2, [r2, #12]
 861 005c 1021     		mov	r1, #16
 862 005e 0A43     		orr	r2, r1
 863 0060 DA60     		str	r2, [r3, #12]
 513:../Sources/TFC/TFC_ADC.c **** 				ADC0_SC1A  =  TFC_BAT_SENSE_CHANNEL| ADC_SC1_AIEN_MASK;
 864              		.loc 1 513 0
 865 0062 5F4B     		ldr	r3, .L38+4
 866 0064 4422     		mov	r2, #68
 867 0066 1A60     		str	r2, [r3]
 514:../Sources/TFC/TFC_ADC.c **** 				CurrentADC_State = ADC_STATE_CAPTURE_BATTERY_LEVEL;
 868              		.loc 1 514 0
 869 0068 5C4B     		ldr	r3, .L38
 870 006a 0322     		mov	r2, #3
 871 006c 1A70     		strb	r2, [r3]
 515:../Sources/TFC/TFC_ADC.c **** 				
 516:../Sources/TFC/TFC_ADC.c **** 			break;
 872              		.loc 1 516 0
 873 006e B2E0     		b	.L18
 874              	.L22:
 517:../Sources/TFC/TFC_ADC.c **** 		
 518:../Sources/TFC/TFC_ADC.c **** 		case ADC_STATE_CAPTURE_BATTERY_LEVEL:
 519:../Sources/TFC/TFC_ADC.c **** 			
 520:../Sources/TFC/TFC_ADC.c **** 				BatSenseADC_Value = ADC0_RA;
 875              		.loc 1 520 0
 876 0070 5B4B     		ldr	r3, .L38+4
 877 0072 1B69     		ldr	r3, [r3, #16]
 878 0074 9AB2     		uxth	r2, r3
 879 0076 5C4B     		ldr	r3, .L38+12
 880 0078 1A80     		strh	r2, [r3]
 521:../Sources/TFC/TFC_ADC.c **** 				
 522:../Sources/TFC/TFC_ADC.c **** 				//Now we will start the sequence for the Linescan camera
 523:../Sources/TFC/TFC_ADC.c **** 				
 524:../Sources/TFC/TFC_ADC.c **** 				TAOS_CLK_HIGH;
 881              		.loc 1 524 0
 882 007a 5C4B     		ldr	r3, .L38+16
 883 007c 0222     		mov	r2, #2
 884 007e 5A60     		str	r2, [r3, #4]
 525:../Sources/TFC/TFC_ADC.c **** 				
 526:../Sources/TFC/TFC_ADC.c **** 				for(Junk = 0;Junk<50;Junk++)
 885              		.loc 1 526 0
 886 0080 FB1D     		add	r3, r7, #7
 887 0082 0022     		mov	r2, #0
 888 0084 1A70     		strb	r2, [r3]
 889 0086 04E0     		b	.L26
 890              	.L27:
 891              		.loc 1 526 0 is_stmt 0
 892 0088 FB1D     		add	r3, r7, #7
 893 008a FA1D     		add	r2, r7, #7
 894 008c 1278     		ldrb	r2, [r2]
 895 008e 0132     		add	r2, r2, #1
 896 0090 1A70     		strb	r2, [r3]
 897              	.L26:
 898              		.loc 1 526 0
 899 0092 FB1D     		add	r3, r7, #7
 900 0094 1B78     		ldrb	r3, [r3]
 901 0096 312B     		cmp	r3, #49
 902 0098 F6D9     		bls	.L27
 527:../Sources/TFC/TFC_ADC.c **** 				{
 528:../Sources/TFC/TFC_ADC.c **** 				}
 529:../Sources/TFC/TFC_ADC.c **** 				
 530:../Sources/TFC/TFC_ADC.c **** 				TAOS_SI_LOW;
 903              		.loc 1 530 0 is_stmt 1
 904 009a 554B     		ldr	r3, .L38+20
 905 009c 8022     		mov	r2, #128
 906 009e 9A60     		str	r2, [r3, #8]
 531:../Sources/TFC/TFC_ADC.c **** 
 532:../Sources/TFC/TFC_ADC.c **** 				
 533:../Sources/TFC/TFC_ADC.c **** 				CurrentLineScanPixel = 0;
 907              		.loc 1 533 0
 908 00a0 544B     		ldr	r3, .L38+24
 909 00a2 0022     		mov	r2, #0
 910 00a4 1A70     		strb	r2, [r3]
 534:../Sources/TFC/TFC_ADC.c **** 				CurrentLineScanChannel = 0;
 911              		.loc 1 534 0
 912 00a6 544B     		ldr	r3, .L38+28
 913 00a8 0022     		mov	r2, #0
 914 00aa 1A70     		strb	r2, [r3]
 535:../Sources/TFC/TFC_ADC.c **** 				CurrentADC_State = ADC_STATE_CAPTURE_LINE_SCAN;
 915              		.loc 1 535 0
 916 00ac 4B4B     		ldr	r3, .L38
 917 00ae 0422     		mov	r2, #4
 918 00b0 1A70     		strb	r2, [r3]
 536:../Sources/TFC/TFC_ADC.c **** 				ADC0_CFG2  |= ADC_CFG2_MUXSEL_MASK; //Select the B side of the mux
 919              		.loc 1 536 0
 920 00b2 4B4B     		ldr	r3, .L38+4
 921 00b4 4A4A     		ldr	r2, .L38+4
 922 00b6 D268     		ldr	r2, [r2, #12]
 923 00b8 1021     		mov	r1, #16
 924 00ba 0A43     		orr	r2, r1
 925 00bc DA60     		str	r2, [r3, #12]
 537:../Sources/TFC/TFC_ADC.c **** 				ADC0_SC1A  =  TFC_LINESCAN0_ADC_CHANNEL | ADC_SC1_AIEN_MASK;
 926              		.loc 1 537 0
 927 00be 484B     		ldr	r3, .L38+4
 928 00c0 4622     		mov	r2, #70
 929 00c2 1A60     		str	r2, [r3]
 538:../Sources/TFC/TFC_ADC.c **** 				
 539:../Sources/TFC/TFC_ADC.c **** 				break;
 930              		.loc 1 539 0
 931 00c4 87E0     		b	.L18
 932              	.L23:
 540:../Sources/TFC/TFC_ADC.c **** 		
 541:../Sources/TFC/TFC_ADC.c **** 		case ADC_STATE_CAPTURE_LINE_SCAN:
 542:../Sources/TFC/TFC_ADC.c **** 					
 543:../Sources/TFC/TFC_ADC.c **** 					if(CurrentLineScanPixel<128)
 933              		.loc 1 543 0
 934 00c6 4B4B     		ldr	r3, .L38+24
 935 00c8 1B78     		ldrb	r3, [r3]
 936 00ca DBB2     		uxtb	r3, r3
 937 00cc DBB2     		uxtb	r3, r3
 938 00ce 5BB2     		sxtb	r3, r3
 939 00d0 002B     		cmp	r3, #0
 940 00d2 42DB     		blt	.L28
 544:../Sources/TFC/TFC_ADC.c **** 					{
 545:../Sources/TFC/TFC_ADC.c **** 						if(CurrentLineScanChannel == 0)
 941              		.loc 1 545 0
 942 00d4 484B     		ldr	r3, .L38+28
 943 00d6 1B78     		ldrb	r3, [r3]
 944 00d8 DBB2     		uxtb	r3, r3
 945 00da 002B     		cmp	r3, #0
 946 00dc 11D1     		bne	.L29
 546:../Sources/TFC/TFC_ADC.c **** 						{
 547:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0WorkingBuffer[CurrentLineScanPixel] = ADC0_RA;
 947              		.loc 1 547 0
 948 00de 474B     		ldr	r3, .L38+32
 949 00e0 1A68     		ldr	r2, [r3]
 950 00e2 444B     		ldr	r3, .L38+24
 951 00e4 1B78     		ldrb	r3, [r3]
 952 00e6 DBB2     		uxtb	r3, r3
 953 00e8 5B00     		lsl	r3, r3, #1
 954 00ea D218     		add	r2, r2, r3
 955 00ec 3C4B     		ldr	r3, .L38+4
 956 00ee 1B69     		ldr	r3, [r3, #16]
 957 00f0 9BB2     		uxth	r3, r3
 958 00f2 1380     		strh	r3, [r2]
 548:../Sources/TFC/TFC_ADC.c **** 							ADC0_SC1A  =  TFC_LINESCAN1_ADC_CHANNEL | ADC_SC1_AIEN_MASK;
 959              		.loc 1 548 0
 960 00f4 3A4B     		ldr	r3, .L38+4
 961 00f6 4722     		mov	r2, #71
 962 00f8 1A60     		str	r2, [r3]
 549:../Sources/TFC/TFC_ADC.c **** 							CurrentLineScanChannel = 1;
 963              		.loc 1 549 0
 964 00fa 3F4B     		ldr	r3, .L38+28
 965 00fc 0122     		mov	r2, #1
 966 00fe 1A70     		strb	r2, [r3]
 550:../Sources/TFC/TFC_ADC.c **** 							
 551:../Sources/TFC/TFC_ADC.c **** 						}
 552:../Sources/TFC/TFC_ADC.c **** 						else
 553:../Sources/TFC/TFC_ADC.c **** 						{
 554:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1WorkingBuffer[CurrentLineScanPixel] = ADC0_RA;
 555:../Sources/TFC/TFC_ADC.c **** 							ADC0_SC1A  =  TFC_LINESCAN0_ADC_CHANNEL | ADC_SC1_AIEN_MASK;
 556:../Sources/TFC/TFC_ADC.c **** 							CurrentLineScanChannel = 0;
 557:../Sources/TFC/TFC_ADC.c **** 							CurrentLineScanPixel++;
 558:../Sources/TFC/TFC_ADC.c **** 							
 559:../Sources/TFC/TFC_ADC.c **** 							TAOS_CLK_LOW;
 560:../Sources/TFC/TFC_ADC.c **** 								for(Junk = 0;Junk<50;Junk++)
 561:../Sources/TFC/TFC_ADC.c **** 									{
 562:../Sources/TFC/TFC_ADC.c **** 									}
 563:../Sources/TFC/TFC_ADC.c **** 							TAOS_CLK_HIGH;
 564:../Sources/TFC/TFC_ADC.c **** 							
 565:../Sources/TFC/TFC_ADC.c **** 						}
 566:../Sources/TFC/TFC_ADC.c **** 						
 567:../Sources/TFC/TFC_ADC.c **** 					}
 568:../Sources/TFC/TFC_ADC.c **** 					else
 569:../Sources/TFC/TFC_ADC.c **** 					{
 570:../Sources/TFC/TFC_ADC.c **** 						// done with the capture sequence.  we can wait for the PIT0 IRQ to restart
 571:../Sources/TFC/TFC_ADC.c **** 					
 572:../Sources/TFC/TFC_ADC.c **** 						TAOS_CLK_HIGH;
 573:../Sources/TFC/TFC_ADC.c **** 											
 574:../Sources/TFC/TFC_ADC.c **** 						for(Junk = 0;Junk<50;Junk++)
 575:../Sources/TFC/TFC_ADC.c **** 							{
 576:../Sources/TFC/TFC_ADC.c **** 							}
 577:../Sources/TFC/TFC_ADC.c **** 						
 578:../Sources/TFC/TFC_ADC.c **** 						TAOS_CLK_LOW;
 579:../Sources/TFC/TFC_ADC.c **** 						CurrentADC_State = ADC_STATE_INIT;	 
 580:../Sources/TFC/TFC_ADC.c **** 						
 581:../Sources/TFC/TFC_ADC.c **** 						//swap the buffer
 582:../Sources/TFC/TFC_ADC.c **** 						
 583:../Sources/TFC/TFC_ADC.c **** 						if(LineScanWorkingBuffer == 0)
 584:../Sources/TFC/TFC_ADC.c **** 						{
 585:../Sources/TFC/TFC_ADC.c **** 							LineScanWorkingBuffer = 1;
 586:../Sources/TFC/TFC_ADC.c **** 							
 587:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0WorkingBuffer = &LineScanImage0Buffer[1][0];
 588:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1WorkingBuffer = &LineScanImage1Buffer[1][0];
 589:../Sources/TFC/TFC_ADC.c **** 							
 590:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0 = &LineScanImage0Buffer[0][0];
 591:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1 = &LineScanImage1Buffer[0][0];
 592:../Sources/TFC/TFC_ADC.c **** 						}
 593:../Sources/TFC/TFC_ADC.c **** 						else
 594:../Sources/TFC/TFC_ADC.c **** 						{
 595:../Sources/TFC/TFC_ADC.c **** 							LineScanWorkingBuffer = 0;
 596:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0WorkingBuffer = &LineScanImage0Buffer[0][0];
 597:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1WorkingBuffer = &LineScanImage1Buffer[0][0];
 598:../Sources/TFC/TFC_ADC.c **** 							
 599:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0 = &LineScanImage0Buffer[1][0];
 600:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1 = &LineScanImage1Buffer[1][0];
 601:../Sources/TFC/TFC_ADC.c **** 						}
 602:../Sources/TFC/TFC_ADC.c **** 						
 603:../Sources/TFC/TFC_ADC.c **** 						LineScanImageReady = TRUE;
 604:../Sources/TFC/TFC_ADC.c **** 					}
 605:../Sources/TFC/TFC_ADC.c **** 					
 606:../Sources/TFC/TFC_ADC.c **** 					break;
 967              		.loc 1 606 0
 968 0100 68E0     		b	.L37
 969              	.L29:
 554:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1WorkingBuffer[CurrentLineScanPixel] = ADC0_RA;
 970              		.loc 1 554 0
 971 0102 3F4B     		ldr	r3, .L38+36
 972 0104 1A68     		ldr	r2, [r3]
 973 0106 3B4B     		ldr	r3, .L38+24
 974 0108 1B78     		ldrb	r3, [r3]
 975 010a DBB2     		uxtb	r3, r3
 976 010c 5B00     		lsl	r3, r3, #1
 977 010e D218     		add	r2, r2, r3
 978 0110 334B     		ldr	r3, .L38+4
 979 0112 1B69     		ldr	r3, [r3, #16]
 980 0114 9BB2     		uxth	r3, r3
 981 0116 1380     		strh	r3, [r2]
 555:../Sources/TFC/TFC_ADC.c **** 							ADC0_SC1A  =  TFC_LINESCAN0_ADC_CHANNEL | ADC_SC1_AIEN_MASK;
 982              		.loc 1 555 0
 983 0118 314B     		ldr	r3, .L38+4
 984 011a 4622     		mov	r2, #70
 985 011c 1A60     		str	r2, [r3]
 556:../Sources/TFC/TFC_ADC.c **** 							CurrentLineScanChannel = 0;
 986              		.loc 1 556 0
 987 011e 364B     		ldr	r3, .L38+28
 988 0120 0022     		mov	r2, #0
 989 0122 1A70     		strb	r2, [r3]
 557:../Sources/TFC/TFC_ADC.c **** 							CurrentLineScanPixel++;
 990              		.loc 1 557 0
 991 0124 334B     		ldr	r3, .L38+24
 992 0126 1B78     		ldrb	r3, [r3]
 993 0128 DBB2     		uxtb	r3, r3
 994 012a 0133     		add	r3, r3, #1
 995 012c DAB2     		uxtb	r2, r3
 996 012e 314B     		ldr	r3, .L38+24
 997 0130 1A70     		strb	r2, [r3]
 559:../Sources/TFC/TFC_ADC.c **** 							TAOS_CLK_LOW;
 998              		.loc 1 559 0
 999 0132 2E4B     		ldr	r3, .L38+16
 1000 0134 0222     		mov	r2, #2
 1001 0136 9A60     		str	r2, [r3, #8]
 560:../Sources/TFC/TFC_ADC.c **** 								for(Junk = 0;Junk<50;Junk++)
 1002              		.loc 1 560 0
 1003 0138 FB1D     		add	r3, r7, #7
 1004 013a 0022     		mov	r2, #0
 1005 013c 1A70     		strb	r2, [r3]
 1006 013e 04E0     		b	.L31
 1007              	.L32:
 560:../Sources/TFC/TFC_ADC.c **** 								for(Junk = 0;Junk<50;Junk++)
 1008              		.loc 1 560 0 is_stmt 0
 1009 0140 FB1D     		add	r3, r7, #7
 1010 0142 FA1D     		add	r2, r7, #7
 1011 0144 1278     		ldrb	r2, [r2]
 1012 0146 0132     		add	r2, r2, #1
 1013 0148 1A70     		strb	r2, [r3]
 1014              	.L31:
 560:../Sources/TFC/TFC_ADC.c **** 								for(Junk = 0;Junk<50;Junk++)
 1015              		.loc 1 560 0
 1016 014a FB1D     		add	r3, r7, #7
 1017 014c 1B78     		ldrb	r3, [r3]
 1018 014e 312B     		cmp	r3, #49
 1019 0150 F6D9     		bls	.L32
 563:../Sources/TFC/TFC_ADC.c **** 							TAOS_CLK_HIGH;
 1020              		.loc 1 563 0 is_stmt 1
 1021 0152 264B     		ldr	r3, .L38+16
 1022 0154 0222     		mov	r2, #2
 1023 0156 5A60     		str	r2, [r3, #4]
 1024              		.loc 1 606 0
 1025 0158 3CE0     		b	.L37
 1026              	.L28:
 572:../Sources/TFC/TFC_ADC.c **** 						TAOS_CLK_HIGH;
 1027              		.loc 1 572 0
 1028 015a 244B     		ldr	r3, .L38+16
 1029 015c 0222     		mov	r2, #2
 1030 015e 5A60     		str	r2, [r3, #4]
 574:../Sources/TFC/TFC_ADC.c **** 						for(Junk = 0;Junk<50;Junk++)
 1031              		.loc 1 574 0
 1032 0160 FB1D     		add	r3, r7, #7
 1033 0162 0022     		mov	r2, #0
 1034 0164 1A70     		strb	r2, [r3]
 1035 0166 04E0     		b	.L33
 1036              	.L34:
 574:../Sources/TFC/TFC_ADC.c **** 						for(Junk = 0;Junk<50;Junk++)
 1037              		.loc 1 574 0 is_stmt 0
 1038 0168 FB1D     		add	r3, r7, #7
 1039 016a FA1D     		add	r2, r7, #7
 1040 016c 1278     		ldrb	r2, [r2]
 1041 016e 0132     		add	r2, r2, #1
 1042 0170 1A70     		strb	r2, [r3]
 1043              	.L33:
 574:../Sources/TFC/TFC_ADC.c **** 						for(Junk = 0;Junk<50;Junk++)
 1044              		.loc 1 574 0
 1045 0172 FB1D     		add	r3, r7, #7
 1046 0174 1B78     		ldrb	r3, [r3]
 1047 0176 312B     		cmp	r3, #49
 1048 0178 F6D9     		bls	.L34
 578:../Sources/TFC/TFC_ADC.c **** 						TAOS_CLK_LOW;
 1049              		.loc 1 578 0 is_stmt 1
 1050 017a 1C4B     		ldr	r3, .L38+16
 1051 017c 0222     		mov	r2, #2
 1052 017e 9A60     		str	r2, [r3, #8]
 579:../Sources/TFC/TFC_ADC.c **** 						CurrentADC_State = ADC_STATE_INIT;	 
 1053              		.loc 1 579 0
 1054 0180 164B     		ldr	r3, .L38
 1055 0182 0022     		mov	r2, #0
 1056 0184 1A70     		strb	r2, [r3]
 583:../Sources/TFC/TFC_ADC.c **** 						if(LineScanWorkingBuffer == 0)
 1057              		.loc 1 583 0
 1058 0186 1F4B     		ldr	r3, .L38+40
 1059 0188 1B78     		ldrb	r3, [r3]
 1060 018a DBB2     		uxtb	r3, r3
 1061 018c 002B     		cmp	r3, #0
 1062 018e 0FD1     		bne	.L35
 585:../Sources/TFC/TFC_ADC.c **** 							LineScanWorkingBuffer = 1;
 1063              		.loc 1 585 0
 1064 0190 1C4B     		ldr	r3, .L38+40
 1065 0192 0122     		mov	r2, #1
 1066 0194 1A70     		strb	r2, [r3]
 587:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0WorkingBuffer = &LineScanImage0Buffer[1][0];
 1067              		.loc 1 587 0
 1068 0196 194B     		ldr	r3, .L38+32
 1069 0198 1B4A     		ldr	r2, .L38+44
 1070 019a 1A60     		str	r2, [r3]
 588:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1WorkingBuffer = &LineScanImage1Buffer[1][0];
 1071              		.loc 1 588 0
 1072 019c 184B     		ldr	r3, .L38+36
 1073 019e 1B4A     		ldr	r2, .L38+48
 1074 01a0 1A60     		str	r2, [r3]
 590:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0 = &LineScanImage0Buffer[0][0];
 1075              		.loc 1 590 0
 1076 01a2 1B4B     		ldr	r3, .L38+52
 1077 01a4 1B4A     		ldr	r2, .L38+56
 1078 01a6 1A60     		str	r2, [r3]
 591:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1 = &LineScanImage1Buffer[0][0];
 1079              		.loc 1 591 0
 1080 01a8 1B4B     		ldr	r3, .L38+60
 1081 01aa 1C4A     		ldr	r2, .L38+64
 1082 01ac 1A60     		str	r2, [r3]
 1083 01ae 0EE0     		b	.L36
 1084              	.L35:
 595:../Sources/TFC/TFC_ADC.c **** 							LineScanWorkingBuffer = 0;
 1085              		.loc 1 595 0
 1086 01b0 144B     		ldr	r3, .L38+40
 1087 01b2 0022     		mov	r2, #0
 1088 01b4 1A70     		strb	r2, [r3]
 596:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0WorkingBuffer = &LineScanImage0Buffer[0][0];
 1089              		.loc 1 596 0
 1090 01b6 114B     		ldr	r3, .L38+32
 1091 01b8 164A     		ldr	r2, .L38+56
 1092 01ba 1A60     		str	r2, [r3]
 597:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1WorkingBuffer = &LineScanImage1Buffer[0][0];
 1093              		.loc 1 597 0
 1094 01bc 104B     		ldr	r3, .L38+36
 1095 01be 174A     		ldr	r2, .L38+64
 1096 01c0 1A60     		str	r2, [r3]
 599:../Sources/TFC/TFC_ADC.c **** 							LineScanImage0 = &LineScanImage0Buffer[1][0];
 1097              		.loc 1 599 0
 1098 01c2 134B     		ldr	r3, .L38+52
 1099 01c4 104A     		ldr	r2, .L38+44
 1100 01c6 1A60     		str	r2, [r3]
 600:../Sources/TFC/TFC_ADC.c **** 							LineScanImage1 = &LineScanImage1Buffer[1][0];
 1101              		.loc 1 600 0
 1102 01c8 134B     		ldr	r3, .L38+60
 1103 01ca 104A     		ldr	r2, .L38+48
 1104 01cc 1A60     		str	r2, [r3]
 1105              	.L36:
 603:../Sources/TFC/TFC_ADC.c **** 						LineScanImageReady = TRUE;
 1106              		.loc 1 603 0
 1107 01ce 144B     		ldr	r3, .L38+68
 1108 01d0 0122     		mov	r2, #1
 1109 01d2 1A70     		strb	r2, [r3]
 1110              	.L37:
 1111              		.loc 1 606 0
 1112 01d4 C046     		mov	r8, r8
 1113              	.L18:
 607:../Sources/TFC/TFC_ADC.c **** 	
 608:../Sources/TFC/TFC_ADC.c **** 	}
 609:../Sources/TFC/TFC_ADC.c **** 
 610:../Sources/TFC/TFC_ADC.c **** }
 1114              		.loc 1 610 0
 1115 01d6 BD46     		mov	sp, r7
 1116 01d8 02B0     		add	sp, sp, #8
 1117              		@ sp needed for prologue
 1118 01da 80BD     		pop	{r7, pc}
 1119              	.L39:
 1120              		.align	2
 1121              	.L38:
 1122 01dc 00000000 		.word	CurrentADC_State
 1123 01e0 00B00340 		.word	1073983488
 1124 01e4 00000000 		.word	PotADC_Value
 1125 01e8 00000000 		.word	BatSenseADC_Value
 1126 01ec 00F10F40 		.word	1074786560
 1127 01f0 C0F00F40 		.word	1074786496
 1128 01f4 00000000 		.word	CurrentLineScanPixel
 1129 01f8 00000000 		.word	CurrentLineScanChannel
 1130 01fc 00000000 		.word	LineScanImage0WorkingBuffer
 1131 0200 00000000 		.word	LineScanImage1WorkingBuffer
 1132 0204 00000000 		.word	LineScanWorkingBuffer
 1133 0208 00010000 		.word	LineScanImage0Buffer+256
 1134 020c 00010000 		.word	LineScanImage1Buffer+256
 1135 0210 00000000 		.word	LineScanImage0
 1136 0214 00000000 		.word	LineScanImage0Buffer
 1137 0218 00000000 		.word	LineScanImage1
 1138 021c 00000000 		.word	LineScanImage1Buffer
 1139 0220 00000000 		.word	LineScanImageReady
 1140              		.cfi_endproc
 1141              	.LFE6:
 1143              		.global	__aeabi_ui2f
 1144              		.global	__aeabi_f2d
 1145              		.global	__aeabi_ddiv
 1146              		.global	__aeabi_dadd
 1147              		.global	__aeabi_d2f
 1148              		.section	.text.TFC_ReadPot,"ax",%progbits
 1149              		.align	2
 1150              		.global	TFC_ReadPot
 1151              		.code	16
 1152              		.thumb_func
 1154              	TFC_ReadPot:
 1155              	.LFB7:
 611:../Sources/TFC/TFC_ADC.c **** 
 612:../Sources/TFC/TFC_ADC.c **** //Pot Reading is Scaled to return a value of -1.0 to 1.0
 613:../Sources/TFC/TFC_ADC.c **** float TFC_ReadPot(uint8_t Channel)
 614:../Sources/TFC/TFC_ADC.c **** {
 1156              		.loc 1 614 0
 1157              		.cfi_startproc
 1158 0000 90B5     		push	{r4, r7, lr}
 1159              	.LCFI19:
 1160              		.cfi_def_cfa_offset 12
 1161              		.cfi_offset 4, -12
 1162              		.cfi_offset 7, -8
 1163              		.cfi_offset 14, -4
 1164 0002 83B0     		sub	sp, sp, #12
 1165              	.LCFI20:
 1166              		.cfi_def_cfa_offset 24
 1167 0004 00AF     		add	r7, sp, #0
 1168              	.LCFI21:
 1169              		.cfi_def_cfa_register 7
 1170 0006 021C     		mov	r2, r0
 1171 0008 FB1D     		add	r3, r7, #7
 1172 000a 1A70     		strb	r2, [r3]
 615:../Sources/TFC/TFC_ADC.c ****     if(Channel == 0)
 1173              		.loc 1 615 0
 1174 000c FB1D     		add	r3, r7, #7
 1175 000e 1B78     		ldrb	r3, [r3]
 1176 0010 002B     		cmp	r3, #0
 1177 0012 21D1     		bne	.L41
 616:../Sources/TFC/TFC_ADC.c ****         return ((float)PotADC_Value[0]/-((float)ADC_MAX_CODE/2.0))+1.0;
 1178              		.loc 1 616 0
 1179 0014 284B     		ldr	r3, .L43+16
 1180 0016 1B88     		ldrh	r3, [r3]
 1181 0018 9BB2     		uxth	r3, r3
 1182 001a 181C     		mov	r0, r3
 1183 001c FFF7FEFF 		bl	__aeabi_ui2f
 1184 0020 031C     		add	r3, r0, #0
 1185 0022 181C     		add	r0, r3, #0
 1186 0024 FFF7FEFF 		bl	__aeabi_f2d
 1187 0028 031C     		mov	r3, r0
 1188 002a 0C1C     		mov	r4, r1
 1189 002c 181C     		mov	r0, r3
 1190 002e 211C     		mov	r1, r4
 1191 0030 1E4B     		ldr	r3, .L43+4
 1192 0032 1D4A     		ldr	r2, .L43
 1193 0034 FFF7FEFF 		bl	__aeabi_ddiv
 1194 0038 031C     		mov	r3, r0
 1195 003a 0C1C     		mov	r4, r1
 1196 003c 181C     		mov	r0, r3
 1197 003e 211C     		mov	r1, r4
 1198 0040 1B4A     		ldr	r2, .L43+8
 1199 0042 1C4B     		ldr	r3, .L43+12
 1200 0044 FFF7FEFF 		bl	__aeabi_dadd
 1201 0048 031C     		mov	r3, r0
 1202 004a 0C1C     		mov	r4, r1
 1203 004c 181C     		mov	r0, r3
 1204 004e 211C     		mov	r1, r4
 1205 0050 FFF7FEFF 		bl	__aeabi_d2f
 1206 0054 031C     		add	r3, r0, #0
 1207 0056 20E0     		b	.L42
 1208              	.L41:
 617:../Sources/TFC/TFC_ADC.c ****     else
 618:../Sources/TFC/TFC_ADC.c ****         return ((float)PotADC_Value[1]/-((float)ADC_MAX_CODE/2.0))+1.0;
 1209              		.loc 1 618 0
 1210 0058 174B     		ldr	r3, .L43+16
 1211 005a 5B88     		ldrh	r3, [r3, #2]
 1212 005c 9BB2     		uxth	r3, r3
 1213 005e 181C     		mov	r0, r3
 1214 0060 FFF7FEFF 		bl	__aeabi_ui2f
 1215 0064 031C     		add	r3, r0, #0
 1216 0066 181C     		add	r0, r3, #0
 1217 0068 FFF7FEFF 		bl	__aeabi_f2d
 1218 006c 031C     		mov	r3, r0
 1219 006e 0C1C     		mov	r4, r1
 1220 0070 181C     		mov	r0, r3
 1221 0072 211C     		mov	r1, r4
 1222 0074 0D4B     		ldr	r3, .L43+4
 1223 0076 0C4A     		ldr	r2, .L43
 1224 0078 FFF7FEFF 		bl	__aeabi_ddiv
 1225 007c 031C     		mov	r3, r0
 1226 007e 0C1C     		mov	r4, r1
 1227 0080 181C     		mov	r0, r3
 1228 0082 211C     		mov	r1, r4
 1229 0084 0A4A     		ldr	r2, .L43+8
 1230 0086 0B4B     		ldr	r3, .L43+12
 1231 0088 FFF7FEFF 		bl	__aeabi_dadd
 1232 008c 031C     		mov	r3, r0
 1233 008e 0C1C     		mov	r4, r1
 1234 0090 181C     		mov	r0, r3
 1235 0092 211C     		mov	r1, r4
 1236 0094 FFF7FEFF 		bl	__aeabi_d2f
 1237 0098 031C     		add	r3, r0, #0
 1238              	.L42:
 619:../Sources/TFC/TFC_ADC.c **** }
 1239              		.loc 1 619 0
 1240 009a 181C     		add	r0, r3, #0
 1241 009c BD46     		mov	sp, r7
 1242 009e 03B0     		add	sp, sp, #12
 1243              		@ sp needed for prologue
 1244 00a0 90BD     		pop	{r4, r7, pc}
 1245              	.L44:
 1246 00a2 C046C046 		.align	3
 1246      C046
 1247              	.L43:
 1248 00a8 00000000 		.word	0
 1249 00ac 00FE9FC0 		.word	-1063256576
 1250 00b0 00000000 		.word	0
 1251 00b4 0000F03F 		.word	1072693248
 1252 00b8 00000000 		.word	PotADC_Value
 1253              		.cfi_endproc
 1254              	.LFE7:
 1256              		.global	__aeabi_fdiv
 1257              		.global	__aeabi_fmul
 1258 00bc C046C046 		.section	.text.TFC_ReadBatteryVoltage,"ax",%progbits
 1259              		.align	2
 1260              		.global	TFC_ReadBatteryVoltage
 1261              		.code	16
 1262              		.thumb_func
 1264              	TFC_ReadBatteryVoltage:
 1265              	.LFB8:
 620:../Sources/TFC/TFC_ADC.c **** 
 621:../Sources/TFC/TFC_ADC.c **** float TFC_ReadBatteryVoltage()
 622:../Sources/TFC/TFC_ADC.c **** {
 1266              		.loc 1 622 0
 1267              		.cfi_startproc
 1268 0000 80B5     		push	{r7, lr}
 1269              	.LCFI22:
 1270              		.cfi_def_cfa_offset 8
 1271              		.cfi_offset 7, -8
 1272              		.cfi_offset 14, -4
 1273 0002 00AF     		add	r7, sp, #0
 1274              	.LCFI23:
 1275              		.cfi_def_cfa_register 7
 623:../Sources/TFC/TFC_ADC.c ****     return (((float)BatSenseADC_Value/(float)(ADC_MAX_CODE)) * 3.0);// * ((47000.0+10000.0)/10000.0
 1276              		.loc 1 623 0
 1277 0004 094B     		ldr	r3, .L47
 1278 0006 1B88     		ldrh	r3, [r3]
 1279 0008 9BB2     		uxth	r3, r3
 1280 000a 181C     		mov	r0, r3
 1281 000c FFF7FEFF 		bl	__aeabi_ui2f
 1282 0010 031C     		add	r3, r0, #0
 1283 0012 181C     		add	r0, r3, #0
 1284 0014 0649     		ldr	r1, .L47+4
 1285 0016 FFF7FEFF 		bl	__aeabi_fdiv
 1286 001a 031C     		add	r3, r0, #0
 1287 001c 181C     		add	r0, r3, #0
 1288 001e 0549     		ldr	r1, .L47+8
 1289 0020 FFF7FEFF 		bl	__aeabi_fmul
 1290 0024 031C     		add	r3, r0, #0
 624:../Sources/TFC/TFC_ADC.c **** }
 1291              		.loc 1 624 0
 1292 0026 181C     		add	r0, r3, #0
 1293 0028 BD46     		mov	sp, r7
 1294              		@ sp needed for prologue
 1295 002a 80BD     		pop	{r7, pc}
 1296              	.L48:
 1297              		.align	2
 1298              	.L47:
 1299 002c 00000000 		.word	BatSenseADC_Value
 1300 0030 00F07F45 		.word	1166012416
 1301 0034 00004040 		.word	1077936128
 1302              		.cfi_endproc
 1303              	.LFE8:
 1305              		.text
 1306              	.Letext0:
 1307              		.file 2 "D:/Programme/CodeWarrior/CW MCU v10.6.4/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 1308              		.file 3 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/MKL25Z4.h"
 1309              		.file 4 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/TFC\\TFC_LineScanCamera.h"
 1310              		.file 5 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/config.h"
 1311              		.file 6 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/LineScanCam.h"
 1312              		.file 7 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/motorServo.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_ADC.c
                            *COM*:00000004 motor
                            *COM*:00000004 servo
                            *COM*:00000004 LEDconfig
                            *COM*:00000004 target
                            *COM*:00000004 auslmultiplier
                            *COM*:00000004 speedMultiplier
                            *COM*:00000004 minSpeed
                            *COM*:00000004 linetimeout
                            *COM*:00000004 ruckwartsZeit
                            *COM*:00000200 camData
                            *COM*:00000004 active
                            *COM*:00000004 Sausl
                            *COM*:00000004 linemissing
                            *COM*:00000004 checkLineStep
                            *COM*:00000004 Motorspeed
                            *COM*:00000004 Servoausl
                            *COM*:00000004 drivingBack
                            *COM*:00000004 PotADC_Value
                            *COM*:00000002 BatSenseADC_Value
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:39     .bss.CurrentADC_State:00000000 CurrentADC_State
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:40     .bss.CurrentADC_State:00000000 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:45     .bss.CurrentLineScanPixel:00000000 CurrentLineScanPixel
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:46     .bss.CurrentLineScanPixel:00000000 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:51     .bss.CurrentLineScanChannel:00000000 CurrentLineScanChannel
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:52     .bss.CurrentLineScanChannel:00000000 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:54     .text.ADC_Cal:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:59     .text.ADC_Cal:00000000 ADC_Cal
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:326    .text.ADC_Cal:000001b0 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:331    .text.ADC_Config_Alt:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:336    .text.ADC_Config_Alt:00000000 ADC_Config_Alt
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:410    .text.ADC_Read_Cal:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:415    .text.ADC_Read_Cal:00000000 ADC_Read_Cal
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:543    .text.InitADC0:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:548    .text.InitADC0:00000000 InitADC0
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:641    .text.InitADC0:00000084 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:648    .text.TFC_InitADCs:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:653    .text.TFC_InitADCs:00000000 TFC_InitADCs
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:718    .text.TFC_InitADCs:0000005c $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:727    .text.PIT_IRQHandler:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:732    .text.PIT_IRQHandler:00000000 PIT_IRQHandler
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:776    .text.PIT_IRQHandler:00000030 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:784    .text.ADC0_IRQHandler:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:789    .text.ADC0_IRQHandler:00000000 ADC0_IRQHandler
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1122   .text.ADC0_IRQHandler:000001dc $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1149   .text.TFC_ReadPot:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1154   .text.TFC_ReadPot:00000000 TFC_ReadPot
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1248   .text.TFC_ReadPot:000000a8 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1259   .text.TFC_ReadBatteryVoltage:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1264   .text.TFC_ReadBatteryVoltage:00000000 TFC_ReadBatteryVoltage
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1299   .text.TFC_ReadBatteryVoltage:0000002c $d
                     .debug_frame:00000010 $d
C:\Users\Darkp\AppData\Local\Temp\ccqvrzsG.s:1258   .text.TFC_ReadPot:000000bc $t

UNDEFINED SYMBOLS
disable_irq
TFC_SetLineScanExposureTime
enable_irq
LineScanImage0WorkingBuffer
LineScanImage1WorkingBuffer
LineScanWorkingBuffer
LineScanImage0Buffer
LineScanImage1Buffer
LineScanImage0
LineScanImage1
LineScanImageReady
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_d2f
__aeabi_fdiv
__aeabi_fmul
