   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_CrystalClock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	motor,4,4
  18              		.comm	servo,4,4
  19              		.comm	LEDconfig,4,4
  20              		.comm	target,4,4
  21              		.comm	auslmultiplier,4,4
  22              		.comm	speedMultiplier,4,4
  23              		.comm	minSpeed,4,4
  24              		.comm	linetimeout,4,4
  25              		.comm	ruckwartsZeit,4,4
  26              		.comm	camData,512,4
  27              		.comm	active,4,4
  28              		.comm	Sausl,4,4
  29              		.comm	linemissing,4,4
  30              		.comm	checkLineStep,4,4
  31              		.comm	Motorspeed,4,4
  32              		.comm	Servoausl,4,4
  33              		.comm	drivingBack,4,4
  34              		.comm	drs_val,1,1
  35              		.comm	dmx32_val,1,1
  36              		.section	.text.TFC_InitClock,"ax",%progbits
  37              		.align	2
  38              		.global	TFC_InitClock
  39              		.code	16
  40              		.thumb_func
  42              	TFC_InitClock:
  43              	.LFB0:
  44              		.file 1 "../Sources/TFC/TFC_CrystalClock.c"
   1:../Sources/TFC/TFC_CrystalClock.c **** 
   2:../Sources/TFC/TFC_CrystalClock.c **** 
   3:../Sources/TFC/TFC_CrystalClock.c **** #include "TFC\TFC.h"
   4:../Sources/TFC/TFC_CrystalClock.c **** 
   5:../Sources/TFC/TFC_CrystalClock.c **** /* For some reason CW needs to have cw.h explicitly included here for
   6:../Sources/TFC/TFC_CrystalClock.c ****  * the code relocation of set_sys_dividers() to work correctly even
   7:../Sources/TFC/TFC_CrystalClock.c ****  * though common.h should pull in cw.h.
   8:../Sources/TFC/TFC_CrystalClock.c ****  */
   9:../Sources/TFC/TFC_CrystalClock.c **** #if (defined(CW))
  10:../Sources/TFC/TFC_CrystalClock.c **** 	#include "cw.h"
  11:../Sources/TFC/TFC_CrystalClock.c **** #endif
  12:../Sources/TFC/TFC_CrystalClock.c **** 
  13:../Sources/TFC/TFC_CrystalClock.c **** // Constants for use in pll_init
  14:../Sources/TFC/TFC_CrystalClock.c **** #define NO_OSCINIT 0
  15:../Sources/TFC/TFC_CrystalClock.c **** #define OSCINIT 1
  16:../Sources/TFC/TFC_CrystalClock.c **** 
  17:../Sources/TFC/TFC_CrystalClock.c **** #define OSC_0 0
  18:../Sources/TFC/TFC_CrystalClock.c **** #define OSC_1 1
  19:../Sources/TFC/TFC_CrystalClock.c **** 
  20:../Sources/TFC/TFC_CrystalClock.c **** #define LOW_POWER 0
  21:../Sources/TFC/TFC_CrystalClock.c **** #define HIGH_GAIN 1
  22:../Sources/TFC/TFC_CrystalClock.c **** 
  23:../Sources/TFC/TFC_CrystalClock.c **** #define CANNED_OSC  0
  24:../Sources/TFC/TFC_CrystalClock.c **** #define CRYSTAL 1
  25:../Sources/TFC/TFC_CrystalClock.c **** 
  26:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_0 0
  27:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_1 1
  28:../Sources/TFC/TFC_CrystalClock.c **** 
  29:../Sources/TFC/TFC_CrystalClock.c **** #define PLL_ONLY 0
  30:../Sources/TFC/TFC_CrystalClock.c **** #define MCGOUT 1
  31:../Sources/TFC/TFC_CrystalClock.c **** 
  32:../Sources/TFC/TFC_CrystalClock.c **** // MCG Mode defines
  33:../Sources/TFC/TFC_CrystalClock.c **** 
  34:../Sources/TFC/TFC_CrystalClock.c **** #define BLPI 1
  35:../Sources/TFC/TFC_CrystalClock.c **** #define FBI  2
  36:../Sources/TFC/TFC_CrystalClock.c **** #define FEI  3
  37:../Sources/TFC/TFC_CrystalClock.c **** #define FEE  4
  38:../Sources/TFC/TFC_CrystalClock.c **** #define FBE  5
  39:../Sources/TFC/TFC_CrystalClock.c **** #define BLPE 6
  40:../Sources/TFC/TFC_CrystalClock.c **** #define PBE  7
  41:../Sources/TFC/TFC_CrystalClock.c **** #define PEE  8
  42:../Sources/TFC/TFC_CrystalClock.c **** 
  43:../Sources/TFC/TFC_CrystalClock.c **** // IRC defines
  44:../Sources/TFC/TFC_CrystalClock.c **** #define SLOW_IRC 0
  45:../Sources/TFC/TFC_CrystalClock.c **** #define FAST_IRC 1
  46:../Sources/TFC/TFC_CrystalClock.c **** 
  47:../Sources/TFC/TFC_CrystalClock.c **** 
  48:../Sources/TFC/TFC_CrystalClock.c **** unsigned char fll_rtc_init(unsigned char, unsigned char);
  49:../Sources/TFC/TFC_CrystalClock.c **** 
  50:../Sources/TFC/TFC_CrystalClock.c **** 
  51:../Sources/TFC/TFC_CrystalClock.c **** // prototypes
  52:../Sources/TFC/TFC_CrystalClock.c **** void rtc_as_refclk(void);
  53:../Sources/TFC/TFC_CrystalClock.c **** int fee_fei(int slow_irc_freq);
  54:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  55:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fei(int slow_irc_freq);
  56:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbi(int irc_freq, unsigned char irc_select);
  57:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fei(int slow_irc_freq);
  58:../Sources/TFC/TFC_CrystalClock.c **** int fbe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val);
  59:../Sources/TFC/TFC_CrystalClock.c **** int pbe_pee(int crystal_val);
  60:../Sources/TFC/TFC_CrystalClock.c **** int pee_pbe(int crystal_val);
  61:../Sources/TFC/TFC_CrystalClock.c **** int pbe_fbe(int crystal_val);
  62:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fbi(int irc_freq, unsigned char irc_select);
  63:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  64:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  65:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fee(int crystal_val);
  66:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbe(int crystal_val);
  67:../Sources/TFC/TFC_CrystalClock.c **** int pbe_blpe(int crystal_val);
  68:../Sources/TFC/TFC_CrystalClock.c **** int blpe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val);
  69:../Sources/TFC/TFC_CrystalClock.c **** int blpe_fbe(int crystal_val);
  70:../Sources/TFC/TFC_CrystalClock.c **** int fbi_blpi(int irc_freq, unsigned char irc_select);
  71:../Sources/TFC/TFC_CrystalClock.c **** int blpi_fbi(int irc_freq, unsigned char irc_select);
  72:../Sources/TFC/TFC_CrystalClock.c **** int fei_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val);
  73:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbi(int irc_freq, unsigned char irc_select);
  74:../Sources/TFC/TFC_CrystalClock.c **** int fbe_blpe(int crystal_val);
  75:../Sources/TFC/TFC_CrystalClock.c **** 
  76:../Sources/TFC/TFC_CrystalClock.c **** int pll_init(int crystal_val, unsigned char hgo_val, unsigned char erefs_val, signed char prdiv_val
  77:../Sources/TFC/TFC_CrystalClock.c **** 
  78:../Sources/TFC/TFC_CrystalClock.c **** int fll_freq(int fll_ref);
  79:../Sources/TFC/TFC_CrystalClock.c **** unsigned char what_mcg_mode(void);
  80:../Sources/TFC/TFC_CrystalClock.c **** unsigned char atc(unsigned char irc_select, int irc_freq, int mcg_out_freq);
  81:../Sources/TFC/TFC_CrystalClock.c **** void clk_monitor_0(unsigned char en_dis);
  82:../Sources/TFC/TFC_CrystalClock.c **** 
  83:../Sources/TFC/TFC_CrystalClock.c **** 
  84:../Sources/TFC/TFC_CrystalClock.c **** 
  85:../Sources/TFC/TFC_CrystalClock.c **** 
  86:../Sources/TFC/TFC_CrystalClock.c **** // global variables
  87:../Sources/TFC/TFC_CrystalClock.c **** extern int core_clk_khz;
  88:../Sources/TFC/TFC_CrystalClock.c **** char drs_val, dmx32_val;
  89:../Sources/TFC/TFC_CrystalClock.c **** 
  90:../Sources/TFC/TFC_CrystalClock.c **** 
  91:../Sources/TFC/TFC_CrystalClock.c **** 
  92:../Sources/TFC/TFC_CrystalClock.c **** 
  93:../Sources/TFC/TFC_CrystalClock.c **** /*****************************************************************************
  94:../Sources/TFC/TFC_CrystalClock.c ****  * @name     pll_init
  95:../Sources/TFC/TFC_CrystalClock.c ****  *
  96:../Sources/TFC/TFC_CrystalClock.c ****  * @brief:   Initialization of the MCU.
  97:../Sources/TFC/TFC_CrystalClock.c ****  *
  98:../Sources/TFC/TFC_CrystalClock.c ****  * @param  : None
  99:../Sources/TFC/TFC_CrystalClock.c ****  *
 100:../Sources/TFC/TFC_CrystalClock.c ****  * @return : None
 101:../Sources/TFC/TFC_CrystalClock.c ****  *****************************************************************************
 102:../Sources/TFC/TFC_CrystalClock.c ****  * It will configure the MCU to disable STOP and COP Modules.
 103:../Sources/TFC/TFC_CrystalClock.c ****  * It also set the MCG configuration and bus clock frequency.
 104:../Sources/TFC/TFC_CrystalClock.c ****  ****************************************************************************/
 105:../Sources/TFC/TFC_CrystalClock.c **** void TFC_InitClock()
 106:../Sources/TFC/TFC_CrystalClock.c **** {
  45              		.loc 1 106 0
  46              		.cfi_startproc
  47 0000 80B5     		push	{r7, lr}
  48              	.LCFI0:
  49              		.cfi_def_cfa_offset 8
  50              		.cfi_offset 7, -8
  51              		.cfi_offset 14, -4
  52 0002 82B0     		sub	sp, sp, #8
  53              	.LCFI1:
  54              		.cfi_def_cfa_offset 16
  55 0004 02AF     		add	r7, sp, #8
  56              	.LCFI2:
  57              		.cfi_def_cfa 7, 8
 107:../Sources/TFC/TFC_CrystalClock.c **** 	pll_init(8000000, LOW_POWER, CRYSTAL, 4, 24, MCGOUT);
  58              		.loc 1 107 0
  59 0006 064B     		ldr	r3, .L2
  60 0008 1822     		mov	r2, #24
  61 000a 0092     		str	r2, [sp]
  62 000c 0122     		mov	r2, #1
  63 000e 0192     		str	r2, [sp, #4]
  64 0010 181C     		mov	r0, r3
  65 0012 0021     		mov	r1, #0
  66 0014 0122     		mov	r2, #1
  67 0016 0423     		mov	r3, #4
  68 0018 FFF7FEFF 		bl	pll_init
 108:../Sources/TFC/TFC_CrystalClock.c ****     	
 109:../Sources/TFC/TFC_CrystalClock.c ****     /************* USB Part **********************/
 110:../Sources/TFC/TFC_CrystalClock.c ****    	/*********************************************/   
 111:../Sources/TFC/TFC_CrystalClock.c ****    //	SIM_CLKDIV2 &= (uint32_t)(~(SIM_CLKDIV2_USBFRAC_MASK | SIM_CLKDIV2_USBDIV_MASK));
 112:../Sources/TFC/TFC_CrystalClock.c **** 
 113:../Sources/TFC/TFC_CrystalClock.c ****     /* Configure USBFRAC = 0, USBDIV = 0 => frq(USBout) = 1 / 1 * frq(PLLin) */
 114:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
 115:../Sources/TFC/TFC_CrystalClock.c ****    			    
 116:../Sources/TFC/TFC_CrystalClock.c ****    	/* Configure USB to be clocked from PLL */
 117:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_SOPT2  |= (SIM_SOPT2_USBSRC_MASK | SIM_SOPT2_PLLFLLSEL_MASK);
 118:../Sources/TFC/TFC_CrystalClock.c **** 
 119:../Sources/TFC/TFC_CrystalClock.c ****    	/* Enable USB-OTG IP clocking */
 120:../Sources/TFC/TFC_CrystalClock.c ****    	//SIM_SCGC4 |= (SIM_SCGC4_USBOTG_MASK); 
 121:../Sources/TFC/TFC_CrystalClock.c ****     			    
 122:../Sources/TFC/TFC_CrystalClock.c ****     			/* Configure enable USB regulator for device */
 123:../Sources/TFC/TFC_CrystalClock.c ****    //SIM_SOPT1 |= SIM_SOPT1_USBREGEN_MASK;
 124:../Sources/TFC/TFC_CrystalClock.c ****    			    
 125:../Sources/TFC/TFC_CrystalClock.c ****    //NVICICER2 |= (1<<9);	/* Clear any pending interrupts on USB */
 126:../Sources/TFC/TFC_CrystalClock.c **** //   NVICISER2 |= (1<<9);	/* Enable interrupts from USB module */	 
 127:../Sources/TFC/TFC_CrystalClock.c **** 
 128:../Sources/TFC/TFC_CrystalClock.c ****     	
 129:../Sources/TFC/TFC_CrystalClock.c ****     /* Now running PEE Mode */
 130:../Sources/TFC/TFC_CrystalClock.c **** 
 131:../Sources/TFC/TFC_CrystalClock.c **** 
 132:../Sources/TFC/TFC_CrystalClock.c **** }
  69              		.loc 1 132 0
  70 001c BD46     		mov	sp, r7
  71              		@ sp needed for prologue
  72 001e 80BD     		pop	{r7, pc}
  73              	.L3:
  74              		.align	2
  75              	.L2:
  76 0020 00127A00 		.word	8000000
  77              		.cfi_endproc
  78              	.LFE0:
  80              		.global	__aeabi_idiv
  81              		.section	.text.pll_init,"ax",%progbits
  82              		.align	2
  83              		.global	pll_init
  84              		.code	16
  85              		.thumb_func
  87              	pll_init:
  88              	.LFB1:
 133:../Sources/TFC/TFC_CrystalClock.c **** 
 134:../Sources/TFC/TFC_CrystalClock.c **** 
 135:../Sources/TFC/TFC_CrystalClock.c **** /*
 136:../Sources/TFC/TFC_CrystalClock.c ****  * File:    mcg.c
 137:../Sources/TFC/TFC_CrystalClock.c ****  *
 138:../Sources/TFC/TFC_CrystalClock.c ****  * MCG drivers for Freescale Kinetis L - series devices
 139:../Sources/TFC/TFC_CrystalClock.c ****  * Notes:
 140:../Sources/TFC/TFC_CrystalClock.c ****  * Assumes the MCG mode is in the default FEI mode out of reset
 141:../Sources/TFC/TFC_CrystalClock.c ****  */
 142:../Sources/TFC/TFC_CrystalClock.c **** 
 143:../Sources/TFC/TFC_CrystalClock.c **** #include "derivative.h"
 144:../Sources/TFC/TFC_CrystalClock.c **** #include "TFC\TFC_CrystalClock.h"
 145:../Sources/TFC/TFC_CrystalClock.c **** 
 146:../Sources/TFC/TFC_CrystalClock.c **** 
 147:../Sources/TFC/TFC_CrystalClock.c **** 
 148:../Sources/TFC/TFC_CrystalClock.c **** 
 149:../Sources/TFC/TFC_CrystalClock.c **** /*********************************************************************************************/
 150:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : pll_init
 151:../Sources/TFC/TFC_CrystalClock.c ****  *
 152:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: Option to move from FEI to PEE mode or to just initialize the PLL
 153:../Sources/TFC/TFC_CrystalClock.c ****  *
 154:../Sources/TFC/TFC_CrystalClock.c ****  * This function initializess PLL0. Either OSC0 is selected for the
 155:../Sources/TFC/TFC_CrystalClock.c ****  * reference clock source. The oscillators can be configured to use a crystal or take in an
 156:../Sources/TFC/TFC_CrystalClock.c ****  * external square wave clock.
 157:../Sources/TFC/TFC_CrystalClock.c ****  * Using the function parameter names the PLL frequency is calculated as follows:
 158:../Sources/TFC/TFC_CrystalClock.c ****  * PLL freq = ((crystal_val / prdiv_val) * vdiv_val)
 159:../Sources/TFC/TFC_CrystalClock.c ****  * Refer to the readme file in the mcg driver directory for examples of pll_init configurations.
 160:../Sources/TFC/TFC_CrystalClock.c ****  * All parameters must be provided, for example crystal_val must be provided even if the
 161:../Sources/TFC/TFC_CrystalClock.c ****  * oscillator associated with that parameter is already initialized.
 162:../Sources/TFC/TFC_CrystalClock.c ****  * The various passed parameters are checked to ensure they are within the allowed range. If any
 163:../Sources/TFC/TFC_CrystalClock.c ****  * of these checks fail the driver will exit and return a fail/error code. An error code will
 164:../Sources/TFC/TFC_CrystalClock.c ****  * also be returned if any error occurs during the PLL initialization sequence. Refer to the
 165:../Sources/TFC/TFC_CrystalClock.c ****  * readme file in the mcg driver directory for a list of all these codes.
 166:../Sources/TFC/TFC_CrystalClock.c ****  *
 167:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz either from a crystal or square
 168:../Sources/TFC/TFC_CrystalClock.c ****  *                           wave clock source
 169:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
 170:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an
 171:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
 172:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
 173:../Sources/TFC/TFC_CrystalClock.c ****  *             prdiv_val   - value to divide the external clock source by to create the desired
 174:../Sources/TFC/TFC_CrystalClock.c ****  *                           PLL reference clock frequency
 175:../Sources/TFC/TFC_CrystalClock.c ****  *             vdiv_val    - value to multiply the PLL reference clock frequency by
 176:../Sources/TFC/TFC_CrystalClock.c ****  *             mcgout_select  - 0 if the PLL is just to be enabled, non-zero if the PLL is used
 177:../Sources/TFC/TFC_CrystalClock.c ****  *                              to provide the MCGOUT clock for the system.
 178:../Sources/TFC/TFC_CrystalClock.c ****  *
 179:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : PLL frequency (Hz) or error code
 180:../Sources/TFC/TFC_CrystalClock.c ****  */
 181:../Sources/TFC/TFC_CrystalClock.c **** 
 182:../Sources/TFC/TFC_CrystalClock.c **** int pll_init(int crystal_val, unsigned char hgo_val, unsigned char erefs_val, signed char prdiv_val
 183:../Sources/TFC/TFC_CrystalClock.c **** {
  89              		.loc 1 183 0
  90              		.cfi_startproc
  91 0000 80B5     		push	{r7, lr}
  92              	.LCFI3:
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96 0002 86B0     		sub	sp, sp, #24
  97              	.LCFI4:
  98              		.cfi_def_cfa_offset 32
  99 0004 00AF     		add	r7, sp, #0
 100              	.LCFI5:
 101              		.cfi_def_cfa_register 7
 102 0006 7860     		str	r0, [r7, #4]
 103 0008 081C     		mov	r0, r1
 104 000a 111C     		mov	r1, r2
 105 000c 1A1C     		mov	r2, r3
 106 000e FB1C     		add	r3, r7, #3
 107 0010 1870     		strb	r0, [r3]
 108 0012 BB1C     		add	r3, r7, #2
 109 0014 1970     		strb	r1, [r3]
 110 0016 7B1C     		add	r3, r7, #1
 111 0018 1A70     		strb	r2, [r3]
 184:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 185:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 186:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char prdiv, vdiv;
 187:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 188:../Sources/TFC/TFC_CrystalClock.c ****   int ref_freq;
 189:../Sources/TFC/TFC_CrystalClock.c ****   int pll_freq;
 190:../Sources/TFC/TFC_CrystalClock.c **** 
 191:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FEI mode
 192:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 112              		.loc 1 192 0
 113 001a C24B     		ldr	r3, .L64
 114 001c 9B79     		ldrb	r3, [r3, #6]
 115 001e DBB2     		uxtb	r3, r3
 116 0020 1A1C     		mov	r2, r3
 117 0022 0C23     		mov	r3, #12
 118 0024 1340     		and	r3, r2
 119 0026 9B08     		lsr	r3, r3, #2
 120 0028 0DD1     		bne	.L5
 193:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 121              		.loc 1 193 0
 122 002a BE4B     		ldr	r3, .L64
 123 002c 9B79     		ldrb	r3, [r3, #6]
 124 002e DBB2     		uxtb	r3, r3
 125 0030 1A1C     		mov	r2, r3
 126 0032 1023     		mov	r3, #16
 127 0034 1340     		and	r3, r2
 192:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 128              		.loc 1 192 0
 129 0036 06D0     		beq	.L5
 194:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 130              		.loc 1 194 0
 131 0038 BA4B     		ldr	r3, .L64
 132 003a 9B79     		ldrb	r3, [r3, #6]
 133 003c DBB2     		uxtb	r3, r3
 134 003e 1A1C     		mov	r2, r3
 135 0040 2023     		mov	r3, #32
 136 0042 1340     		and	r3, r2
 192:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 137              		.loc 1 192 0
 138 0044 01D0     		beq	.L6
 139              	.L5:
 195:../Sources/TFC/TFC_CrystalClock.c ****   {
 196:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 140              		.loc 1 196 0
 141 0046 0123     		mov	r3, #1
 142 0048 73E2     		b	.L7
 143              	.L6:
 197:../Sources/TFC/TFC_CrystalClock.c ****   }
 198:../Sources/TFC/TFC_CrystalClock.c **** 
 199:../Sources/TFC/TFC_CrystalClock.c ****   // check external frequency is less than the maximum frequency
 200:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 144              		.loc 1 200 0
 145 004a 7A68     		ldr	r2, [r7, #4]
 146 004c B64B     		ldr	r3, .L64+4
 147 004e 9A42     		cmp	r2, r3
 148 0050 01DD     		ble	.L8
 149              		.loc 1 200 0 is_stmt 0
 150 0052 2123     		mov	r3, #33
 151 0054 6DE2     		b	.L7
 152              	.L8:
 201:../Sources/TFC/TFC_CrystalClock.c **** 
 202:../Sources/TFC/TFC_CrystalClock.c ****   // check crystal frequency is within spec. if crystal osc is being used as PLL ref
 203:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 153              		.loc 1 203 0 is_stmt 1
 154 0056 BB1C     		add	r3, r7, #2
 155 0058 1B78     		ldrb	r3, [r3]
 156 005a 002B     		cmp	r3, #0
 157 005c 09D0     		beq	.L9
 204:../Sources/TFC/TFC_CrystalClock.c ****   {
 205:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 3000000) || (crystal_val > 32000000)) {return 0x22;} // return 1 if one of t
 158              		.loc 1 205 0
 159 005e 7A68     		ldr	r2, [r7, #4]
 160 0060 B24B     		ldr	r3, .L64+8
 161 0062 9A42     		cmp	r2, r3
 162 0064 03DD     		ble	.L10
 163              		.loc 1 205 0 is_stmt 0
 164 0066 7A68     		ldr	r2, [r7, #4]
 165 0068 B14B     		ldr	r3, .L64+12
 166 006a 9A42     		cmp	r2, r3
 167 006c 01DD     		ble	.L9
 168              	.L10:
 169              		.loc 1 205 0
 170 006e 2223     		mov	r3, #34
 171 0070 5FE2     		b	.L7
 172              	.L9:
 206:../Sources/TFC/TFC_CrystalClock.c ****   }
 207:../Sources/TFC/TFC_CrystalClock.c **** 
 208:../Sources/TFC/TFC_CrystalClock.c ****   // make sure HGO will never be greater than 1. Could return an error instead if desired.
 209:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 173              		.loc 1 209 0 is_stmt 1
 174 0072 FB1C     		add	r3, r7, #3
 175 0074 1B78     		ldrb	r3, [r3]
 176 0076 002B     		cmp	r3, #0
 177 0078 02D0     		beq	.L11
 210:../Sources/TFC/TFC_CrystalClock.c ****   {
 211:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 178              		.loc 1 211 0
 179 007a FB1C     		add	r3, r7, #3
 180 007c 0122     		mov	r2, #1
 181 007e 1A70     		strb	r2, [r3]
 182              	.L11:
 212:../Sources/TFC/TFC_CrystalClock.c ****   }
 213:../Sources/TFC/TFC_CrystalClock.c **** 
 214:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL divider settings are within spec.
 215:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 183              		.loc 1 215 0
 184 0080 7B1C     		add	r3, r7, #1
 185 0082 1B78     		ldrb	r3, [r3]
 186 0084 5BB2     		sxtb	r3, r3
 187 0086 002B     		cmp	r3, #0
 188 0088 04DD     		ble	.L12
 189              		.loc 1 215 0 is_stmt 0
 190 008a 7B1C     		add	r3, r7, #1
 191 008c 1B78     		ldrb	r3, [r3]
 192 008e 5BB2     		sxtb	r3, r3
 193 0090 192B     		cmp	r3, #25
 194 0092 01DD     		ble	.L13
 195              	.L12:
 196              		.loc 1 215 0
 197 0094 4123     		mov	r3, #65
 198 0096 4CE2     		b	.L7
 199              	.L13:
 216:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;}
 200              		.loc 1 216 0 is_stmt 1
 201 0098 3B1C     		mov	r3, r7
 202 009a 2033     		add	r3, r3, #32
 203 009c 1B78     		ldrb	r3, [r3]
 204 009e 5BB2     		sxtb	r3, r3
 205 00a0 172B     		cmp	r3, #23
 206 00a2 05DD     		ble	.L14
 207              		.loc 1 216 0 is_stmt 0
 208 00a4 3B1C     		mov	r3, r7
 209 00a6 2033     		add	r3, r3, #32
 210 00a8 1B78     		ldrb	r3, [r3]
 211 00aa 5BB2     		sxtb	r3, r3
 212 00ac 322B     		cmp	r3, #50
 213 00ae 01DD     		ble	.L15
 214              	.L14:
 215              		.loc 1 216 0
 216 00b0 4223     		mov	r3, #66
 217 00b2 3EE2     		b	.L7
 218              	.L15:
 217:../Sources/TFC/TFC_CrystalClock.c **** 
 218:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL reference clock frequency is within spec.
 219:../Sources/TFC/TFC_CrystalClock.c ****   ref_freq = crystal_val / prdiv_val;
 219              		.loc 1 219 0 is_stmt 1
 220 00b4 7B1C     		add	r3, r7, #1
 221 00b6 1B78     		ldrb	r3, [r3]
 222 00b8 5BB2     		sxtb	r3, r3
 223 00ba 7868     		ldr	r0, [r7, #4]
 224 00bc 191C     		mov	r1, r3
 225 00be FFF7FEFF 		bl	__aeabi_idiv
 226 00c2 031C     		mov	r3, r0
 227 00c4 3B61     		str	r3, [r7, #16]
 220:../Sources/TFC/TFC_CrystalClock.c ****   if ((ref_freq < 2000000) || (ref_freq > 4000000)) {return 0x43;}
 228              		.loc 1 220 0
 229 00c6 3A69     		ldr	r2, [r7, #16]
 230 00c8 9A4B     		ldr	r3, .L64+16
 231 00ca 9A42     		cmp	r2, r3
 232 00cc 03DD     		ble	.L16
 233              		.loc 1 220 0 is_stmt 0
 234 00ce 3A69     		ldr	r2, [r7, #16]
 235 00d0 994B     		ldr	r3, .L64+20
 236 00d2 9A42     		cmp	r2, r3
 237 00d4 01DD     		ble	.L17
 238              	.L16:
 239              		.loc 1 220 0
 240 00d6 4323     		mov	r3, #67
 241 00d8 2BE2     		b	.L7
 242              	.L17:
 221:../Sources/TFC/TFC_CrystalClock.c **** 
 222:../Sources/TFC/TFC_CrystalClock.c ****   // Check PLL output frequency is within spec.
 223:../Sources/TFC/TFC_CrystalClock.c ****   pll_freq = (crystal_val / prdiv_val) * vdiv_val;
 243              		.loc 1 223 0 is_stmt 1
 244 00da 7B1C     		add	r3, r7, #1
 245 00dc 1B78     		ldrb	r3, [r3]
 246 00de 5BB2     		sxtb	r3, r3
 247 00e0 7868     		ldr	r0, [r7, #4]
 248 00e2 191C     		mov	r1, r3
 249 00e4 FFF7FEFF 		bl	__aeabi_idiv
 250 00e8 031C     		mov	r3, r0
 251 00ea 3A1C     		mov	r2, r7
 252 00ec 2032     		add	r2, r2, #32
 253 00ee 1278     		ldrb	r2, [r2]
 254 00f0 52B2     		sxtb	r2, r2
 255 00f2 5343     		mul	r3, r2
 256 00f4 FB60     		str	r3, [r7, #12]
 224:../Sources/TFC/TFC_CrystalClock.c ****   if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
 257              		.loc 1 224 0
 258 00f6 FA68     		ldr	r2, [r7, #12]
 259 00f8 904B     		ldr	r3, .L64+24
 260 00fa 9A42     		cmp	r2, r3
 261 00fc 03DD     		ble	.L18
 262              		.loc 1 224 0 is_stmt 0
 263 00fe FA68     		ldr	r2, [r7, #12]
 264 0100 8F4B     		ldr	r3, .L64+28
 265 0102 9A42     		cmp	r2, r3
 266 0104 01DD     		ble	.L19
 267              	.L18:
 268              		.loc 1 224 0
 269 0106 4523     		mov	r3, #69
 270 0108 13E2     		b	.L7
 271              	.L19:
 225:../Sources/TFC/TFC_CrystalClock.c **** 
 226:../Sources/TFC/TFC_CrystalClock.c ****   // configure the MCG_C2 register
 227:../Sources/TFC/TFC_CrystalClock.c ****   // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the
 228:../Sources/TFC/TFC_CrystalClock.c ****   // it still needs to be set correctly even if the oscillator is not being used
 229:../Sources/TFC/TFC_CrystalClock.c ****       
 230:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 272              		.loc 1 230 0 is_stmt 1
 273 010a 864A     		ldr	r2, .L64
 274 010c 3B1C     		mov	r3, r7
 275 010e 1633     		add	r3, r3, #22
 276 0110 5278     		ldrb	r2, [r2, #1]
 277 0112 1A70     		strb	r2, [r3]
 231:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 278              		.loc 1 231 0
 279 0114 3B1C     		mov	r3, r7
 280 0116 1633     		add	r3, r3, #22
 281 0118 3A1C     		mov	r2, r7
 282 011a 1632     		add	r2, r2, #22
 283 011c 1278     		ldrb	r2, [r2]
 284 011e 3C21     		mov	r1, #60
 285 0120 8A43     		bic	r2, r1
 286 0122 1A70     		strb	r2, [r3]
 232:../Sources/TFC/TFC_CrystalClock.c ****     
 233:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 8000000)
 287              		.loc 1 233 0
 288 0124 7A68     		ldr	r2, [r7, #4]
 289 0126 874B     		ldr	r3, .L64+32
 290 0128 9A42     		cmp	r2, r3
 291 012a 14DC     		bgt	.L20
 234:../Sources/TFC/TFC_CrystalClock.c ****   {
 235:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 292              		.loc 1 235 0
 293 012c FB1C     		add	r3, r7, #3
 294 012e 1B78     		ldrb	r3, [r3]
 295 0130 DB00     		lsl	r3, r3, #3
 296 0132 DAB2     		uxtb	r2, r3
 297 0134 BB1C     		add	r3, r7, #2
 298 0136 1B78     		ldrb	r3, [r3]
 299 0138 9B00     		lsl	r3, r3, #2
 300 013a DBB2     		uxtb	r3, r3
 301 013c 1343     		orr	r3, r2
 302 013e DAB2     		uxtb	r2, r3
 303 0140 3B1C     		mov	r3, r7
 304 0142 1633     		add	r3, r3, #22
 305 0144 1B78     		ldrb	r3, [r3]
 306 0146 1343     		orr	r3, r2
 307 0148 DAB2     		uxtb	r2, r3
 308 014a 3B1C     		mov	r3, r7
 309 014c 1633     		add	r3, r3, #22
 310 014e 1021     		mov	r1, #16
 311 0150 0A43     		orr	r2, r1
 312 0152 1A70     		strb	r2, [r3]
 313 0154 13E0     		b	.L21
 314              	.L20:
 236:../Sources/TFC/TFC_CrystalClock.c ****   }
 237:../Sources/TFC/TFC_CrystalClock.c ****   else
 238:../Sources/TFC/TFC_CrystalClock.c ****   {
 239:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 315              		.loc 1 239 0
 316 0156 FB1C     		add	r3, r7, #3
 317 0158 1B78     		ldrb	r3, [r3]
 318 015a DB00     		lsl	r3, r3, #3
 319 015c DAB2     		uxtb	r2, r3
 320 015e BB1C     		add	r3, r7, #2
 321 0160 1B78     		ldrb	r3, [r3]
 322 0162 9B00     		lsl	r3, r3, #2
 323 0164 DBB2     		uxtb	r3, r3
 324 0166 1343     		orr	r3, r2
 325 0168 DAB2     		uxtb	r2, r3
 326 016a 3B1C     		mov	r3, r7
 327 016c 1633     		add	r3, r3, #22
 328 016e 1B78     		ldrb	r3, [r3]
 329 0170 1343     		orr	r3, r2
 330 0172 DAB2     		uxtb	r2, r3
 331 0174 3B1C     		mov	r3, r7
 332 0176 1633     		add	r3, r3, #22
 333 0178 2021     		mov	r1, #32
 334 017a 0A43     		orr	r2, r1
 335 017c 1A70     		strb	r2, [r3]
 336              	.L21:
 240:../Sources/TFC/TFC_CrystalClock.c ****   }
 241:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 337              		.loc 1 241 0
 338 017e 694B     		ldr	r3, .L64
 339 0180 3A1C     		mov	r2, r7
 340 0182 1632     		add	r2, r2, #22
 341 0184 1278     		ldrb	r2, [r2]
 342 0186 5A70     		strb	r2, [r3, #1]
 242:../Sources/TFC/TFC_CrystalClock.c ****   
 243:../Sources/TFC/TFC_CrystalClock.c ****   // determine FRDIV based on reference clock frequency
 244:../Sources/TFC/TFC_CrystalClock.c ****   // since the external frequency has already been checked only the maximum frequency for each FRDI
 245:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 343              		.loc 1 245 0
 344 0188 7A68     		ldr	r2, [r7, #4]
 345 018a 6F4B     		ldr	r3, .L64+36
 346 018c 9A42     		cmp	r2, r3
 347 018e 04DC     		bgt	.L22
 348              		.loc 1 245 0 is_stmt 0
 349 0190 3B1C     		mov	r3, r7
 350 0192 1733     		add	r3, r3, #23
 351 0194 0022     		mov	r2, #0
 352 0196 1A70     		strb	r2, [r3]
 353 0198 27E0     		b	.L23
 354              	.L22:
 246:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 355              		.loc 1 246 0 is_stmt 1
 356 019a 7A68     		ldr	r2, [r7, #4]
 357 019c 6B4B     		ldr	r3, .L64+40
 358 019e 9A42     		cmp	r2, r3
 359 01a0 04DC     		bgt	.L24
 360              		.loc 1 246 0 is_stmt 0
 361 01a2 3B1C     		mov	r3, r7
 362 01a4 1733     		add	r3, r3, #23
 363 01a6 0122     		mov	r2, #1
 364 01a8 1A70     		strb	r2, [r3]
 365 01aa 1EE0     		b	.L23
 366              	.L24:
 247:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 367              		.loc 1 247 0 is_stmt 1
 368 01ac 7A68     		ldr	r2, [r7, #4]
 369 01ae 684B     		ldr	r3, .L64+44
 370 01b0 9A42     		cmp	r2, r3
 371 01b2 04DC     		bgt	.L25
 372              		.loc 1 247 0 is_stmt 0
 373 01b4 3B1C     		mov	r3, r7
 374 01b6 1733     		add	r3, r3, #23
 375 01b8 0222     		mov	r2, #2
 376 01ba 1A70     		strb	r2, [r3]
 377 01bc 15E0     		b	.L23
 378              	.L25:
 248:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 379              		.loc 1 248 0 is_stmt 1
 380 01be 7A68     		ldr	r2, [r7, #4]
 381 01c0 644B     		ldr	r3, .L64+48
 382 01c2 9A42     		cmp	r2, r3
 383 01c4 04DC     		bgt	.L26
 384              		.loc 1 248 0 is_stmt 0
 385 01c6 3B1C     		mov	r3, r7
 386 01c8 1733     		add	r3, r3, #23
 387 01ca 0322     		mov	r2, #3
 388 01cc 1A70     		strb	r2, [r3]
 389 01ce 0CE0     		b	.L23
 390              	.L26:
 249:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 391              		.loc 1 249 0 is_stmt 1
 392 01d0 7A68     		ldr	r2, [r7, #4]
 393 01d2 614B     		ldr	r3, .L64+52
 394 01d4 9A42     		cmp	r2, r3
 395 01d6 04DC     		bgt	.L27
 396              		.loc 1 249 0 is_stmt 0
 397 01d8 3B1C     		mov	r3, r7
 398 01da 1733     		add	r3, r3, #23
 399 01dc 0422     		mov	r2, #4
 400 01de 1A70     		strb	r2, [r3]
 401 01e0 03E0     		b	.L23
 402              	.L27:
 250:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 403              		.loc 1 250 0 is_stmt 1
 404 01e2 3B1C     		mov	r3, r7
 405 01e4 1733     		add	r3, r3, #23
 406 01e6 0522     		mov	r2, #5
 407 01e8 1A70     		strb	r2, [r3]
 408              	.L23:
 251:../Sources/TFC/TFC_CrystalClock.c **** 
 252:../Sources/TFC/TFC_CrystalClock.c ****   // Select external oscillator and Reference Divider and clear IREFS to start ext osc
 253:../Sources/TFC/TFC_CrystalClock.c ****   // If IRCLK is required it must be enabled outside of this driver, existing state will be maintai
 254:../Sources/TFC/TFC_CrystalClock.c ****   // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
 255:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 409              		.loc 1 255 0
 410 01ea 4E4A     		ldr	r2, .L64
 411 01ec 3B1C     		mov	r3, r7
 412 01ee 1633     		add	r3, r3, #22
 413 01f0 1278     		ldrb	r2, [r2]
 414 01f2 1A70     		strb	r2, [r3]
 256:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 415              		.loc 1 256 0
 416 01f4 3B1C     		mov	r3, r7
 417 01f6 1633     		add	r3, r3, #22
 418 01f8 3A1C     		mov	r2, r7
 419 01fa 1632     		add	r2, r2, #22
 420 01fc 1178     		ldrb	r1, [r2]
 421 01fe 0322     		mov	r2, #3
 422 0200 0A40     		and	r2, r1
 423 0202 1A70     		strb	r2, [r3]
 257:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 424              		.loc 1 257 0
 425 0204 3B1C     		mov	r3, r7
 426 0206 1733     		add	r3, r3, #23
 427 0208 1B78     		ldrb	r3, [r3]
 428 020a DB00     		lsl	r3, r3, #3
 429 020c DAB2     		uxtb	r2, r3
 430 020e 3823     		mov	r3, #56
 431 0210 1340     		and	r3, r2
 432 0212 DAB2     		uxtb	r2, r3
 433 0214 3B1C     		mov	r3, r7
 434 0216 1633     		add	r3, r3, #22
 435 0218 1B78     		ldrb	r3, [r3]
 436 021a 1343     		orr	r3, r2
 437 021c DAB2     		uxtb	r2, r3
 438 021e 3B1C     		mov	r3, r7
 439 0220 1633     		add	r3, r3, #22
 440 0222 8021     		mov	r1, #128
 441 0224 4942     		neg	r1, r1
 442 0226 0A43     		orr	r2, r1
 443 0228 1A70     		strb	r2, [r3]
 258:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 444              		.loc 1 258 0
 445 022a 3E4B     		ldr	r3, .L64
 446 022c 3A1C     		mov	r2, r7
 447 022e 1632     		add	r2, r2, #22
 448 0230 1278     		ldrb	r2, [r2]
 449 0232 1A70     		strb	r2, [r3]
 259:../Sources/TFC/TFC_CrystalClock.c **** 
 260:../Sources/TFC/TFC_CrystalClock.c ****   // if the external oscillator is used need to wait for OSCINIT to set
 261:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 450              		.loc 1 261 0
 451 0234 BB1C     		add	r3, r7, #2
 452 0236 1B78     		ldrb	r3, [r3]
 453 0238 002B     		cmp	r3, #0
 454 023a 24D0     		beq	.L28
 262:../Sources/TFC/TFC_CrystalClock.c ****   {
 263:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 455              		.loc 1 263 0
 456 023c 3B1C     		mov	r3, r7
 457 023e 1433     		add	r3, r3, #20
 458 0240 0022     		mov	r2, #0
 459 0242 1A80     		strh	r2, [r3]
 460 0244 0DE0     		b	.L29
 461              	.L32:
 264:../Sources/TFC/TFC_CrystalClock.c ****     {
 265:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 462              		.loc 1 265 0
 463 0246 374B     		ldr	r3, .L64
 464 0248 9B79     		ldrb	r3, [r3, #6]
 465 024a DBB2     		uxtb	r3, r3
 466 024c 1A1C     		mov	r2, r3
 467 024e 0223     		mov	r3, #2
 468 0250 1340     		and	r3, r2
 469 0252 0ED1     		bne	.L58
 470              	.L30:
 263:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 471              		.loc 1 263 0
 472 0254 3B1C     		mov	r3, r7
 473 0256 1433     		add	r3, r3, #20
 474 0258 3A1C     		mov	r2, r7
 475 025a 1432     		add	r2, r2, #20
 476 025c 1288     		ldrh	r2, [r2]
 477 025e 0132     		add	r2, r2, #1
 478 0260 1A80     		strh	r2, [r3]
 479              	.L29:
 263:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000 ; i++)
 480              		.loc 1 263 0 is_stmt 0
 481 0262 3B1C     		mov	r3, r7
 482 0264 1433     		add	r3, r3, #20
 483 0266 0021     		mov	r1, #0
 484 0268 5A5E     		ldrsh	r2, [r3, r1]
 485 026a 3C4B     		ldr	r3, .L64+56
 486 026c 9A42     		cmp	r2, r3
 487 026e EADD     		ble	.L32
 488 0270 00E0     		b	.L31
 489              	.L58:
 490              		.loc 1 265 0 is_stmt 1
 491 0272 C046     		mov	r8, r8
 492              	.L31:
 266:../Sources/TFC/TFC_CrystalClock.c ****     }
 267:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with error
 493              		.loc 1 267 0
 494 0274 2B4B     		ldr	r3, .L64
 495 0276 9B79     		ldrb	r3, [r3, #6]
 496 0278 DBB2     		uxtb	r3, r3
 497 027a 1A1C     		mov	r2, r3
 498 027c 0223     		mov	r3, #2
 499 027e 1340     		and	r3, r2
 500 0280 01D1     		bne	.L28
 501              		.loc 1 267 0 is_stmt 0
 502 0282 2323     		mov	r3, #35
 503 0284 55E1     		b	.L7
 504              	.L28:
 268:../Sources/TFC/TFC_CrystalClock.c ****   }
 269:../Sources/TFC/TFC_CrystalClock.c **** 
 270:../Sources/TFC/TFC_CrystalClock.c ****   // wait for Reference clock Status bit to clear
 271:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 505              		.loc 1 271 0 is_stmt 1
 506 0286 3B1C     		mov	r3, r7
 507 0288 1433     		add	r3, r3, #20
 508 028a 0022     		mov	r2, #0
 509 028c 1A80     		strh	r2, [r3]
 510 028e 0DE0     		b	.L33
 511              	.L36:
 272:../Sources/TFC/TFC_CrystalClock.c ****   {
 273:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 512              		.loc 1 273 0
 513 0290 244B     		ldr	r3, .L64
 514 0292 9B79     		ldrb	r3, [r3, #6]
 515 0294 DBB2     		uxtb	r3, r3
 516 0296 1A1C     		mov	r2, r3
 517 0298 1023     		mov	r3, #16
 518 029a 1340     		and	r3, r2
 519 029c 0ED0     		beq	.L59
 520              	.L34:
 271:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 521              		.loc 1 271 0
 522 029e 3B1C     		mov	r3, r7
 523 02a0 1433     		add	r3, r3, #20
 524 02a2 3A1C     		mov	r2, r7
 525 02a4 1432     		add	r2, r2, #20
 526 02a6 1288     		ldrh	r2, [r2]
 527 02a8 0132     		add	r2, r2, #1
 528 02aa 1A80     		strh	r2, [r3]
 529              	.L33:
 271:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 530              		.loc 1 271 0 is_stmt 0
 531 02ac 3B1C     		mov	r3, r7
 532 02ae 1433     		add	r3, r3, #20
 533 02b0 0021     		mov	r1, #0
 534 02b2 5A5E     		ldrsh	r2, [r3, r1]
 535 02b4 2A4B     		ldr	r3, .L64+60
 536 02b6 9A42     		cmp	r2, r3
 537 02b8 EADD     		ble	.L36
 538 02ba 00E0     		b	.L35
 539              	.L59:
 540              		.loc 1 273 0 is_stmt 1
 541 02bc C046     		mov	r8, r8
 542              	.L35:
 274:../Sources/TFC/TFC_CrystalClock.c ****   }
 275:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 543              		.loc 1 275 0
 544 02be 194B     		ldr	r3, .L64
 545 02c0 9B79     		ldrb	r3, [r3, #6]
 546 02c2 DBB2     		uxtb	r3, r3
 547 02c4 1A1C     		mov	r2, r3
 548 02c6 1023     		mov	r3, #16
 549 02c8 1340     		and	r3, r2
 550 02ca 01D0     		beq	.L37
 551              		.loc 1 275 0 is_stmt 0
 552 02cc 1123     		mov	r3, #17
 553 02ce 30E1     		b	.L7
 554              	.L37:
 276:../Sources/TFC/TFC_CrystalClock.c **** 
 277:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to show clock source is ext ref clk
 278:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 555              		.loc 1 278 0 is_stmt 1
 556 02d0 3B1C     		mov	r3, r7
 557 02d2 1433     		add	r3, r3, #20
 558 02d4 0022     		mov	r2, #0
 559 02d6 1A80     		strh	r2, [r3]
 560 02d8 0FE0     		b	.L38
 561              	.L41:
 279:../Sources/TFC/TFC_CrystalClock.c ****   {
 280:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 562              		.loc 1 280 0
 563 02da 124B     		ldr	r3, .L64
 564 02dc 9B79     		ldrb	r3, [r3, #6]
 565 02de DBB2     		uxtb	r3, r3
 566 02e0 1A1C     		mov	r2, r3
 567 02e2 0C23     		mov	r3, #12
 568 02e4 1340     		and	r3, r2
 569 02e6 9B08     		lsr	r3, r3, #2
 570 02e8 022B     		cmp	r3, #2
 571 02ea 0ED0     		beq	.L60
 572              	.L39:
 278:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 573              		.loc 1 278 0
 574 02ec 3B1C     		mov	r3, r7
 575 02ee 1433     		add	r3, r3, #20
 576 02f0 3A1C     		mov	r2, r7
 577 02f2 1432     		add	r2, r2, #20
 578 02f4 1288     		ldrh	r2, [r2]
 579 02f6 0132     		add	r2, r2, #1
 580 02f8 1A80     		strh	r2, [r3]
 581              	.L38:
 278:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 582              		.loc 1 278 0 is_stmt 0
 583 02fa 3B1C     		mov	r3, r7
 584 02fc 1433     		add	r3, r3, #20
 585 02fe 0021     		mov	r1, #0
 586 0300 5A5E     		ldrsh	r2, [r3, r1]
 587 0302 174B     		ldr	r3, .L64+60
 588 0304 9A42     		cmp	r2, r3
 589 0306 E8DD     		ble	.L41
 590 0308 00E0     		b	.L40
 591              	.L60:
 592              		.loc 1 280 0 is_stmt 1
 593 030a C046     		mov	r8, r8
 594              	.L40:
 281:../Sources/TFC/TFC_CrystalClock.c ****   }
 282:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 595              		.loc 1 282 0
 596 030c 054B     		ldr	r3, .L64
 597 030e 9B79     		ldrb	r3, [r3, #6]
 598 0310 DBB2     		uxtb	r3, r3
 599 0312 1A1C     		mov	r2, r3
 600 0314 0C23     		mov	r3, #12
 601 0316 1340     		and	r3, r2
 602 0318 9B08     		lsr	r3, r3, #2
 603 031a 022B     		cmp	r3, #2
 604 031c 22D0     		beq	.L42
 605              		.loc 1 282 0 is_stmt 0
 606 031e 1A23     		mov	r3, #26
 607 0320 07E1     		b	.L7
 608              	.L65:
 609 0322 C046     		.align	2
 610              	.L64:
 611 0324 00400640 		.word	1074151424
 612 0328 80F0FA02 		.word	50000000
 613 032c BFC62D00 		.word	2999999
 614 0330 0048E801 		.word	32000000
 615 0334 7F841E00 		.word	1999999
 616 0338 00093D00 		.word	4000000
 617 033c FF6BDC02 		.word	47999999
 618 0340 00E1F505 		.word	100000000
 619 0344 00127A00 		.word	8000000
 620 0348 D0121300 		.word	1250000
 621 034c A0252600 		.word	2500000
 622 0350 404B4C00 		.word	5000000
 623 0354 80969800 		.word	10000000
 624 0358 002D3101 		.word	20000000
 625 035c 1F4E0000 		.word	19999
 626 0360 CF070000 		.word	1999
 627              	.L42:
 283:../Sources/TFC/TFC_CrystalClock.c **** 
 284:../Sources/TFC/TFC_CrystalClock.c ****   // Now in FBE
 285:../Sources/TFC/TFC_CrystalClock.c ****   // It is recommended that the clock monitor is enabled when using an external clock as the clock 
 286:../Sources/TFC/TFC_CrystalClock.c ****   // It is enabled here but can be removed if this is not required.
 287:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 628              		.loc 1 287 0 is_stmt 1
 629 0364 754B     		ldr	r3, .L66
 630 0366 754A     		ldr	r2, .L66
 631 0368 5279     		ldrb	r2, [r2, #5]
 632 036a D2B2     		uxtb	r2, r2
 633 036c 2021     		mov	r1, #32
 634 036e 0A43     		orr	r2, r1
 635 0370 D2B2     		uxtb	r2, r2
 636 0372 5A71     		strb	r2, [r3, #5]
 288:../Sources/TFC/TFC_CrystalClock.c ****   
 289:../Sources/TFC/TFC_CrystalClock.c ****   // Configure PLL
 290:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C5
 291:../Sources/TFC/TFC_CrystalClock.c ****   // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user co
 292:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 637              		.loc 1 292 0
 638 0374 714A     		ldr	r2, .L66
 639 0376 3B1C     		mov	r3, r7
 640 0378 1633     		add	r3, r3, #22
 641 037a 1279     		ldrb	r2, [r2, #4]
 642 037c 1A70     		strb	r2, [r3]
 293:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 643              		.loc 1 293 0
 644 037e 3B1C     		mov	r3, r7
 645 0380 1633     		add	r3, r3, #22
 646 0382 3A1C     		mov	r2, r7
 647 0384 1632     		add	r2, r2, #22
 648 0386 1278     		ldrb	r2, [r2]
 649 0388 1F21     		mov	r1, #31
 650 038a 8A43     		bic	r2, r1
 651 038c 1A70     		strb	r2, [r3]
 294:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 652              		.loc 1 294 0
 653 038e 7B1C     		add	r3, r7, #1
 654 0390 1B78     		ldrb	r3, [r3]
 655 0392 013B     		sub	r3, r3, #1
 656 0394 DAB2     		uxtb	r2, r3
 657 0396 1F23     		mov	r3, #31
 658 0398 1340     		and	r3, r2
 659 039a D9B2     		uxtb	r1, r3
 660 039c 3B1C     		mov	r3, r7
 661 039e 1633     		add	r3, r3, #22
 662 03a0 3A1C     		mov	r2, r7
 663 03a2 1632     		add	r2, r2, #22
 664 03a4 1278     		ldrb	r2, [r2]
 665 03a6 0A43     		orr	r2, r1
 666 03a8 1A70     		strb	r2, [r3]
 295:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 667              		.loc 1 295 0
 668 03aa 644B     		ldr	r3, .L66
 669 03ac 3A1C     		mov	r2, r7
 670 03ae 1632     		add	r2, r2, #22
 671 03b0 1278     		ldrb	r2, [r2]
 672 03b2 1A71     		strb	r2, [r3, #4]
 296:../Sources/TFC/TFC_CrystalClock.c **** 
 297:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C6
 298:../Sources/TFC/TFC_CrystalClock.c ****   // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk
 299:../Sources/TFC/TFC_CrystalClock.c ****   // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 300:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 673              		.loc 1 300 0
 674 03b4 614A     		ldr	r2, .L66
 675 03b6 3B1C     		mov	r3, r7
 676 03b8 1633     		add	r3, r3, #22
 677 03ba 5279     		ldrb	r2, [r2, #5]
 678 03bc 1A70     		strb	r2, [r3]
 301:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 679              		.loc 1 301 0
 680 03be 3B1C     		mov	r3, r7
 681 03c0 1633     		add	r3, r3, #22
 682 03c2 3A1C     		mov	r2, r7
 683 03c4 1632     		add	r2, r2, #22
 684 03c6 1278     		ldrb	r2, [r2]
 685 03c8 1F21     		mov	r1, #31
 686 03ca 8A43     		bic	r2, r1
 687 03cc 1A70     		strb	r2, [r3]
 302:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 688              		.loc 1 302 0
 689 03ce 3B1C     		mov	r3, r7
 690 03d0 2033     		add	r3, r3, #32
 691 03d2 1B78     		ldrb	r3, [r3]
 692 03d4 183B     		sub	r3, r3, #24
 693 03d6 DAB2     		uxtb	r2, r3
 694 03d8 1F23     		mov	r3, #31
 695 03da 1340     		and	r3, r2
 696 03dc DAB2     		uxtb	r2, r3
 697 03de 3B1C     		mov	r3, r7
 698 03e0 1633     		add	r3, r3, #22
 699 03e2 1B78     		ldrb	r3, [r3]
 700 03e4 1343     		orr	r3, r2
 701 03e6 DAB2     		uxtb	r2, r3
 702 03e8 3B1C     		mov	r3, r7
 703 03ea 1633     		add	r3, r3, #22
 704 03ec 4021     		mov	r1, #64
 705 03ee 0A43     		orr	r2, r1
 706 03f0 1A70     		strb	r2, [r3]
 303:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 707              		.loc 1 303 0
 708 03f2 524B     		ldr	r3, .L66
 709 03f4 3A1C     		mov	r2, r7
 710 03f6 1632     		add	r2, r2, #22
 711 03f8 1278     		ldrb	r2, [r2]
 712 03fa 5A71     		strb	r2, [r3, #5]
 304:../Sources/TFC/TFC_CrystalClock.c **** 
 305:../Sources/TFC/TFC_CrystalClock.c ****   // wait for PLLST status bit to set
 306:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 713              		.loc 1 306 0
 714 03fc 3B1C     		mov	r3, r7
 715 03fe 1433     		add	r3, r3, #20
 716 0400 0022     		mov	r2, #0
 717 0402 1A80     		strh	r2, [r3]
 718 0404 0DE0     		b	.L43
 719              	.L46:
 307:../Sources/TFC/TFC_CrystalClock.c ****   {
 308:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 720              		.loc 1 308 0
 721 0406 4D4B     		ldr	r3, .L66
 722 0408 9B79     		ldrb	r3, [r3, #6]
 723 040a DBB2     		uxtb	r3, r3
 724 040c 1A1C     		mov	r2, r3
 725 040e 2023     		mov	r3, #32
 726 0410 1340     		and	r3, r2
 727 0412 0ED1     		bne	.L61
 728              	.L44:
 306:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 729              		.loc 1 306 0
 730 0414 3B1C     		mov	r3, r7
 731 0416 1433     		add	r3, r3, #20
 732 0418 3A1C     		mov	r2, r7
 733 041a 1432     		add	r2, r2, #20
 734 041c 1288     		ldrh	r2, [r2]
 735 041e 0132     		add	r2, r2, #1
 736 0420 1A80     		strh	r2, [r3]
 737              	.L43:
 306:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 738              		.loc 1 306 0 is_stmt 0
 739 0422 3B1C     		mov	r3, r7
 740 0424 1433     		add	r3, r3, #20
 741 0426 0021     		mov	r1, #0
 742 0428 5A5E     		ldrsh	r2, [r3, r1]
 743 042a 454B     		ldr	r3, .L66+4
 744 042c 9A42     		cmp	r2, r3
 745 042e EADD     		ble	.L46
 746 0430 00E0     		b	.L45
 747              	.L61:
 748              		.loc 1 308 0 is_stmt 1
 749 0432 C046     		mov	r8, r8
 750              	.L45:
 309:../Sources/TFC/TFC_CrystalClock.c ****   }
 310:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 751              		.loc 1 310 0
 752 0434 414B     		ldr	r3, .L66
 753 0436 9B79     		ldrb	r3, [r3, #6]
 754 0438 DBB2     		uxtb	r3, r3
 755 043a 1A1C     		mov	r2, r3
 756 043c 2023     		mov	r3, #32
 757 043e 1340     		and	r3, r2
 758 0440 01D1     		bne	.L47
 759              		.loc 1 310 0 is_stmt 0
 760 0442 1623     		mov	r3, #22
 761 0444 75E0     		b	.L7
 762              	.L47:
 311:../Sources/TFC/TFC_CrystalClock.c **** 
 312:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for LOCK bit to set
 313:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 763              		.loc 1 313 0 is_stmt 1
 764 0446 3B1C     		mov	r3, r7
 765 0448 1433     		add	r3, r3, #20
 766 044a 0022     		mov	r2, #0
 767 044c 1A80     		strh	r2, [r3]
 768 044e 0DE0     		b	.L48
 769              	.L51:
 314:../Sources/TFC/TFC_CrystalClock.c ****   {
 315:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 770              		.loc 1 315 0
 771 0450 3A4B     		ldr	r3, .L66
 772 0452 9B79     		ldrb	r3, [r3, #6]
 773 0454 DBB2     		uxtb	r3, r3
 774 0456 1A1C     		mov	r2, r3
 775 0458 4023     		mov	r3, #64
 776 045a 1340     		and	r3, r2
 777 045c 0ED1     		bne	.L62
 778              	.L49:
 313:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 779              		.loc 1 313 0
 780 045e 3B1C     		mov	r3, r7
 781 0460 1433     		add	r3, r3, #20
 782 0462 3A1C     		mov	r2, r7
 783 0464 1432     		add	r2, r2, #20
 784 0466 1288     		ldrh	r2, [r2]
 785 0468 0132     		add	r2, r2, #1
 786 046a 1A80     		strh	r2, [r3]
 787              	.L48:
 313:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 4000 ; i++)
 788              		.loc 1 313 0 is_stmt 0
 789 046c 3B1C     		mov	r3, r7
 790 046e 1433     		add	r3, r3, #20
 791 0470 0021     		mov	r1, #0
 792 0472 5A5E     		ldrsh	r2, [r3, r1]
 793 0474 334B     		ldr	r3, .L66+8
 794 0476 9A42     		cmp	r2, r3
 795 0478 EADD     		ble	.L51
 796 047a 00E0     		b	.L50
 797              	.L62:
 798              		.loc 1 315 0 is_stmt 1
 799 047c C046     		mov	r8, r8
 800              	.L50:
 316:../Sources/TFC/TFC_CrystalClock.c ****   }
 317:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 801              		.loc 1 317 0
 802 047e 2F4B     		ldr	r3, .L66
 803 0480 9B79     		ldrb	r3, [r3, #6]
 804 0482 DBB2     		uxtb	r3, r3
 805 0484 1A1C     		mov	r2, r3
 806 0486 4023     		mov	r3, #64
 807 0488 1340     		and	r3, r2
 808 048a 01D1     		bne	.L52
 809              		.loc 1 317 0 is_stmt 0
 810 048c 4423     		mov	r3, #68
 811 048e 50E0     		b	.L7
 812              	.L52:
 318:../Sources/TFC/TFC_CrystalClock.c **** 
 319:../Sources/TFC/TFC_CrystalClock.c ****   // Use actual PLL settings to calculate PLL frequency
 320:../Sources/TFC/TFC_CrystalClock.c ****   prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
 813              		.loc 1 320 0 is_stmt 1
 814 0490 2A4B     		ldr	r3, .L66
 815 0492 1B79     		ldrb	r3, [r3, #4]
 816 0494 DAB2     		uxtb	r2, r3
 817 0496 1F23     		mov	r3, #31
 818 0498 1340     		and	r3, r2
 819 049a DAB2     		uxtb	r2, r3
 820 049c 3B1C     		mov	r3, r7
 821 049e 0B33     		add	r3, r3, #11
 822 04a0 0132     		add	r2, r2, #1
 823 04a2 1A70     		strb	r2, [r3]
 321:../Sources/TFC/TFC_CrystalClock.c ****   vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
 824              		.loc 1 321 0
 825 04a4 254B     		ldr	r3, .L66
 826 04a6 5B79     		ldrb	r3, [r3, #5]
 827 04a8 DAB2     		uxtb	r2, r3
 828 04aa 1F23     		mov	r3, #31
 829 04ac 1340     		and	r3, r2
 830 04ae DAB2     		uxtb	r2, r3
 831 04b0 3B1C     		mov	r3, r7
 832 04b2 0A33     		add	r3, r3, #10
 833 04b4 1832     		add	r2, r2, #24
 834 04b6 1A70     		strb	r2, [r3]
 322:../Sources/TFC/TFC_CrystalClock.c **** 
 323:../Sources/TFC/TFC_CrystalClock.c ****   // now in PBE
 324:../Sources/TFC/TFC_CrystalClock.c **** 
 325:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
 835              		.loc 1 325 0
 836 04b8 204B     		ldr	r3, .L66
 837 04ba 204A     		ldr	r2, .L66
 838 04bc 1278     		ldrb	r2, [r2]
 839 04be D1B2     		uxtb	r1, r2
 840 04c0 3F22     		mov	r2, #63
 841 04c2 0A40     		and	r2, r1
 842 04c4 D2B2     		uxtb	r2, r2
 843 04c6 1A70     		strb	r2, [r3]
 326:../Sources/TFC/TFC_CrystalClock.c **** 
 327:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to update
 328:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 844              		.loc 1 328 0
 845 04c8 3B1C     		mov	r3, r7
 846 04ca 1433     		add	r3, r3, #20
 847 04cc 0022     		mov	r2, #0
 848 04ce 1A80     		strh	r2, [r3]
 849 04d0 0FE0     		b	.L53
 850              	.L56:
 329:../Sources/TFC/TFC_CrystalClock.c ****   {
 330:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST
 851              		.loc 1 330 0
 852 04d2 1A4B     		ldr	r3, .L66
 853 04d4 9B79     		ldrb	r3, [r3, #6]
 854 04d6 DBB2     		uxtb	r3, r3
 855 04d8 1A1C     		mov	r2, r3
 856 04da 0C23     		mov	r3, #12
 857 04dc 1340     		and	r3, r2
 858 04de 9B08     		lsr	r3, r3, #2
 859 04e0 032B     		cmp	r3, #3
 860 04e2 0ED0     		beq	.L63
 861              	.L54:
 328:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 862              		.loc 1 328 0
 863 04e4 3B1C     		mov	r3, r7
 864 04e6 1433     		add	r3, r3, #20
 865 04e8 3A1C     		mov	r2, r7
 866 04ea 1432     		add	r2, r2, #20
 867 04ec 1288     		ldrh	r2, [r2]
 868 04ee 0132     		add	r2, r2, #1
 869 04f0 1A80     		strh	r2, [r3]
 870              	.L53:
 328:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 871              		.loc 1 328 0 is_stmt 0
 872 04f2 3B1C     		mov	r3, r7
 873 04f4 1433     		add	r3, r3, #20
 874 04f6 0021     		mov	r1, #0
 875 04f8 5A5E     		ldrsh	r2, [r3, r1]
 876 04fa 114B     		ldr	r3, .L66+4
 877 04fc 9A42     		cmp	r2, r3
 878 04fe E8DD     		ble	.L56
 879 0500 00E0     		b	.L55
 880              	.L63:
 881              		.loc 1 330 0 is_stmt 1
 882 0502 C046     		mov	r8, r8
 883              	.L55:
 331:../Sources/TFC/TFC_CrystalClock.c ****   }
 332:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set 
 884              		.loc 1 332 0
 885 0504 0D4B     		ldr	r3, .L66
 886 0506 9B79     		ldrb	r3, [r3, #6]
 887 0508 DBB2     		uxtb	r3, r3
 888 050a 1A1C     		mov	r2, r3
 889 050c 0C23     		mov	r3, #12
 890 050e 1340     		and	r3, r2
 891 0510 9B08     		lsr	r3, r3, #2
 892 0512 032B     		cmp	r3, #3
 893 0514 01D0     		beq	.L57
 894              		.loc 1 332 0 is_stmt 0
 895 0516 1B23     		mov	r3, #27
 896 0518 0BE0     		b	.L7
 897              	.L57:
 333:../Sources/TFC/TFC_CrystalClock.c **** 
 334:../Sources/TFC/TFC_CrystalClock.c ****   // Now in PEE
 335:../Sources/TFC/TFC_CrystalClock.c ****   
 336:../Sources/TFC/TFC_CrystalClock.c ****   return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
 898              		.loc 1 336 0 is_stmt 1
 899 051a 3B1C     		mov	r3, r7
 900 051c 0B33     		add	r3, r3, #11
 901 051e 1B78     		ldrb	r3, [r3]
 902 0520 7868     		ldr	r0, [r7, #4]
 903 0522 191C     		mov	r1, r3
 904 0524 FFF7FEFF 		bl	__aeabi_idiv
 905 0528 031C     		mov	r3, r0
 906 052a 3A1C     		mov	r2, r7
 907 052c 0A32     		add	r2, r2, #10
 908 052e 1278     		ldrb	r2, [r2]
 909 0530 5343     		mul	r3, r2
 910              	.L7:
 337:../Sources/TFC/TFC_CrystalClock.c **** } // pll_init
 911              		.loc 1 337 0
 912 0532 181C     		mov	r0, r3
 913 0534 BD46     		mov	sp, r7
 914 0536 06B0     		add	sp, sp, #24
 915              		@ sp needed for prologue
 916 0538 80BD     		pop	{r7, pc}
 917              	.L67:
 918 053a C046     		.align	2
 919              	.L66:
 920 053c 00400640 		.word	1074151424
 921 0540 CF070000 		.word	1999
 922 0544 9F0F0000 		.word	3999
 923              		.cfi_endproc
 924              	.LFE1:
 926              		.section	.text.pee_pbe,"ax",%progbits
 927              		.align	2
 928              		.global	pee_pbe
 929              		.code	16
 930              		.thumb_func
 932              	pee_pbe:
 933              	.LFB2:
 338:../Sources/TFC/TFC_CrystalClock.c **** 
 339:../Sources/TFC/TFC_CrystalClock.c **** 
 340:../Sources/TFC/TFC_CrystalClock.c **** 
 341:../Sources/TFC/TFC_CrystalClock.c **** 
 342:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 343:../Sources/TFC/TFC_CrystalClock.c **** 
 344:../Sources/TFC/TFC_CrystalClock.c **** int pee_pbe(int crystal_val)
 345:../Sources/TFC/TFC_CrystalClock.c **** {
 934              		.loc 1 345 0
 935              		.cfi_startproc
 936 0000 80B5     		push	{r7, lr}
 937              	.LCFI6:
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 84B0     		sub	sp, sp, #16
 942              	.LCFI7:
 943              		.cfi_def_cfa_offset 24
 944 0004 00AF     		add	r7, sp, #0
 945              	.LCFI8:
 946              		.cfi_def_cfa_register 7
 947 0006 7860     		str	r0, [r7, #4]
 346:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 347:../Sources/TFC/TFC_CrystalClock.c ****   
 348:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PEE mode
 349:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 948              		.loc 1 349 0
 949 0008 274B     		ldr	r3, .L78
 950 000a 9B79     		ldrb	r3, [r3, #6]
 951 000c DBB2     		uxtb	r3, r3
 952 000e 1A1C     		mov	r2, r3
 953 0010 0C23     		mov	r3, #12
 954 0012 1340     		and	r3, r2
 955 0014 9B08     		lsr	r3, r3, #2
 956 0016 032B     		cmp	r3, #3
 957 0018 0DD1     		bne	.L69
 350:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 958              		.loc 1 350 0
 959 001a 234B     		ldr	r3, .L78
 960 001c 9B79     		ldrb	r3, [r3, #6]
 961 001e DBB2     		uxtb	r3, r3
 962 0020 1A1C     		mov	r2, r3
 963 0022 1023     		mov	r3, #16
 964 0024 1340     		and	r3, r2
 349:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 965              		.loc 1 349 0
 966 0026 06D1     		bne	.L69
 351:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK)))                                    // check PLLS mux has selecte
 967              		.loc 1 351 0
 968 0028 1F4B     		ldr	r3, .L78
 969 002a 9B79     		ldrb	r3, [r3, #6]
 970 002c DBB2     		uxtb	r3, r3
 971 002e 1A1C     		mov	r2, r3
 972 0030 2023     		mov	r3, #32
 973 0032 1340     		and	r3, r2
 349:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selcted
 974              		.loc 1 349 0
 975 0034 01D1     		bne	.L70
 976              	.L69:
 352:../Sources/TFC/TFC_CrystalClock.c ****   {
 353:../Sources/TFC/TFC_CrystalClock.c ****     return 0x8;                                                       // return error code
 977              		.loc 1 353 0
 978 0036 0823     		mov	r3, #8
 979 0038 32E0     		b	.L71
 980              	.L70:
 354:../Sources/TFC/TFC_CrystalClock.c ****   } 
 355:../Sources/TFC/TFC_CrystalClock.c ****   
 356:../Sources/TFC/TFC_CrystalClock.c **** // As we are running from the PLL by default the PLL and external clock settings are valid
 357:../Sources/TFC/TFC_CrystalClock.c **** // To move to PBE from PEE simply requires the switching of the CLKS mux to select the ext clock 
 358:../Sources/TFC/TFC_CrystalClock.c **** // As CLKS is already 0 the CLKS value can simply be OR'ed into the register 
 359:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(2); // switch CLKS mux to select external reference clock as MCG_OUT
 981              		.loc 1 359 0
 982 003a 1B4B     		ldr	r3, .L78
 983 003c 1A4A     		ldr	r2, .L78
 984 003e 1278     		ldrb	r2, [r2]
 985 0040 D2B2     		uxtb	r2, r2
 986 0042 8021     		mov	r1, #128
 987 0044 4942     		neg	r1, r1
 988 0046 0A43     		orr	r2, r1
 989 0048 D2B2     		uxtb	r2, r2
 990 004a 1A70     		strb	r2, [r3]
 360:../Sources/TFC/TFC_CrystalClock.c ****   
 361:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update 
 362:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 991              		.loc 1 362 0
 992 004c 3B1C     		mov	r3, r7
 993 004e 0E33     		add	r3, r3, #14
 994 0050 0022     		mov	r2, #0
 995 0052 1A80     		strh	r2, [r3]
 996 0054 0FE0     		b	.L72
 997              	.L75:
 363:../Sources/TFC/TFC_CrystalClock.c ****   {
 364:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 998              		.loc 1 364 0
 999 0056 144B     		ldr	r3, .L78
 1000 0058 9B79     		ldrb	r3, [r3, #6]
 1001 005a DBB2     		uxtb	r3, r3
 1002 005c 1A1C     		mov	r2, r3
 1003 005e 0C23     		mov	r3, #12
 1004 0060 1340     		and	r3, r2
 1005 0062 9B08     		lsr	r3, r3, #2
 1006 0064 022B     		cmp	r3, #2
 1007 0066 0ED0     		beq	.L77
 1008              	.L73:
 362:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1009              		.loc 1 362 0
 1010 0068 3B1C     		mov	r3, r7
 1011 006a 0E33     		add	r3, r3, #14
 1012 006c 3A1C     		mov	r2, r7
 1013 006e 0E32     		add	r2, r2, #14
 1014 0070 1288     		ldrh	r2, [r2]
 1015 0072 0132     		add	r2, r2, #1
 1016 0074 1A80     		strh	r2, [r3]
 1017              	.L72:
 362:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1018              		.loc 1 362 0 is_stmt 0
 1019 0076 3B1C     		mov	r3, r7
 1020 0078 0E33     		add	r3, r3, #14
 1021 007a 0021     		mov	r1, #0
 1022 007c 5A5E     		ldrsh	r2, [r3, r1]
 1023 007e 0B4B     		ldr	r3, .L78+4
 1024 0080 9A42     		cmp	r2, r3
 1025 0082 E8DD     		ble	.L75
 1026 0084 00E0     		b	.L74
 1027              	.L77:
 1028              		.loc 1 364 0 is_stmt 1
 1029 0086 C046     		mov	r8, r8
 1030              	.L74:
 365:../Sources/TFC/TFC_CrystalClock.c ****   }
 366:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 1031              		.loc 1 366 0
 1032 0088 074B     		ldr	r3, .L78
 1033 008a 9B79     		ldrb	r3, [r3, #6]
 1034 008c DBB2     		uxtb	r3, r3
 1035 008e 1A1C     		mov	r2, r3
 1036 0090 0C23     		mov	r3, #12
 1037 0092 1340     		and	r3, r2
 1038 0094 9B08     		lsr	r3, r3, #2
 1039 0096 022B     		cmp	r3, #2
 1040 0098 01D0     		beq	.L76
 1041              		.loc 1 366 0 is_stmt 0
 1042 009a 1A23     		mov	r3, #26
 1043 009c 00E0     		b	.L71
 1044              	.L76:
 367:../Sources/TFC/TFC_CrystalClock.c **** 
 368:../Sources/TFC/TFC_CrystalClock.c **** // Now in PBE mode  
 369:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 1045              		.loc 1 369 0 is_stmt 1
 1046 009e 7B68     		ldr	r3, [r7, #4]
 1047              	.L71:
 370:../Sources/TFC/TFC_CrystalClock.c **** } // pee_pbe
 1048              		.loc 1 370 0
 1049 00a0 181C     		mov	r0, r3
 1050 00a2 BD46     		mov	sp, r7
 1051 00a4 04B0     		add	sp, sp, #16
 1052              		@ sp needed for prologue
 1053 00a6 80BD     		pop	{r7, pc}
 1054              	.L79:
 1055              		.align	2
 1056              	.L78:
 1057 00a8 00400640 		.word	1074151424
 1058 00ac CF070000 		.word	1999
 1059              		.cfi_endproc
 1060              	.LFE2:
 1062              		.section	.text.pbe_pee,"ax",%progbits
 1063              		.align	2
 1064              		.global	pbe_pee
 1065              		.code	16
 1066              		.thumb_func
 1068              	pbe_pee:
 1069              	.LFB3:
 371:../Sources/TFC/TFC_CrystalClock.c **** 
 372:../Sources/TFC/TFC_CrystalClock.c **** 
 373:../Sources/TFC/TFC_CrystalClock.c **** int pbe_pee(int crystal_val)
 374:../Sources/TFC/TFC_CrystalClock.c **** {
 1070              		.loc 1 374 0
 1071              		.cfi_startproc
 1072 0000 80B5     		push	{r7, lr}
 1073              	.LCFI9:
 1074              		.cfi_def_cfa_offset 8
 1075              		.cfi_offset 7, -8
 1076              		.cfi_offset 14, -4
 1077 0002 84B0     		sub	sp, sp, #16
 1078              	.LCFI10:
 1079              		.cfi_def_cfa_offset 24
 1080 0004 00AF     		add	r7, sp, #0
 1081              	.LCFI11:
 1082              		.cfi_def_cfa_register 7
 1083 0006 7860     		str	r0, [r7, #4]
 375:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char prdiv, vdiv;
 376:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 377:../Sources/TFC/TFC_CrystalClock.c **** 
 378:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PBE mode
 379:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1084              		.loc 1 379 0
 1085 0008 4C4B     		ldr	r3, .L96
 1086 000a 9B79     		ldrb	r3, [r3, #6]
 1087 000c DBB2     		uxtb	r3, r3
 1088 000e 1A1C     		mov	r2, r3
 1089 0010 0C23     		mov	r3, #12
 1090 0012 1340     		and	r3, r2
 1091 0014 9B08     		lsr	r3, r3, #2
 1092 0016 022B     		cmp	r3, #2
 1093 0018 14D1     		bne	.L81
 380:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1094              		.loc 1 380 0
 1095 001a 484B     		ldr	r3, .L96
 1096 001c 9B79     		ldrb	r3, [r3, #6]
 1097 001e DBB2     		uxtb	r3, r3
 1098 0020 1A1C     		mov	r2, r3
 1099 0022 1023     		mov	r3, #16
 1100 0024 1340     		and	r3, r2
 379:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1101              		.loc 1 379 0
 1102 0026 0DD1     		bne	.L81
 381:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1103              		.loc 1 381 0
 1104 0028 444B     		ldr	r3, .L96
 1105 002a 9B79     		ldrb	r3, [r3, #6]
 1106 002c DBB2     		uxtb	r3, r3
 1107 002e 1A1C     		mov	r2, r3
 1108 0030 2023     		mov	r3, #32
 1109 0032 1340     		and	r3, r2
 380:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1110              		.loc 1 380 0
 1111 0034 06D0     		beq	.L81
 382:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1112              		.loc 1 382 0
 1113 0036 414B     		ldr	r3, .L96
 1114 0038 5B78     		ldrb	r3, [r3, #1]
 1115 003a DBB2     		uxtb	r3, r3
 1116 003c 1A1C     		mov	r2, r3
 1117 003e 0223     		mov	r3, #2
 1118 0040 1340     		and	r3, r2
 379:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1119              		.loc 1 379 0
 1120 0042 01D0     		beq	.L82
 1121              	.L81:
 383:../Sources/TFC/TFC_CrystalClock.c ****   {
 384:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1122              		.loc 1 384 0
 1123 0044 0723     		mov	r3, #7
 1124 0046 75E0     		b	.L83
 1125              	.L82:
 385:../Sources/TFC/TFC_CrystalClock.c ****   }
 386:../Sources/TFC/TFC_CrystalClock.c **** 
 387:../Sources/TFC/TFC_CrystalClock.c ****   // As the PLL settings have already been checked when PBE mode was enterred they are not checked 
 388:../Sources/TFC/TFC_CrystalClock.c **** 
 389:../Sources/TFC/TFC_CrystalClock.c ****   // Check the PLL state before transitioning to PEE mode
 390:../Sources/TFC/TFC_CrystalClock.c ****   
 391:../Sources/TFC/TFC_CrystalClock.c ****   // Check LOCK bit is set before transitioning MCG to PLL output (already checked in fbe_pbe but g
 392:../Sources/TFC/TFC_CrystalClock.c ****   // to re-check before switch to use PLL)
 393:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1126              		.loc 1 393 0
 1127 0048 3B1C     		mov	r3, r7
 1128 004a 0E33     		add	r3, r3, #14
 1129 004c 0022     		mov	r2, #0
 1130 004e 1A80     		strh	r2, [r3]
 1131 0050 0DE0     		b	.L84
 1132              	.L87:
 394:../Sources/TFC/TFC_CrystalClock.c ****   {
 395:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 1133              		.loc 1 395 0
 1134 0052 3A4B     		ldr	r3, .L96
 1135 0054 9B79     		ldrb	r3, [r3, #6]
 1136 0056 DBB2     		uxtb	r3, r3
 1137 0058 1A1C     		mov	r2, r3
 1138 005a 4023     		mov	r3, #64
 1139 005c 1340     		and	r3, r2
 1140 005e 0ED1     		bne	.L94
 1141              	.L85:
 393:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1142              		.loc 1 393 0
 1143 0060 3B1C     		mov	r3, r7
 1144 0062 0E33     		add	r3, r3, #14
 1145 0064 3A1C     		mov	r2, r7
 1146 0066 0E32     		add	r2, r2, #14
 1147 0068 1288     		ldrh	r2, [r2]
 1148 006a 0132     		add	r2, r2, #1
 1149 006c 1A80     		strh	r2, [r3]
 1150              	.L84:
 393:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1151              		.loc 1 393 0 is_stmt 0
 1152 006e 3B1C     		mov	r3, r7
 1153 0070 0E33     		add	r3, r3, #14
 1154 0072 0021     		mov	r1, #0
 1155 0074 5A5E     		ldrsh	r2, [r3, r1]
 1156 0076 324B     		ldr	r3, .L96+4
 1157 0078 9A42     		cmp	r2, r3
 1158 007a EADD     		ble	.L87
 1159 007c 00E0     		b	.L86
 1160              	.L94:
 1161              		.loc 1 395 0 is_stmt 1
 1162 007e C046     		mov	r8, r8
 1163              	.L86:
 396:../Sources/TFC/TFC_CrystalClock.c ****   }
 397:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 1164              		.loc 1 397 0
 1165 0080 2E4B     		ldr	r3, .L96
 1166 0082 9B79     		ldrb	r3, [r3, #6]
 1167 0084 DBB2     		uxtb	r3, r3
 1168 0086 1A1C     		mov	r2, r3
 1169 0088 4023     		mov	r3, #64
 1170 008a 1340     		and	r3, r2
 1171 008c 01D1     		bne	.L88
 1172              		.loc 1 397 0 is_stmt 0
 1173 008e 4423     		mov	r3, #68
 1174 0090 50E0     		b	.L83
 1175              	.L88:
 398:../Sources/TFC/TFC_CrystalClock.c ****   // Use actual PLL settings to calculate PLL frequency
 399:../Sources/TFC/TFC_CrystalClock.c ****   prdiv = ((MCG_C5 & MCG_C5_PRDIV0_MASK) + 1);
 1176              		.loc 1 399 0 is_stmt 1
 1177 0092 2A4B     		ldr	r3, .L96
 1178 0094 1B79     		ldrb	r3, [r3, #4]
 1179 0096 DAB2     		uxtb	r2, r3
 1180 0098 1F23     		mov	r3, #31
 1181 009a 1340     		and	r3, r2
 1182 009c DAB2     		uxtb	r2, r3
 1183 009e 3B1C     		mov	r3, r7
 1184 00a0 0D33     		add	r3, r3, #13
 1185 00a2 0132     		add	r2, r2, #1
 1186 00a4 1A70     		strb	r2, [r3]
 400:../Sources/TFC/TFC_CrystalClock.c ****   vdiv = ((MCG_C6 & MCG_C6_VDIV0_MASK) + 24);
 1187              		.loc 1 400 0
 1188 00a6 254B     		ldr	r3, .L96
 1189 00a8 5B79     		ldrb	r3, [r3, #5]
 1190 00aa DAB2     		uxtb	r2, r3
 1191 00ac 1F23     		mov	r3, #31
 1192 00ae 1340     		and	r3, r2
 1193 00b0 DAB2     		uxtb	r2, r3
 1194 00b2 3B1C     		mov	r3, r7
 1195 00b4 0C33     		add	r3, r3, #12
 1196 00b6 1832     		add	r2, r2, #24
 1197 00b8 1A70     		strb	r2, [r3]
 401:../Sources/TFC/TFC_CrystalClock.c ****   
 402:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to switch CLKS mux to select PLL as MCG_OUT
 1198              		.loc 1 402 0
 1199 00ba 204B     		ldr	r3, .L96
 1200 00bc 1F4A     		ldr	r2, .L96
 1201 00be 1278     		ldrb	r2, [r2]
 1202 00c0 D1B2     		uxtb	r1, r2
 1203 00c2 3F22     		mov	r2, #63
 1204 00c4 0A40     		and	r2, r1
 1205 00c6 D2B2     		uxtb	r2, r2
 1206 00c8 1A70     		strb	r2, [r3]
 403:../Sources/TFC/TFC_CrystalClock.c **** 
 404:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for clock status bits to update
 405:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1207              		.loc 1 405 0
 1208 00ca 3B1C     		mov	r3, r7
 1209 00cc 0E33     		add	r3, r3, #14
 1210 00ce 0022     		mov	r2, #0
 1211 00d0 1A80     		strh	r2, [r3]
 1212 00d2 0FE0     		b	.L89
 1213              	.L92:
 406:../Sources/TFC/TFC_CrystalClock.c ****   {
 407:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break; // jump out early if CLKST
 1214              		.loc 1 407 0
 1215 00d4 194B     		ldr	r3, .L96
 1216 00d6 9B79     		ldrb	r3, [r3, #6]
 1217 00d8 DBB2     		uxtb	r3, r3
 1218 00da 1A1C     		mov	r2, r3
 1219 00dc 0C23     		mov	r3, #12
 1220 00de 1340     		and	r3, r2
 1221 00e0 9B08     		lsr	r3, r3, #2
 1222 00e2 032B     		cmp	r3, #3
 1223 00e4 0ED0     		beq	.L95
 1224              	.L90:
 405:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1225              		.loc 1 405 0
 1226 00e6 3B1C     		mov	r3, r7
 1227 00e8 0E33     		add	r3, r3, #14
 1228 00ea 3A1C     		mov	r2, r7
 1229 00ec 0E32     		add	r2, r2, #14
 1230 00ee 1288     		ldrh	r2, [r2]
 1231 00f0 0132     		add	r2, r2, #1
 1232 00f2 1A80     		strh	r2, [r3]
 1233              	.L89:
 405:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1234              		.loc 1 405 0 is_stmt 0
 1235 00f4 3B1C     		mov	r3, r7
 1236 00f6 0E33     		add	r3, r3, #14
 1237 00f8 0021     		mov	r1, #0
 1238 00fa 5A5E     		ldrsh	r2, [r3, r1]
 1239 00fc 104B     		ldr	r3, .L96+4
 1240 00fe 9A42     		cmp	r2, r3
 1241 0100 E8DD     		ble	.L92
 1242 0102 00E0     		b	.L91
 1243              	.L95:
 1244              		.loc 1 407 0 is_stmt 1
 1245 0104 C046     		mov	r8, r8
 1246              	.L91:
 408:../Sources/TFC/TFC_CrystalClock.c ****   }
 409:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) return 0x1B; // check CLKST is set 
 1247              		.loc 1 409 0
 1248 0106 0D4B     		ldr	r3, .L96
 1249 0108 9B79     		ldrb	r3, [r3, #6]
 1250 010a DBB2     		uxtb	r3, r3
 1251 010c 1A1C     		mov	r2, r3
 1252 010e 0C23     		mov	r3, #12
 1253 0110 1340     		and	r3, r2
 1254 0112 9B08     		lsr	r3, r3, #2
 1255 0114 032B     		cmp	r3, #3
 1256 0116 01D0     		beq	.L93
 1257              		.loc 1 409 0 is_stmt 0
 1258 0118 1B23     		mov	r3, #27
 1259 011a 0BE0     		b	.L83
 1260              	.L93:
 410:../Sources/TFC/TFC_CrystalClock.c **** 
 411:../Sources/TFC/TFC_CrystalClock.c ****   // Now in PEE
 412:../Sources/TFC/TFC_CrystalClock.c ****   return ((crystal_val / prdiv) * vdiv); //MCGOUT equals PLL output frequency
 1261              		.loc 1 412 0 is_stmt 1
 1262 011c 3B1C     		mov	r3, r7
 1263 011e 0D33     		add	r3, r3, #13
 1264 0120 1B78     		ldrb	r3, [r3]
 1265 0122 7868     		ldr	r0, [r7, #4]
 1266 0124 191C     		mov	r1, r3
 1267 0126 FFF7FEFF 		bl	__aeabi_idiv
 1268 012a 031C     		mov	r3, r0
 1269 012c 3A1C     		mov	r2, r7
 1270 012e 0C32     		add	r2, r2, #12
 1271 0130 1278     		ldrb	r2, [r2]
 1272 0132 5343     		mul	r3, r2
 1273              	.L83:
 413:../Sources/TFC/TFC_CrystalClock.c ****   
 414:../Sources/TFC/TFC_CrystalClock.c **** }  // pbe_pee
 1274              		.loc 1 414 0
 1275 0134 181C     		mov	r0, r3
 1276 0136 BD46     		mov	sp, r7
 1277 0138 04B0     		add	sp, sp, #16
 1278              		@ sp needed for prologue
 1279 013a 80BD     		pop	{r7, pc}
 1280              	.L97:
 1281              		.align	2
 1282              	.L96:
 1283 013c 00400640 		.word	1074151424
 1284 0140 CF070000 		.word	1999
 1285              		.cfi_endproc
 1286              	.LFE3:
 1288              		.section	.text.pbe_fbe,"ax",%progbits
 1289              		.align	2
 1290              		.global	pbe_fbe
 1291              		.code	16
 1292              		.thumb_func
 1294              	pbe_fbe:
 1295              	.LFB4:
 415:../Sources/TFC/TFC_CrystalClock.c **** 
 416:../Sources/TFC/TFC_CrystalClock.c **** 
 417:../Sources/TFC/TFC_CrystalClock.c **** int pbe_fbe(int crystal_val)
 418:../Sources/TFC/TFC_CrystalClock.c **** {
 1296              		.loc 1 418 0
 1297              		.cfi_startproc
 1298 0000 80B5     		push	{r7, lr}
 1299              	.LCFI12:
 1300              		.cfi_def_cfa_offset 8
 1301              		.cfi_offset 7, -8
 1302              		.cfi_offset 14, -4
 1303 0002 84B0     		sub	sp, sp, #16
 1304              	.LCFI13:
 1305              		.cfi_def_cfa_offset 24
 1306 0004 00AF     		add	r7, sp, #0
 1307              	.LCFI14:
 1308              		.cfi_def_cfa_register 7
 1309 0006 7860     		str	r0, [r7, #4]
 419:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 420:../Sources/TFC/TFC_CrystalClock.c ****   
 421:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PBE mode
 422:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1310              		.loc 1 422 0
 1311 0008 284B     		ldr	r3, .L108
 1312 000a 9B79     		ldrb	r3, [r3, #6]
 1313 000c DBB2     		uxtb	r3, r3
 1314 000e 1A1C     		mov	r2, r3
 1315 0010 0C23     		mov	r3, #12
 1316 0012 1340     		and	r3, r2
 1317 0014 9B08     		lsr	r3, r3, #2
 1318 0016 022B     		cmp	r3, #2
 1319 0018 14D1     		bne	.L99
 423:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1320              		.loc 1 423 0
 1321 001a 244B     		ldr	r3, .L108
 1322 001c 9B79     		ldrb	r3, [r3, #6]
 1323 001e DBB2     		uxtb	r3, r3
 1324 0020 1A1C     		mov	r2, r3
 1325 0022 1023     		mov	r3, #16
 1326 0024 1340     		and	r3, r2
 422:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1327              		.loc 1 422 0
 1328 0026 0DD1     		bne	.L99
 424:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1329              		.loc 1 424 0
 1330 0028 204B     		ldr	r3, .L108
 1331 002a 9B79     		ldrb	r3, [r3, #6]
 1332 002c DBB2     		uxtb	r3, r3
 1333 002e 1A1C     		mov	r2, r3
 1334 0030 2023     		mov	r3, #32
 1335 0032 1340     		and	r3, r2
 423:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1336              		.loc 1 423 0
 1337 0034 06D0     		beq	.L99
 425:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1338              		.loc 1 425 0
 1339 0036 1D4B     		ldr	r3, .L108
 1340 0038 5B78     		ldrb	r3, [r3, #1]
 1341 003a DBB2     		uxtb	r3, r3
 1342 003c 1A1C     		mov	r2, r3
 1343 003e 0223     		mov	r3, #2
 1344 0040 1340     		and	r3, r2
 422:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1345              		.loc 1 422 0
 1346 0042 01D0     		beq	.L100
 1347              	.L99:
 426:../Sources/TFC/TFC_CrystalClock.c ****   {
 427:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1348              		.loc 1 427 0
 1349 0044 0723     		mov	r3, #7
 1350 0046 2DE0     		b	.L101
 1351              	.L100:
 428:../Sources/TFC/TFC_CrystalClock.c ****   }
 429:../Sources/TFC/TFC_CrystalClock.c **** 
 430:../Sources/TFC/TFC_CrystalClock.c **** // As we are running from the ext clock, by default the external clock settings are valid
 431:../Sources/TFC/TFC_CrystalClock.c **** // To move to FBE from PBE simply requires the switching of the PLLS mux to disable the PLL 
 432:../Sources/TFC/TFC_CrystalClock.c ****   
 433:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to disable PLL, still clocked from ext ref clk
 1352              		.loc 1 433 0
 1353 0048 184B     		ldr	r3, .L108
 1354 004a 184A     		ldr	r2, .L108
 1355 004c 5279     		ldrb	r2, [r2, #5]
 1356 004e D2B2     		uxtb	r2, r2
 1357 0050 4021     		mov	r1, #64
 1358 0052 8A43     		bic	r2, r1
 1359 0054 D2B2     		uxtb	r2, r2
 1360 0056 5A71     		strb	r2, [r3, #5]
 434:../Sources/TFC/TFC_CrystalClock.c ****   
 435:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to set
 436:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1361              		.loc 1 436 0
 1362 0058 3B1C     		mov	r3, r7
 1363 005a 0E33     		add	r3, r3, #14
 1364 005c 0022     		mov	r2, #0
 1365 005e 1A80     		strh	r2, [r3]
 1366 0060 0DE0     		b	.L102
 1367              	.L105:
 437:../Sources/TFC/TFC_CrystalClock.c ****   {
 438:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
 1368              		.loc 1 438 0
 1369 0062 124B     		ldr	r3, .L108
 1370 0064 9B79     		ldrb	r3, [r3, #6]
 1371 0066 DBB2     		uxtb	r3, r3
 1372 0068 1A1C     		mov	r2, r3
 1373 006a 2023     		mov	r3, #32
 1374 006c 1340     		and	r3, r2
 1375 006e 0ED0     		beq	.L107
 1376              	.L103:
 436:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1377              		.loc 1 436 0
 1378 0070 3B1C     		mov	r3, r7
 1379 0072 0E33     		add	r3, r3, #14
 1380 0074 3A1C     		mov	r2, r7
 1381 0076 0E32     		add	r2, r2, #14
 1382 0078 1288     		ldrh	r2, [r2]
 1383 007a 0132     		add	r2, r2, #1
 1384 007c 1A80     		strh	r2, [r3]
 1385              	.L102:
 436:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1386              		.loc 1 436 0 is_stmt 0
 1387 007e 3B1C     		mov	r3, r7
 1388 0080 0E33     		add	r3, r3, #14
 1389 0082 0021     		mov	r1, #0
 1390 0084 5A5E     		ldrsh	r2, [r3, r1]
 1391 0086 0A4B     		ldr	r3, .L108+4
 1392 0088 9A42     		cmp	r2, r3
 1393 008a EADD     		ble	.L105
 1394 008c 00E0     		b	.L104
 1395              	.L107:
 1396              		.loc 1 438 0 is_stmt 1
 1397 008e C046     		mov	r8, r8
 1398              	.L104:
 439:../Sources/TFC/TFC_CrystalClock.c ****   }
 440:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if 
 1399              		.loc 1 440 0
 1400 0090 064B     		ldr	r3, .L108
 1401 0092 9B79     		ldrb	r3, [r3, #6]
 1402 0094 DBB2     		uxtb	r3, r3
 1403 0096 1A1C     		mov	r2, r3
 1404 0098 2023     		mov	r3, #32
 1405 009a 1340     		and	r3, r2
 1406 009c 01D0     		beq	.L106
 1407              		.loc 1 440 0 is_stmt 0
 1408 009e 1523     		mov	r3, #21
 1409 00a0 00E0     		b	.L101
 1410              	.L106:
 441:../Sources/TFC/TFC_CrystalClock.c **** 
 442:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE mode  
 443:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency 
 1411              		.loc 1 443 0 is_stmt 1
 1412 00a2 7B68     		ldr	r3, [r7, #4]
 1413              	.L101:
 444:../Sources/TFC/TFC_CrystalClock.c **** } // pbe_fbe
 1414              		.loc 1 444 0
 1415 00a4 181C     		mov	r0, r3
 1416 00a6 BD46     		mov	sp, r7
 1417 00a8 04B0     		add	sp, sp, #16
 1418              		@ sp needed for prologue
 1419 00aa 80BD     		pop	{r7, pc}
 1420              	.L109:
 1421              		.align	2
 1422              	.L108:
 1423 00ac 00400640 		.word	1074151424
 1424 00b0 CF070000 		.word	1999
 1425              		.cfi_endproc
 1426              	.LFE4:
 1428              		.section	.text.fbe_pbe,"ax",%progbits
 1429              		.align	2
 1430              		.global	fbe_pbe
 1431              		.code	16
 1432              		.thumb_func
 1434              	fbe_pbe:
 1435              	.LFB5:
 445:../Sources/TFC/TFC_CrystalClock.c **** 
 446:../Sources/TFC/TFC_CrystalClock.c **** 
 447:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 448:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fbe_pbe
 449:../Sources/TFC/TFC_CrystalClock.c ****  *
 450:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FBE to PBE mode
 451:../Sources/TFC/TFC_CrystalClock.c ****  *
 452:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FBE mode to PBE mode. 
 453:../Sources/TFC/TFC_CrystalClock.c ****  * This function presently only supports OSC0 and PLL0. Support for OSC1 and PLL1 will be added soo
 454:../Sources/TFC/TFC_CrystalClock.c ****  * The function requires the desired OSC and PLL be passed in to it for compatibility with the
 455:../Sources/TFC/TFC_CrystalClock.c ****  * future support of OSC/PLL selection
 456:../Sources/TFC/TFC_CrystalClock.c ****  *
 457:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
 458:../Sources/TFC/TFC_CrystalClock.c ****  *             prdiv_val   - value to divide the external clock source by to create the desired
 459:../Sources/TFC/TFC_CrystalClock.c ****  *                           PLL reference clock frequency
 460:../Sources/TFC/TFC_CrystalClock.c ****  *             vdiv_val    - value to multiply the PLL reference clock frequency by
 461:../Sources/TFC/TFC_CrystalClock.c ****  *
 462:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
 463:../Sources/TFC/TFC_CrystalClock.c ****  */
 464:../Sources/TFC/TFC_CrystalClock.c **** int fbe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
 465:../Sources/TFC/TFC_CrystalClock.c **** {
 1436              		.loc 1 465 0
 1437              		.cfi_startproc
 1438 0000 80B5     		push	{r7, lr}
 1439              	.LCFI15:
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 7, -8
 1442              		.cfi_offset 14, -4
 1443 0002 86B0     		sub	sp, sp, #24
 1444              	.LCFI16:
 1445              		.cfi_def_cfa_offset 32
 1446 0004 00AF     		add	r7, sp, #0
 1447              	.LCFI17:
 1448              		.cfi_def_cfa_register 7
 1449 0006 7860     		str	r0, [r7, #4]
 1450 0008 FB1C     		add	r3, r7, #3
 1451 000a 1970     		strb	r1, [r3]
 1452 000c BB1C     		add	r3, r7, #2
 1453 000e 1A70     		strb	r2, [r3]
 466:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 467:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 468:../Sources/TFC/TFC_CrystalClock.c ****   int pll_freq;
 469:../Sources/TFC/TFC_CrystalClock.c ****   
 470:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 471:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1454              		.loc 1 471 0
 1455 0010 7D4B     		ldr	r3, .L134
 1456 0012 9B79     		ldrb	r3, [r3, #6]
 1457 0014 DBB2     		uxtb	r3, r3
 1458 0016 1A1C     		mov	r2, r3
 1459 0018 0C23     		mov	r3, #12
 1460 001a 1340     		and	r3, r2
 1461 001c 9B08     		lsr	r3, r3, #2
 1462 001e 022B     		cmp	r3, #2
 1463 0020 14D1     		bne	.L111
 472:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1464              		.loc 1 472 0
 1465 0022 794B     		ldr	r3, .L134
 1466 0024 9B79     		ldrb	r3, [r3, #6]
 1467 0026 DBB2     		uxtb	r3, r3
 1468 0028 1A1C     		mov	r2, r3
 1469 002a 1023     		mov	r3, #16
 1470 002c 1340     		and	r3, r2
 471:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1471              		.loc 1 471 0
 1472 002e 0DD1     		bne	.L111
 473:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 1473              		.loc 1 473 0
 1474 0030 754B     		ldr	r3, .L134
 1475 0032 9B79     		ldrb	r3, [r3, #6]
 1476 0034 DBB2     		uxtb	r3, r3
 1477 0036 1A1C     		mov	r2, r3
 1478 0038 2023     		mov	r3, #32
 1479 003a 1340     		and	r3, r2
 472:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1480              		.loc 1 472 0
 1481 003c 06D1     		bne	.L111
 474:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1482              		.loc 1 474 0
 1483 003e 724B     		ldr	r3, .L134
 1484 0040 5B78     		ldrb	r3, [r3, #1]
 1485 0042 DBB2     		uxtb	r3, r3
 1486 0044 1A1C     		mov	r2, r3
 1487 0046 0223     		mov	r3, #2
 1488 0048 1340     		and	r3, r2
 471:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1489              		.loc 1 471 0
 1490 004a 01D0     		beq	.L112
 1491              	.L111:
 475:../Sources/TFC/TFC_CrystalClock.c ****   {
 476:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 1492              		.loc 1 476 0
 1493 004c 0423     		mov	r3, #4
 1494 004e D6E0     		b	.L113
 1495              	.L112:
 477:../Sources/TFC/TFC_CrystalClock.c ****   }
 478:../Sources/TFC/TFC_CrystalClock.c ****   
 479:../Sources/TFC/TFC_CrystalClock.c **** // As the external frequency has already been checked when FBE mode was enterred it is not checked 
 480:../Sources/TFC/TFC_CrystalClock.c **** 
 481:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL divider settings are within spec.
 482:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 1496              		.loc 1 482 0
 1497 0050 FB1C     		add	r3, r7, #3
 1498 0052 1B78     		ldrb	r3, [r3]
 1499 0054 5BB2     		sxtb	r3, r3
 1500 0056 002B     		cmp	r3, #0
 1501 0058 04DD     		ble	.L114
 1502              		.loc 1 482 0 is_stmt 0
 1503 005a FB1C     		add	r3, r7, #3
 1504 005c 1B78     		ldrb	r3, [r3]
 1505 005e 5BB2     		sxtb	r3, r3
 1506 0060 192B     		cmp	r3, #25
 1507 0062 01DD     		ble	.L115
 1508              	.L114:
 1509              		.loc 1 482 0
 1510 0064 4123     		mov	r3, #65
 1511 0066 CAE0     		b	.L113
 1512              	.L115:
 483:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
 1513              		.loc 1 483 0 is_stmt 1
 1514 0068 BB1C     		add	r3, r7, #2
 1515 006a 1B78     		ldrb	r3, [r3]
 1516 006c 5BB2     		sxtb	r3, r3
 1517 006e 172B     		cmp	r3, #23
 1518 0070 04DD     		ble	.L116
 1519              		.loc 1 483 0 is_stmt 0
 1520 0072 BB1C     		add	r3, r7, #2
 1521 0074 1B78     		ldrb	r3, [r3]
 1522 0076 5BB2     		sxtb	r3, r3
 1523 0078 322B     		cmp	r3, #50
 1524 007a 01DD     		ble	.L117
 1525              	.L116:
 1526              		.loc 1 483 0
 1527 007c 4223     		mov	r3, #66
 1528 007e BEE0     		b	.L113
 1529              	.L117:
 484:../Sources/TFC/TFC_CrystalClock.c ****   
 485:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL reference clock frequency is within spec.
 486:../Sources/TFC/TFC_CrystalClock.c ****   if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;
 1530              		.loc 1 486 0 is_stmt 1
 1531 0080 FB1C     		add	r3, r7, #3
 1532 0082 1B78     		ldrb	r3, [r3]
 1533 0084 5BB2     		sxtb	r3, r3
 1534 0086 7868     		ldr	r0, [r7, #4]
 1535 0088 191C     		mov	r1, r3
 1536 008a FFF7FEFF 		bl	__aeabi_idiv
 1537 008e 031C     		mov	r3, r0
 1538 0090 1A1C     		mov	r2, r3
 1539 0092 5E4B     		ldr	r3, .L134+4
 1540 0094 9A42     		cmp	r2, r3
 1541 0096 0BDD     		ble	.L118
 1542              		.loc 1 486 0 is_stmt 0
 1543 0098 FB1C     		add	r3, r7, #3
 1544 009a 1B78     		ldrb	r3, [r3]
 1545 009c 5BB2     		sxtb	r3, r3
 1546 009e 7868     		ldr	r0, [r7, #4]
 1547 00a0 191C     		mov	r1, r3
 1548 00a2 FFF7FEFF 		bl	__aeabi_idiv
 1549 00a6 031C     		mov	r3, r0
 1550 00a8 1A1C     		mov	r2, r3
 1551 00aa 594B     		ldr	r3, .L134+8
 1552 00ac 9A42     		cmp	r2, r3
 1553 00ae 01DD     		ble	.L119
 1554              	.L118:
 1555              		.loc 1 486 0
 1556 00b0 4323     		mov	r3, #67
 1557 00b2 A4E0     		b	.L113
 1558              	.L119:
 487:../Sources/TFC/TFC_CrystalClock.c ****        
 488:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL output frequency is within spec.
 489:../Sources/TFC/TFC_CrystalClock.c ****   pll_freq = (crystal_val / prdiv_val) * vdiv_val;
 1559              		.loc 1 489 0 is_stmt 1
 1560 00b4 FB1C     		add	r3, r7, #3
 1561 00b6 1B78     		ldrb	r3, [r3]
 1562 00b8 5BB2     		sxtb	r3, r3
 1563 00ba 7868     		ldr	r0, [r7, #4]
 1564 00bc 191C     		mov	r1, r3
 1565 00be FFF7FEFF 		bl	__aeabi_idiv
 1566 00c2 031C     		mov	r3, r0
 1567 00c4 BA1C     		add	r2, r7, #2
 1568 00c6 1278     		ldrb	r2, [r2]
 1569 00c8 52B2     		sxtb	r2, r2
 1570 00ca 5343     		mul	r3, r2
 1571 00cc 3B61     		str	r3, [r7, #16]
 490:../Sources/TFC/TFC_CrystalClock.c ****   if ((pll_freq < 48000000) || (pll_freq > 100000000)) {return 0x45;}
 1572              		.loc 1 490 0
 1573 00ce 3A69     		ldr	r2, [r7, #16]
 1574 00d0 504B     		ldr	r3, .L134+12
 1575 00d2 9A42     		cmp	r2, r3
 1576 00d4 03DD     		ble	.L120
 1577              		.loc 1 490 0 is_stmt 0
 1578 00d6 3A69     		ldr	r2, [r7, #16]
 1579 00d8 4F4B     		ldr	r3, .L134+16
 1580 00da 9A42     		cmp	r2, r3
 1581 00dc 01DD     		ble	.L121
 1582              	.L120:
 1583              		.loc 1 490 0
 1584 00de 4523     		mov	r3, #69
 1585 00e0 8DE0     		b	.L113
 1586              	.L121:
 491:../Sources/TFC/TFC_CrystalClock.c **** 
 492:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C5
 493:../Sources/TFC/TFC_CrystalClock.c ****   // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user co
 494:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 1587              		.loc 1 494 0 is_stmt 1
 1588 00e2 494A     		ldr	r2, .L134
 1589 00e4 3B1C     		mov	r3, r7
 1590 00e6 0F33     		add	r3, r3, #15
 1591 00e8 1279     		ldrb	r2, [r2, #4]
 1592 00ea 1A70     		strb	r2, [r3]
 495:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 1593              		.loc 1 495 0
 1594 00ec 3B1C     		mov	r3, r7
 1595 00ee 0F33     		add	r3, r3, #15
 1596 00f0 3A1C     		mov	r2, r7
 1597 00f2 0F32     		add	r2, r2, #15
 1598 00f4 1278     		ldrb	r2, [r2]
 1599 00f6 1F21     		mov	r1, #31
 1600 00f8 8A43     		bic	r2, r1
 1601 00fa 1A70     		strb	r2, [r3]
 496:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 1602              		.loc 1 496 0
 1603 00fc FB1C     		add	r3, r7, #3
 1604 00fe 1B78     		ldrb	r3, [r3]
 1605 0100 013B     		sub	r3, r3, #1
 1606 0102 DAB2     		uxtb	r2, r3
 1607 0104 1F23     		mov	r3, #31
 1608 0106 1340     		and	r3, r2
 1609 0108 D9B2     		uxtb	r1, r3
 1610 010a 3B1C     		mov	r3, r7
 1611 010c 0F33     		add	r3, r3, #15
 1612 010e 3A1C     		mov	r2, r7
 1613 0110 0F32     		add	r2, r2, #15
 1614 0112 1278     		ldrb	r2, [r2]
 1615 0114 0A43     		orr	r2, r1
 1616 0116 1A70     		strb	r2, [r3]
 497:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 1617              		.loc 1 497 0
 1618 0118 3B4B     		ldr	r3, .L134
 1619 011a 3A1C     		mov	r2, r7
 1620 011c 0F32     		add	r2, r2, #15
 1621 011e 1278     		ldrb	r2, [r2]
 1622 0120 1A71     		strb	r2, [r3, #4]
 498:../Sources/TFC/TFC_CrystalClock.c **** 
 499:../Sources/TFC/TFC_CrystalClock.c ****   // Configure MCG_C6
 500:../Sources/TFC/TFC_CrystalClock.c ****   // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
 501:../Sources/TFC/TFC_CrystalClock.c ****   // The clock monitor is not enabled here as it has likely been enabled previously and so the valu
 502:../Sources/TFC/TFC_CrystalClock.c ****   // is not altered here.
 503:../Sources/TFC/TFC_CrystalClock.c ****   // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 504:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 1623              		.loc 1 504 0
 1624 0122 394A     		ldr	r2, .L134
 1625 0124 3B1C     		mov	r3, r7
 1626 0126 0F33     		add	r3, r3, #15
 1627 0128 5279     		ldrb	r2, [r2, #5]
 1628 012a 1A70     		strb	r2, [r3]
 505:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 1629              		.loc 1 505 0
 1630 012c 3B1C     		mov	r3, r7
 1631 012e 0F33     		add	r3, r3, #15
 1632 0130 3A1C     		mov	r2, r7
 1633 0132 0F32     		add	r2, r2, #15
 1634 0134 1278     		ldrb	r2, [r2]
 1635 0136 1F21     		mov	r1, #31
 1636 0138 8A43     		bic	r2, r1
 1637 013a 1A70     		strb	r2, [r3]
 506:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 1638              		.loc 1 506 0
 1639 013c BB1C     		add	r3, r7, #2
 1640 013e 1B78     		ldrb	r3, [r3]
 1641 0140 183B     		sub	r3, r3, #24
 1642 0142 DAB2     		uxtb	r2, r3
 1643 0144 1F23     		mov	r3, #31
 1644 0146 1340     		and	r3, r2
 1645 0148 DAB2     		uxtb	r2, r3
 1646 014a 3B1C     		mov	r3, r7
 1647 014c 0F33     		add	r3, r3, #15
 1648 014e 1B78     		ldrb	r3, [r3]
 1649 0150 1343     		orr	r3, r2
 1650 0152 DAB2     		uxtb	r2, r3
 1651 0154 3B1C     		mov	r3, r7
 1652 0156 0F33     		add	r3, r3, #15
 1653 0158 4021     		mov	r1, #64
 1654 015a 0A43     		orr	r2, r1
 1655 015c 1A70     		strb	r2, [r3]
 507:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 1656              		.loc 1 507 0
 1657 015e 2A4B     		ldr	r3, .L134
 1658 0160 3A1C     		mov	r2, r7
 1659 0162 0F32     		add	r2, r2, #15
 1660 0164 1278     		ldrb	r2, [r2]
 1661 0166 5A71     		strb	r2, [r3, #5]
 508:../Sources/TFC/TFC_CrystalClock.c ****   
 509:../Sources/TFC/TFC_CrystalClock.c ****   // wait for PLLST status bit to set
 510:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1662              		.loc 1 510 0
 1663 0168 3B1C     		mov	r3, r7
 1664 016a 1633     		add	r3, r3, #22
 1665 016c 0022     		mov	r2, #0
 1666 016e 1A80     		strh	r2, [r3]
 1667 0170 0DE0     		b	.L122
 1668              	.L125:
 511:../Sources/TFC/TFC_CrystalClock.c ****   {
 512:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 1669              		.loc 1 512 0
 1670 0172 254B     		ldr	r3, .L134
 1671 0174 9B79     		ldrb	r3, [r3, #6]
 1672 0176 DBB2     		uxtb	r3, r3
 1673 0178 1A1C     		mov	r2, r3
 1674 017a 2023     		mov	r3, #32
 1675 017c 1340     		and	r3, r2
 1676 017e 0ED1     		bne	.L132
 1677              	.L123:
 510:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1678              		.loc 1 510 0
 1679 0180 3B1C     		mov	r3, r7
 1680 0182 1633     		add	r3, r3, #22
 1681 0184 3A1C     		mov	r2, r7
 1682 0186 1632     		add	r2, r2, #22
 1683 0188 1288     		ldrh	r2, [r2]
 1684 018a 0132     		add	r2, r2, #1
 1685 018c 1A80     		strh	r2, [r3]
 1686              	.L122:
 510:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1687              		.loc 1 510 0 is_stmt 0
 1688 018e 3B1C     		mov	r3, r7
 1689 0190 1633     		add	r3, r3, #22
 1690 0192 0021     		mov	r1, #0
 1691 0194 5A5E     		ldrsh	r2, [r3, r1]
 1692 0196 214B     		ldr	r3, .L134+20
 1693 0198 9A42     		cmp	r2, r3
 1694 019a EADD     		ble	.L125
 1695 019c 00E0     		b	.L124
 1696              	.L132:
 1697              		.loc 1 512 0 is_stmt 1
 1698 019e C046     		mov	r8, r8
 1699              	.L124:
 513:../Sources/TFC/TFC_CrystalClock.c ****   }
 514:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 1700              		.loc 1 514 0
 1701 01a0 194B     		ldr	r3, .L134
 1702 01a2 9B79     		ldrb	r3, [r3, #6]
 1703 01a4 DBB2     		uxtb	r3, r3
 1704 01a6 1A1C     		mov	r2, r3
 1705 01a8 2023     		mov	r3, #32
 1706 01aa 1340     		and	r3, r2
 1707 01ac 01D1     		bne	.L126
 1708              		.loc 1 514 0 is_stmt 0
 1709 01ae 1623     		mov	r3, #22
 1710 01b0 25E0     		b	.L113
 1711              	.L126:
 515:../Sources/TFC/TFC_CrystalClock.c **** 
 516:../Sources/TFC/TFC_CrystalClock.c ****   // Wait for LOCK bit to set
 517:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1712              		.loc 1 517 0 is_stmt 1
 1713 01b2 3B1C     		mov	r3, r7
 1714 01b4 1633     		add	r3, r3, #22
 1715 01b6 0022     		mov	r2, #0
 1716 01b8 1A80     		strh	r2, [r3]
 1717 01ba 0DE0     		b	.L127
 1718              	.L130:
 518:../Sources/TFC/TFC_CrystalClock.c ****   {
 519:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 1719              		.loc 1 519 0
 1720 01bc 124B     		ldr	r3, .L134
 1721 01be 9B79     		ldrb	r3, [r3, #6]
 1722 01c0 DBB2     		uxtb	r3, r3
 1723 01c2 1A1C     		mov	r2, r3
 1724 01c4 4023     		mov	r3, #64
 1725 01c6 1340     		and	r3, r2
 1726 01c8 0ED1     		bne	.L133
 1727              	.L128:
 517:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1728              		.loc 1 517 0
 1729 01ca 3B1C     		mov	r3, r7
 1730 01cc 1633     		add	r3, r3, #22
 1731 01ce 3A1C     		mov	r2, r7
 1732 01d0 1632     		add	r2, r2, #22
 1733 01d2 1288     		ldrh	r2, [r2]
 1734 01d4 0132     		add	r2, r2, #1
 1735 01d6 1A80     		strh	r2, [r3]
 1736              	.L127:
 517:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 1737              		.loc 1 517 0 is_stmt 0
 1738 01d8 3B1C     		mov	r3, r7
 1739 01da 1633     		add	r3, r3, #22
 1740 01dc 0021     		mov	r1, #0
 1741 01de 5A5E     		ldrsh	r2, [r3, r1]
 1742 01e0 0E4B     		ldr	r3, .L134+20
 1743 01e2 9A42     		cmp	r2, r3
 1744 01e4 EADD     		ble	.L130
 1745 01e6 00E0     		b	.L129
 1746              	.L133:
 1747              		.loc 1 519 0 is_stmt 1
 1748 01e8 C046     		mov	r8, r8
 1749              	.L129:
 520:../Sources/TFC/TFC_CrystalClock.c ****   }
 521:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 1750              		.loc 1 521 0
 1751 01ea 074B     		ldr	r3, .L134
 1752 01ec 9B79     		ldrb	r3, [r3, #6]
 1753 01ee DBB2     		uxtb	r3, r3
 1754 01f0 1A1C     		mov	r2, r3
 1755 01f2 4023     		mov	r3, #64
 1756 01f4 1340     		and	r3, r2
 1757 01f6 01D1     		bne	.L131
 1758              		.loc 1 521 0 is_stmt 0
 1759 01f8 4423     		mov	r3, #68
 1760 01fa 00E0     		b	.L113
 1761              	.L131:
 522:../Sources/TFC/TFC_CrystalClock.c ****     
 523:../Sources/TFC/TFC_CrystalClock.c **** // now in PBE 
 524:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 1762              		.loc 1 524 0 is_stmt 1
 1763 01fc 7B68     		ldr	r3, [r7, #4]
 1764              	.L113:
 525:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_pbe
 1765              		.loc 1 525 0
 1766 01fe 181C     		mov	r0, r3
 1767 0200 BD46     		mov	sp, r7
 1768 0202 06B0     		add	sp, sp, #24
 1769              		@ sp needed for prologue
 1770 0204 80BD     		pop	{r7, pc}
 1771              	.L135:
 1772 0206 C046     		.align	2
 1773              	.L134:
 1774 0208 00400640 		.word	1074151424
 1775 020c 7F841E00 		.word	1999999
 1776 0210 00093D00 		.word	4000000
 1777 0214 FF6BDC02 		.word	47999999
 1778 0218 00E1F505 		.word	100000000
 1779 021c CF070000 		.word	1999
 1780              		.cfi_endproc
 1781              	.LFE5:
 1783              		.section	.text.pbe_blpe,"ax",%progbits
 1784              		.align	2
 1785              		.global	pbe_blpe
 1786              		.code	16
 1787              		.thumb_func
 1789              	pbe_blpe:
 1790              	.LFB6:
 526:../Sources/TFC/TFC_CrystalClock.c **** 
 527:../Sources/TFC/TFC_CrystalClock.c **** 
 528:../Sources/TFC/TFC_CrystalClock.c **** int pbe_blpe(int crystal_val)
 529:../Sources/TFC/TFC_CrystalClock.c **** {
 1791              		.loc 1 529 0
 1792              		.cfi_startproc
 1793 0000 80B5     		push	{r7, lr}
 1794              	.LCFI18:
 1795              		.cfi_def_cfa_offset 8
 1796              		.cfi_offset 7, -8
 1797              		.cfi_offset 14, -4
 1798 0002 82B0     		sub	sp, sp, #8
 1799              	.LCFI19:
 1800              		.cfi_def_cfa_offset 16
 1801 0004 00AF     		add	r7, sp, #0
 1802              	.LCFI20:
 1803              		.cfi_def_cfa_register 7
 1804 0006 7860     		str	r0, [r7, #4]
 530:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in PBE mode
 531:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1805              		.loc 1 531 0
 1806 0008 164B     		ldr	r3, .L140
 1807 000a 9B79     		ldrb	r3, [r3, #6]
 1808 000c DBB2     		uxtb	r3, r3
 1809 000e 1A1C     		mov	r2, r3
 1810 0010 0C23     		mov	r3, #12
 1811 0012 1340     		and	r3, r2
 1812 0014 9B08     		lsr	r3, r3, #2
 1813 0016 022B     		cmp	r3, #2
 1814 0018 14D1     		bne	.L137
 532:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1815              		.loc 1 532 0
 1816 001a 124B     		ldr	r3, .L140
 1817 001c 9B79     		ldrb	r3, [r3, #6]
 1818 001e DBB2     		uxtb	r3, r3
 1819 0020 1A1C     		mov	r2, r3
 1820 0022 1023     		mov	r3, #16
 1821 0024 1340     		and	r3, r2
 531:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1822              		.loc 1 531 0
 1823 0026 0DD1     		bne	.L137
 533:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_PLLST_MASK) &&                                   // check PLLS mux has selecte
 1824              		.loc 1 533 0
 1825 0028 0E4B     		ldr	r3, .L140
 1826 002a 9B79     		ldrb	r3, [r3, #6]
 1827 002c DBB2     		uxtb	r3, r3
 1828 002e 1A1C     		mov	r2, r3
 1829 0030 2023     		mov	r3, #32
 1830 0032 1340     		and	r3, r2
 532:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1831              		.loc 1 532 0
 1832 0034 06D0     		beq	.L137
 534:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 1833              		.loc 1 534 0
 1834 0036 0B4B     		ldr	r3, .L140
 1835 0038 5B78     		ldrb	r3, [r3, #1]
 1836 003a DBB2     		uxtb	r3, r3
 1837 003c 1A1C     		mov	r2, r3
 1838 003e 0223     		mov	r3, #2
 1839 0040 1340     		and	r3, r2
 531:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1840              		.loc 1 531 0
 1841 0042 01D0     		beq	.L138
 1842              	.L137:
 535:../Sources/TFC/TFC_CrystalClock.c ****   {
 536:../Sources/TFC/TFC_CrystalClock.c ****     return 0x7;                                                       // return error code
 1843              		.loc 1 536 0
 1844 0044 0723     		mov	r3, #7
 1845 0046 08E0     		b	.L139
 1846              	.L138:
 537:../Sources/TFC/TFC_CrystalClock.c ****   }
 538:../Sources/TFC/TFC_CrystalClock.c ****   
 539:../Sources/TFC/TFC_CrystalClock.c **** // To enter BLPE mode the LP bit must be set, disabling the PLL  
 540:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK;
 1847              		.loc 1 540 0
 1848 0048 064B     		ldr	r3, .L140
 1849 004a 064A     		ldr	r2, .L140
 1850 004c 5278     		ldrb	r2, [r2, #1]
 1851 004e D2B2     		uxtb	r2, r2
 1852 0050 0221     		mov	r1, #2
 1853 0052 0A43     		orr	r2, r1
 1854 0054 D2B2     		uxtb	r2, r2
 1855 0056 5A70     		strb	r2, [r3, #1]
 541:../Sources/TFC/TFC_CrystalClock.c ****   
 542:../Sources/TFC/TFC_CrystalClock.c **** // Now in BLPE mode
 543:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val;  
 1856              		.loc 1 543 0
 1857 0058 7B68     		ldr	r3, [r7, #4]
 1858              	.L139:
 544:../Sources/TFC/TFC_CrystalClock.c **** } // pbe_blpe
 1859              		.loc 1 544 0
 1860 005a 181C     		mov	r0, r3
 1861 005c BD46     		mov	sp, r7
 1862 005e 02B0     		add	sp, sp, #8
 1863              		@ sp needed for prologue
 1864 0060 80BD     		pop	{r7, pc}
 1865              	.L141:
 1866 0062 C046     		.align	2
 1867              	.L140:
 1868 0064 00400640 		.word	1074151424
 1869              		.cfi_endproc
 1870              	.LFE6:
 1872              		.section	.text.blpe_pbe,"ax",%progbits
 1873              		.align	2
 1874              		.global	blpe_pbe
 1875              		.code	16
 1876              		.thumb_func
 1878              	blpe_pbe:
 1879              	.LFB7:
 545:../Sources/TFC/TFC_CrystalClock.c **** 
 546:../Sources/TFC/TFC_CrystalClock.c **** 
 547:../Sources/TFC/TFC_CrystalClock.c **** // ************************************************************************************************
 548:../Sources/TFC/TFC_CrystalClock.c **** // Since PBE mode can be enterred via FBE -> BLPE modes, it cannot be assumed that the PLL has been
 549:../Sources/TFC/TFC_CrystalClock.c **** // previously configured correctly. That is why this general purpose driver has the PLL settings as
 550:../Sources/TFC/TFC_CrystalClock.c **** // passed parameters.
 551:../Sources/TFC/TFC_CrystalClock.c **** // ************************************************************************************************
 552:../Sources/TFC/TFC_CrystalClock.c **** int blpe_pbe(int crystal_val, signed char prdiv_val, signed char vdiv_val)
 553:../Sources/TFC/TFC_CrystalClock.c **** {
 1880              		.loc 1 553 0
 1881              		.cfi_startproc
 1882 0000 80B5     		push	{r7, lr}
 1883              	.LCFI21:
 1884              		.cfi_def_cfa_offset 8
 1885              		.cfi_offset 7, -8
 1886              		.cfi_offset 14, -4
 1887 0002 84B0     		sub	sp, sp, #16
 1888              	.LCFI22:
 1889              		.cfi_def_cfa_offset 24
 1890 0004 00AF     		add	r7, sp, #0
 1891              	.LCFI23:
 1892              		.cfi_def_cfa_register 7
 1893 0006 7860     		str	r0, [r7, #4]
 1894 0008 FB1C     		add	r3, r7, #3
 1895 000a 1970     		strb	r1, [r3]
 1896 000c BB1C     		add	r3, r7, #2
 1897 000e 1A70     		strb	r2, [r3]
 554:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 555:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 556:../Sources/TFC/TFC_CrystalClock.c ****   
 557:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in BLPE mode
 558:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1898              		.loc 1 558 0
 1899 0010 724B     		ldr	r3, .L164
 1900 0012 9B79     		ldrb	r3, [r3, #6]
 1901 0014 DBB2     		uxtb	r3, r3
 1902 0016 1A1C     		mov	r2, r3
 1903 0018 0C23     		mov	r3, #12
 1904 001a 1340     		and	r3, r2
 1905 001c 9B08     		lsr	r3, r3, #2
 1906 001e 022B     		cmp	r3, #2
 1907 0020 0DD1     		bne	.L143
 559:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 1908              		.loc 1 559 0
 1909 0022 6E4B     		ldr	r3, .L164
 1910 0024 9B79     		ldrb	r3, [r3, #6]
 1911 0026 DBB2     		uxtb	r3, r3
 1912 0028 1A1C     		mov	r2, r3
 1913 002a 1023     		mov	r3, #16
 1914 002c 1340     		and	r3, r2
 558:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1915              		.loc 1 558 0
 1916 002e 06D1     		bne	.L143
 560:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is se
 1917              		.loc 1 560 0
 1918 0030 6A4B     		ldr	r3, .L164
 1919 0032 5B78     		ldrb	r3, [r3, #1]
 1920 0034 DBB2     		uxtb	r3, r3
 1921 0036 1A1C     		mov	r2, r3
 1922 0038 0223     		mov	r3, #2
 1923 003a 1340     		and	r3, r2
 558:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 1924              		.loc 1 558 0
 1925 003c 01D1     		bne	.L144
 1926              	.L143:
 561:../Sources/TFC/TFC_CrystalClock.c ****   {
 562:../Sources/TFC/TFC_CrystalClock.c ****     return 0x6;                                                       // return error code
 1927              		.loc 1 562 0
 1928 003e 0623     		mov	r3, #6
 1929 0040 C7E0     		b	.L145
 1930              	.L144:
 563:../Sources/TFC/TFC_CrystalClock.c ****   }
 564:../Sources/TFC/TFC_CrystalClock.c ****   
 565:../Sources/TFC/TFC_CrystalClock.c **** // As the external frequency has already been checked when FBE mode was enterred it is not checked 
 566:../Sources/TFC/TFC_CrystalClock.c **** 
 567:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL divider settings are within spec.
 568:../Sources/TFC/TFC_CrystalClock.c ****   if ((prdiv_val < 1) || (prdiv_val > 25)) {return 0x41;}
 1931              		.loc 1 568 0
 1932 0042 FB1C     		add	r3, r7, #3
 1933 0044 1B78     		ldrb	r3, [r3]
 1934 0046 5BB2     		sxtb	r3, r3
 1935 0048 002B     		cmp	r3, #0
 1936 004a 04DD     		ble	.L146
 1937              		.loc 1 568 0 is_stmt 0
 1938 004c FB1C     		add	r3, r7, #3
 1939 004e 1B78     		ldrb	r3, [r3]
 1940 0050 5BB2     		sxtb	r3, r3
 1941 0052 192B     		cmp	r3, #25
 1942 0054 01DD     		ble	.L147
 1943              	.L146:
 1944              		.loc 1 568 0
 1945 0056 4123     		mov	r3, #65
 1946 0058 BBE0     		b	.L145
 1947              	.L147:
 569:../Sources/TFC/TFC_CrystalClock.c ****   if ((vdiv_val < 24) || (vdiv_val > 50)) {return 0x42;} 
 1948              		.loc 1 569 0 is_stmt 1
 1949 005a BB1C     		add	r3, r7, #2
 1950 005c 1B78     		ldrb	r3, [r3]
 1951 005e 5BB2     		sxtb	r3, r3
 1952 0060 172B     		cmp	r3, #23
 1953 0062 04DD     		ble	.L148
 1954              		.loc 1 569 0 is_stmt 0
 1955 0064 BB1C     		add	r3, r7, #2
 1956 0066 1B78     		ldrb	r3, [r3]
 1957 0068 5BB2     		sxtb	r3, r3
 1958 006a 322B     		cmp	r3, #50
 1959 006c 01DD     		ble	.L149
 1960              	.L148:
 1961              		.loc 1 569 0
 1962 006e 4223     		mov	r3, #66
 1963 0070 AFE0     		b	.L145
 1964              	.L149:
 570:../Sources/TFC/TFC_CrystalClock.c ****   
 571:../Sources/TFC/TFC_CrystalClock.c **** // Check PLL reference clock frequency is within spec.
 572:../Sources/TFC/TFC_CrystalClock.c ****   if (((crystal_val / prdiv_val) < 2000000) || ((crystal_val / prdiv_val) > 4000000)) {return 0x43;
 1965              		.loc 1 572 0 is_stmt 1
 1966 0072 FB1C     		add	r3, r7, #3
 1967 0074 1B78     		ldrb	r3, [r3]
 1968 0076 5BB2     		sxtb	r3, r3
 1969 0078 7868     		ldr	r0, [r7, #4]
 1970 007a 191C     		mov	r1, r3
 1971 007c FFF7FEFF 		bl	__aeabi_idiv
 1972 0080 031C     		mov	r3, r0
 1973 0082 1A1C     		mov	r2, r3
 1974 0084 564B     		ldr	r3, .L164+4
 1975 0086 9A42     		cmp	r2, r3
 1976 0088 0BDD     		ble	.L150
 1977              		.loc 1 572 0 is_stmt 0
 1978 008a FB1C     		add	r3, r7, #3
 1979 008c 1B78     		ldrb	r3, [r3]
 1980 008e 5BB2     		sxtb	r3, r3
 1981 0090 7868     		ldr	r0, [r7, #4]
 1982 0092 191C     		mov	r1, r3
 1983 0094 FFF7FEFF 		bl	__aeabi_idiv
 1984 0098 031C     		mov	r3, r0
 1985 009a 1A1C     		mov	r2, r3
 1986 009c 514B     		ldr	r3, .L164+8
 1987 009e 9A42     		cmp	r2, r3
 1988 00a0 01DD     		ble	.L151
 1989              	.L150:
 1990              		.loc 1 572 0
 1991 00a2 4323     		mov	r3, #67
 1992 00a4 95E0     		b	.L145
 1993              	.L151:
 573:../Sources/TFC/TFC_CrystalClock.c ****        
 574:../Sources/TFC/TFC_CrystalClock.c **** // If PRDIV, VDIV and the PLL ref clock are in spec. then the PLL frequency is within spec.
 575:../Sources/TFC/TFC_CrystalClock.c **** 
 576:../Sources/TFC/TFC_CrystalClock.c **** // Configure MCG_C5
 577:../Sources/TFC/TFC_CrystalClock.c **** // If the PLL is to run in STOP mode then the PLLSTEN bit needs to be OR'ed in here or in user code
 578:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C5;
 1994              		.loc 1 578 0 is_stmt 1
 1995 00a6 4D4A     		ldr	r2, .L164
 1996 00a8 3B1C     		mov	r3, r7
 1997 00aa 0D33     		add	r3, r3, #13
 1998 00ac 1279     		ldrb	r2, [r2, #4]
 1999 00ae 1A70     		strb	r2, [r3]
 579:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C5_PRDIV0_MASK;
 2000              		.loc 1 579 0
 2001 00b0 3B1C     		mov	r3, r7
 2002 00b2 0D33     		add	r3, r3, #13
 2003 00b4 3A1C     		mov	r2, r7
 2004 00b6 0D32     		add	r2, r2, #13
 2005 00b8 1278     		ldrb	r2, [r2]
 2006 00ba 1F21     		mov	r1, #31
 2007 00bc 8A43     		bic	r2, r1
 2008 00be 1A70     		strb	r2, [r3]
 580:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C5_PRDIV0(prdiv_val - 1);    //set PLL ref divider
 2009              		.loc 1 580 0
 2010 00c0 FB1C     		add	r3, r7, #3
 2011 00c2 1B78     		ldrb	r3, [r3]
 2012 00c4 013B     		sub	r3, r3, #1
 2013 00c6 DAB2     		uxtb	r2, r3
 2014 00c8 1F23     		mov	r3, #31
 2015 00ca 1340     		and	r3, r2
 2016 00cc D9B2     		uxtb	r1, r3
 2017 00ce 3B1C     		mov	r3, r7
 2018 00d0 0D33     		add	r3, r3, #13
 2019 00d2 3A1C     		mov	r2, r7
 2020 00d4 0D32     		add	r2, r2, #13
 2021 00d6 1278     		ldrb	r2, [r2]
 2022 00d8 0A43     		orr	r2, r1
 2023 00da 1A70     		strb	r2, [r3]
 581:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C5 = temp_reg;
 2024              		.loc 1 581 0
 2025 00dc 3F4B     		ldr	r3, .L164
 2026 00de 3A1C     		mov	r2, r7
 2027 00e0 0D32     		add	r2, r2, #13
 2028 00e2 1278     		ldrb	r2, [r2]
 2029 00e4 1A71     		strb	r2, [r3, #4]
 582:../Sources/TFC/TFC_CrystalClock.c **** 
 583:../Sources/TFC/TFC_CrystalClock.c **** // Configure MCG_C6
 584:../Sources/TFC/TFC_CrystalClock.c **** // The PLLS bit is set to enable the PLL, MCGOUT still sourced from ext ref clk 
 585:../Sources/TFC/TFC_CrystalClock.c **** // The clock monitor is not enabled here as it has likely been enabled previously and so the value 
 586:../Sources/TFC/TFC_CrystalClock.c **** // is not altered here.
 587:../Sources/TFC/TFC_CrystalClock.c **** // The loss of lock interrupt can be enabled by seperately OR'ing in the LOLIE bit in MCG_C6
 588:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C6; // store present C6 value
 2030              		.loc 1 588 0
 2031 00e6 3D4A     		ldr	r2, .L164
 2032 00e8 3B1C     		mov	r3, r7
 2033 00ea 0D33     		add	r3, r3, #13
 2034 00ec 5279     		ldrb	r2, [r2, #5]
 2035 00ee 1A70     		strb	r2, [r3]
 589:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C6_VDIV0_MASK; // clear VDIV settings
 2036              		.loc 1 589 0
 2037 00f0 3B1C     		mov	r3, r7
 2038 00f2 0D33     		add	r3, r3, #13
 2039 00f4 3A1C     		mov	r2, r7
 2040 00f6 0D32     		add	r2, r2, #13
 2041 00f8 1278     		ldrb	r2, [r2]
 2042 00fa 1F21     		mov	r1, #31
 2043 00fc 8A43     		bic	r2, r1
 2044 00fe 1A70     		strb	r2, [r3]
 590:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C6_PLLS_MASK | MCG_C6_VDIV0(vdiv_val - 24); // write new VDIV and enable PLL
 2045              		.loc 1 590 0
 2046 0100 BB1C     		add	r3, r7, #2
 2047 0102 1B78     		ldrb	r3, [r3]
 2048 0104 183B     		sub	r3, r3, #24
 2049 0106 DAB2     		uxtb	r2, r3
 2050 0108 1F23     		mov	r3, #31
 2051 010a 1340     		and	r3, r2
 2052 010c DAB2     		uxtb	r2, r3
 2053 010e 3B1C     		mov	r3, r7
 2054 0110 0D33     		add	r3, r3, #13
 2055 0112 1B78     		ldrb	r3, [r3]
 2056 0114 1343     		orr	r3, r2
 2057 0116 DAB2     		uxtb	r2, r3
 2058 0118 3B1C     		mov	r3, r7
 2059 011a 0D33     		add	r3, r3, #13
 2060 011c 4021     		mov	r1, #64
 2061 011e 0A43     		orr	r2, r1
 2062 0120 1A70     		strb	r2, [r3]
 591:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 = temp_reg; // update MCG_C6
 2063              		.loc 1 591 0
 2064 0122 2E4B     		ldr	r3, .L164
 2065 0124 3A1C     		mov	r2, r7
 2066 0126 0D32     		add	r2, r2, #13
 2067 0128 1278     		ldrb	r2, [r2]
 2068 012a 5A71     		strb	r2, [r3, #5]
 592:../Sources/TFC/TFC_CrystalClock.c ****   
 593:../Sources/TFC/TFC_CrystalClock.c **** // Now that PLL is configured, LP is cleared to enable the PLL
 594:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK;
 2069              		.loc 1 594 0
 2070 012c 2B4B     		ldr	r3, .L164
 2071 012e 2B4A     		ldr	r2, .L164
 2072 0130 5278     		ldrb	r2, [r2, #1]
 2073 0132 D2B2     		uxtb	r2, r2
 2074 0134 0221     		mov	r1, #2
 2075 0136 8A43     		bic	r2, r1
 2076 0138 D2B2     		uxtb	r2, r2
 2077 013a 5A70     		strb	r2, [r3, #1]
 595:../Sources/TFC/TFC_CrystalClock.c ****   
 596:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to set
 597:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2078              		.loc 1 597 0
 2079 013c 3B1C     		mov	r3, r7
 2080 013e 0E33     		add	r3, r3, #14
 2081 0140 0022     		mov	r2, #0
 2082 0142 1A80     		strh	r2, [r3]
 2083 0144 0DE0     		b	.L152
 2084              	.L155:
 598:../Sources/TFC/TFC_CrystalClock.c ****   {
 599:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_PLLST_MASK) break; // jump out early if PLLST sets before loop finishes
 2085              		.loc 1 599 0
 2086 0146 254B     		ldr	r3, .L164
 2087 0148 9B79     		ldrb	r3, [r3, #6]
 2088 014a DBB2     		uxtb	r3, r3
 2089 014c 1A1C     		mov	r2, r3
 2090 014e 2023     		mov	r3, #32
 2091 0150 1340     		and	r3, r2
 2092 0152 0ED1     		bne	.L162
 2093              	.L153:
 597:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2094              		.loc 1 597 0
 2095 0154 3B1C     		mov	r3, r7
 2096 0156 0E33     		add	r3, r3, #14
 2097 0158 3A1C     		mov	r2, r7
 2098 015a 0E32     		add	r2, r2, #14
 2099 015c 1288     		ldrh	r2, [r2]
 2100 015e 0132     		add	r2, r2, #1
 2101 0160 1A80     		strh	r2, [r3]
 2102              	.L152:
 597:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2103              		.loc 1 597 0 is_stmt 0
 2104 0162 3B1C     		mov	r3, r7
 2105 0164 0E33     		add	r3, r3, #14
 2106 0166 0021     		mov	r1, #0
 2107 0168 5A5E     		ldrsh	r2, [r3, r1]
 2108 016a 1F4B     		ldr	r3, .L164+12
 2109 016c 9A42     		cmp	r2, r3
 2110 016e EADD     		ble	.L155
 2111 0170 00E0     		b	.L154
 2112              	.L162:
 2113              		.loc 1 599 0 is_stmt 1
 2114 0172 C046     		mov	r8, r8
 2115              	.L154:
 600:../Sources/TFC/TFC_CrystalClock.c ****   }
 601:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_PLLST_MASK)) return 0x16; // check bit is really set and return with error if
 2116              		.loc 1 601 0
 2117 0174 194B     		ldr	r3, .L164
 2118 0176 9B79     		ldrb	r3, [r3, #6]
 2119 0178 DBB2     		uxtb	r3, r3
 2120 017a 1A1C     		mov	r2, r3
 2121 017c 2023     		mov	r3, #32
 2122 017e 1340     		and	r3, r2
 2123 0180 01D1     		bne	.L156
 2124              		.loc 1 601 0 is_stmt 0
 2125 0182 1623     		mov	r3, #22
 2126 0184 25E0     		b	.L145
 2127              	.L156:
 602:../Sources/TFC/TFC_CrystalClock.c **** 
 603:../Sources/TFC/TFC_CrystalClock.c **** // Wait for LOCK bit to set
 604:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2128              		.loc 1 604 0 is_stmt 1
 2129 0186 3B1C     		mov	r3, r7
 2130 0188 0E33     		add	r3, r3, #14
 2131 018a 0022     		mov	r2, #0
 2132 018c 1A80     		strh	r2, [r3]
 2133 018e 0DE0     		b	.L157
 2134              	.L160:
 605:../Sources/TFC/TFC_CrystalClock.c ****   {
 606:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_LOCK0_MASK) break; // jump out early if LOCK sets before loop finishes
 2135              		.loc 1 606 0
 2136 0190 124B     		ldr	r3, .L164
 2137 0192 9B79     		ldrb	r3, [r3, #6]
 2138 0194 DBB2     		uxtb	r3, r3
 2139 0196 1A1C     		mov	r2, r3
 2140 0198 4023     		mov	r3, #64
 2141 019a 1340     		and	r3, r2
 2142 019c 0ED1     		bne	.L163
 2143              	.L158:
 604:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2144              		.loc 1 604 0
 2145 019e 3B1C     		mov	r3, r7
 2146 01a0 0E33     		add	r3, r3, #14
 2147 01a2 3A1C     		mov	r2, r7
 2148 01a4 0E32     		add	r2, r2, #14
 2149 01a6 1288     		ldrh	r2, [r2]
 2150 01a8 0132     		add	r2, r2, #1
 2151 01aa 1A80     		strh	r2, [r3]
 2152              	.L157:
 604:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2153              		.loc 1 604 0 is_stmt 0
 2154 01ac 3B1C     		mov	r3, r7
 2155 01ae 0E33     		add	r3, r3, #14
 2156 01b0 0021     		mov	r1, #0
 2157 01b2 5A5E     		ldrsh	r2, [r3, r1]
 2158 01b4 0C4B     		ldr	r3, .L164+12
 2159 01b6 9A42     		cmp	r2, r3
 2160 01b8 EADD     		ble	.L160
 2161 01ba 00E0     		b	.L159
 2162              	.L163:
 2163              		.loc 1 606 0 is_stmt 1
 2164 01bc C046     		mov	r8, r8
 2165              	.L159:
 607:../Sources/TFC/TFC_CrystalClock.c ****   }
 608:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_LOCK0_MASK)) return 0x44; // check bit is really set and return with error if
 2166              		.loc 1 608 0
 2167 01be 074B     		ldr	r3, .L164
 2168 01c0 9B79     		ldrb	r3, [r3, #6]
 2169 01c2 DBB2     		uxtb	r3, r3
 2170 01c4 1A1C     		mov	r2, r3
 2171 01c6 4023     		mov	r3, #64
 2172 01c8 1340     		and	r3, r2
 2173 01ca 01D1     		bne	.L161
 2174              		.loc 1 608 0 is_stmt 0
 2175 01cc 4423     		mov	r3, #68
 2176 01ce 00E0     		b	.L145
 2177              	.L161:
 609:../Sources/TFC/TFC_CrystalClock.c **** 
 610:../Sources/TFC/TFC_CrystalClock.c **** // now in PBE 
 611:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency  
 2178              		.loc 1 611 0 is_stmt 1
 2179 01d0 7B68     		ldr	r3, [r7, #4]
 2180              	.L145:
 612:../Sources/TFC/TFC_CrystalClock.c **** } // blpe_pbe
 2181              		.loc 1 612 0
 2182 01d2 181C     		mov	r0, r3
 2183 01d4 BD46     		mov	sp, r7
 2184 01d6 04B0     		add	sp, sp, #16
 2185              		@ sp needed for prologue
 2186 01d8 80BD     		pop	{r7, pc}
 2187              	.L165:
 2188 01da C046     		.align	2
 2189              	.L164:
 2190 01dc 00400640 		.word	1074151424
 2191 01e0 7F841E00 		.word	1999999
 2192 01e4 00093D00 		.word	4000000
 2193 01e8 CF070000 		.word	1999
 2194              		.cfi_endproc
 2195              	.LFE7:
 2197              		.section	.text.blpe_fbe,"ax",%progbits
 2198              		.align	2
 2199              		.global	blpe_fbe
 2200              		.code	16
 2201              		.thumb_func
 2203              	blpe_fbe:
 2204              	.LFB8:
 613:../Sources/TFC/TFC_CrystalClock.c **** 
 614:../Sources/TFC/TFC_CrystalClock.c **** 
 615:../Sources/TFC/TFC_CrystalClock.c **** int blpe_fbe(int crystal_val)
 616:../Sources/TFC/TFC_CrystalClock.c **** {
 2205              		.loc 1 616 0
 2206              		.cfi_startproc
 2207 0000 80B5     		push	{r7, lr}
 2208              	.LCFI24:
 2209              		.cfi_def_cfa_offset 8
 2210              		.cfi_offset 7, -8
 2211              		.cfi_offset 14, -4
 2212 0002 84B0     		sub	sp, sp, #16
 2213              	.LCFI25:
 2214              		.cfi_def_cfa_offset 24
 2215 0004 00AF     		add	r7, sp, #0
 2216              	.LCFI26:
 2217              		.cfi_def_cfa_register 7
 2218 0006 7860     		str	r0, [r7, #4]
 617:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 618:../Sources/TFC/TFC_CrystalClock.c ****   
 619:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in BLPE mode
 620:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2219              		.loc 1 620 0
 2220 0008 294B     		ldr	r3, .L176
 2221 000a 9B79     		ldrb	r3, [r3, #6]
 2222 000c DBB2     		uxtb	r3, r3
 2223 000e 1A1C     		mov	r2, r3
 2224 0010 0C23     		mov	r3, #12
 2225 0012 1340     		and	r3, r2
 2226 0014 9B08     		lsr	r3, r3, #2
 2227 0016 022B     		cmp	r3, #2
 2228 0018 0DD1     		bne	.L167
 621:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2229              		.loc 1 621 0
 2230 001a 254B     		ldr	r3, .L176
 2231 001c 9B79     		ldrb	r3, [r3, #6]
 2232 001e DBB2     		uxtb	r3, r3
 2233 0020 1A1C     		mov	r2, r3
 2234 0022 1023     		mov	r3, #16
 2235 0024 1340     		and	r3, r2
 620:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2236              		.loc 1 620 0
 2237 0026 06D1     		bne	.L167
 622:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check MCG_C2[LP] bit is se
 2238              		.loc 1 622 0
 2239 0028 214B     		ldr	r3, .L176
 2240 002a 5B78     		ldrb	r3, [r3, #1]
 2241 002c DBB2     		uxtb	r3, r3
 2242 002e 1A1C     		mov	r2, r3
 2243 0030 0223     		mov	r3, #2
 2244 0032 1340     		and	r3, r2
 620:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2245              		.loc 1 620 0
 2246 0034 01D1     		bne	.L168
 2247              	.L167:
 623:../Sources/TFC/TFC_CrystalClock.c ****   {
 624:../Sources/TFC/TFC_CrystalClock.c ****     return 0x6;                                                       // return error code
 2248              		.loc 1 624 0
 2249 0036 0623     		mov	r3, #6
 2250 0038 35E0     		b	.L169
 2251              	.L168:
 625:../Sources/TFC/TFC_CrystalClock.c ****   }
 626:../Sources/TFC/TFC_CrystalClock.c ****  
 627:../Sources/TFC/TFC_CrystalClock.c **** // To move from BLPE to FBE the PLLS mux be set to select the FLL output and the LP bit must be cle
 628:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_PLLS_MASK; // clear PLLS to select the FLL
 2252              		.loc 1 628 0
 2253 003a 1D4B     		ldr	r3, .L176
 2254 003c 1C4A     		ldr	r2, .L176
 2255 003e 5279     		ldrb	r2, [r2, #5]
 2256 0040 D2B2     		uxtb	r2, r2
 2257 0042 4021     		mov	r1, #64
 2258 0044 8A43     		bic	r2, r1
 2259 0046 D2B2     		uxtb	r2, r2
 2260 0048 5A71     		strb	r2, [r3, #5]
 629:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK; // clear LP bit  
 2261              		.loc 1 629 0
 2262 004a 194B     		ldr	r3, .L176
 2263 004c 184A     		ldr	r2, .L176
 2264 004e 5278     		ldrb	r2, [r2, #1]
 2265 0050 D2B2     		uxtb	r2, r2
 2266 0052 0221     		mov	r1, #2
 2267 0054 8A43     		bic	r2, r1
 2268 0056 D2B2     		uxtb	r2, r2
 2269 0058 5A70     		strb	r2, [r3, #1]
 630:../Sources/TFC/TFC_CrystalClock.c **** 
 631:../Sources/TFC/TFC_CrystalClock.c **** // wait for PLLST status bit to clear
 632:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2270              		.loc 1 632 0
 2271 005a 3B1C     		mov	r3, r7
 2272 005c 0E33     		add	r3, r3, #14
 2273 005e 0022     		mov	r2, #0
 2274 0060 1A80     		strh	r2, [r3]
 2275 0062 0DE0     		b	.L170
 2276              	.L173:
 633:../Sources/TFC/TFC_CrystalClock.c ****   {
 634:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_PLLST_MASK)) break; // jump out early if PLLST clears before loop finishes
 2277              		.loc 1 634 0
 2278 0064 124B     		ldr	r3, .L176
 2279 0066 9B79     		ldrb	r3, [r3, #6]
 2280 0068 DBB2     		uxtb	r3, r3
 2281 006a 1A1C     		mov	r2, r3
 2282 006c 2023     		mov	r3, #32
 2283 006e 1340     		and	r3, r2
 2284 0070 0ED0     		beq	.L175
 2285              	.L171:
 632:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2286              		.loc 1 632 0
 2287 0072 3B1C     		mov	r3, r7
 2288 0074 0E33     		add	r3, r3, #14
 2289 0076 3A1C     		mov	r2, r7
 2290 0078 0E32     		add	r2, r2, #14
 2291 007a 1288     		ldrh	r2, [r2]
 2292 007c 0132     		add	r2, r2, #1
 2293 007e 1A80     		strh	r2, [r3]
 2294              	.L170:
 632:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2295              		.loc 1 632 0 is_stmt 0
 2296 0080 3B1C     		mov	r3, r7
 2297 0082 0E33     		add	r3, r3, #14
 2298 0084 0021     		mov	r1, #0
 2299 0086 5A5E     		ldrsh	r2, [r3, r1]
 2300 0088 0A4B     		ldr	r3, .L176+4
 2301 008a 9A42     		cmp	r2, r3
 2302 008c EADD     		ble	.L173
 2303 008e 00E0     		b	.L172
 2304              	.L175:
 2305              		.loc 1 634 0 is_stmt 1
 2306 0090 C046     		mov	r8, r8
 2307              	.L172:
 635:../Sources/TFC/TFC_CrystalClock.c ****   }
 636:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_PLLST_MASK) return 0x15; // check bit is really clear and return with error if 
 2308              		.loc 1 636 0
 2309 0092 074B     		ldr	r3, .L176
 2310 0094 9B79     		ldrb	r3, [r3, #6]
 2311 0096 DBB2     		uxtb	r3, r3
 2312 0098 1A1C     		mov	r2, r3
 2313 009a 2023     		mov	r3, #32
 2314 009c 1340     		and	r3, r2
 2315 009e 01D0     		beq	.L174
 2316              		.loc 1 636 0 is_stmt 0
 2317 00a0 1523     		mov	r3, #21
 2318 00a2 00E0     		b	.L169
 2319              	.L174:
 637:../Sources/TFC/TFC_CrystalClock.c ****   
 638:../Sources/TFC/TFC_CrystalClock.c **** // now in FBE mode
 639:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency     
 2320              		.loc 1 639 0 is_stmt 1
 2321 00a4 7B68     		ldr	r3, [r7, #4]
 2322              	.L169:
 640:../Sources/TFC/TFC_CrystalClock.c **** } // blpe_fbe
 2323              		.loc 1 640 0
 2324 00a6 181C     		mov	r0, r3
 2325 00a8 BD46     		mov	sp, r7
 2326 00aa 04B0     		add	sp, sp, #16
 2327              		@ sp needed for prologue
 2328 00ac 80BD     		pop	{r7, pc}
 2329              	.L177:
 2330 00ae C046     		.align	2
 2331              	.L176:
 2332 00b0 00400640 		.word	1074151424
 2333 00b4 CF070000 		.word	1999
 2334              		.cfi_endproc
 2335              	.LFE8:
 2337              		.section	.text.fbe_blpe,"ax",%progbits
 2338              		.align	2
 2339              		.global	fbe_blpe
 2340              		.code	16
 2341              		.thumb_func
 2343              	fbe_blpe:
 2344              	.LFB9:
 641:../Sources/TFC/TFC_CrystalClock.c **** 
 642:../Sources/TFC/TFC_CrystalClock.c **** 
 643:../Sources/TFC/TFC_CrystalClock.c **** int fbe_blpe(int crystal_val)
 644:../Sources/TFC/TFC_CrystalClock.c **** {
 2345              		.loc 1 644 0
 2346              		.cfi_startproc
 2347 0000 80B5     		push	{r7, lr}
 2348              	.LCFI27:
 2349              		.cfi_def_cfa_offset 8
 2350              		.cfi_offset 7, -8
 2351              		.cfi_offset 14, -4
 2352 0002 82B0     		sub	sp, sp, #8
 2353              	.LCFI28:
 2354              		.cfi_def_cfa_offset 16
 2355 0004 00AF     		add	r7, sp, #0
 2356              	.LCFI29:
 2357              		.cfi_def_cfa_register 7
 2358 0006 7860     		str	r0, [r7, #4]
 645:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 646:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2359              		.loc 1 646 0
 2360 0008 164B     		ldr	r3, .L182
 2361 000a 9B79     		ldrb	r3, [r3, #6]
 2362 000c DBB2     		uxtb	r3, r3
 2363 000e 1A1C     		mov	r2, r3
 2364 0010 0C23     		mov	r3, #12
 2365 0012 1340     		and	r3, r2
 2366 0014 9B08     		lsr	r3, r3, #2
 2367 0016 022B     		cmp	r3, #2
 2368 0018 14D1     		bne	.L179
 647:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2369              		.loc 1 647 0
 2370 001a 124B     		ldr	r3, .L182
 2371 001c 9B79     		ldrb	r3, [r3, #6]
 2372 001e DBB2     		uxtb	r3, r3
 2373 0020 1A1C     		mov	r2, r3
 2374 0022 1023     		mov	r3, #16
 2375 0024 1340     		and	r3, r2
 646:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2376              		.loc 1 646 0
 2377 0026 0DD1     		bne	.L179
 648:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 2378              		.loc 1 648 0
 2379 0028 0E4B     		ldr	r3, .L182
 2380 002a 9B79     		ldrb	r3, [r3, #6]
 2381 002c DBB2     		uxtb	r3, r3
 2382 002e 1A1C     		mov	r2, r3
 2383 0030 2023     		mov	r3, #32
 2384 0032 1340     		and	r3, r2
 647:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2385              		.loc 1 647 0
 2386 0034 06D1     		bne	.L179
 649:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 2387              		.loc 1 649 0
 2388 0036 0B4B     		ldr	r3, .L182
 2389 0038 5B78     		ldrb	r3, [r3, #1]
 2390 003a DBB2     		uxtb	r3, r3
 2391 003c 1A1C     		mov	r2, r3
 2392 003e 0223     		mov	r3, #2
 2393 0040 1340     		and	r3, r2
 646:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2394              		.loc 1 646 0
 2395 0042 01D0     		beq	.L180
 2396              	.L179:
 650:../Sources/TFC/TFC_CrystalClock.c ****   {
 651:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 2397              		.loc 1 651 0
 2398 0044 0423     		mov	r3, #4
 2399 0046 08E0     		b	.L181
 2400              	.L180:
 652:../Sources/TFC/TFC_CrystalClock.c ****   }
 653:../Sources/TFC/TFC_CrystalClock.c ****  
 654:../Sources/TFC/TFC_CrystalClock.c **** // To move from FBE to BLPE the LP bit must be set
 655:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK; // set LP bit  
 2401              		.loc 1 655 0
 2402 0048 064B     		ldr	r3, .L182
 2403 004a 064A     		ldr	r2, .L182
 2404 004c 5278     		ldrb	r2, [r2, #1]
 2405 004e D2B2     		uxtb	r2, r2
 2406 0050 0221     		mov	r1, #2
 2407 0052 0A43     		orr	r2, r1
 2408 0054 D2B2     		uxtb	r2, r2
 2409 0056 5A70     		strb	r2, [r3, #1]
 656:../Sources/TFC/TFC_CrystalClock.c ****  
 657:../Sources/TFC/TFC_CrystalClock.c **** // now in FBE mode
 658:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency     
 2410              		.loc 1 658 0
 2411 0058 7B68     		ldr	r3, [r7, #4]
 2412              	.L181:
 659:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_blpe
 2413              		.loc 1 659 0
 2414 005a 181C     		mov	r0, r3
 2415 005c BD46     		mov	sp, r7
 2416 005e 02B0     		add	sp, sp, #8
 2417              		@ sp needed for prologue
 2418 0060 80BD     		pop	{r7, pc}
 2419              	.L183:
 2420 0062 C046     		.align	2
 2421              	.L182:
 2422 0064 00400640 		.word	1074151424
 2423              		.cfi_endproc
 2424              	.LFE9:
 2426              		.section	.text.fbe_fei,"ax",%progbits
 2427              		.align	2
 2428              		.global	fbe_fei
 2429              		.code	16
 2430              		.thumb_func
 2432              	fbe_fei:
 2433              	.LFB10:
 660:../Sources/TFC/TFC_CrystalClock.c **** 
 661:../Sources/TFC/TFC_CrystalClock.c **** 
 662:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fei(int slow_irc_freq)
 663:../Sources/TFC/TFC_CrystalClock.c **** {
 2434              		.loc 1 663 0
 2435              		.cfi_startproc
 2436 0000 80B5     		push	{r7, lr}
 2437              	.LCFI30:
 2438              		.cfi_def_cfa_offset 8
 2439              		.cfi_offset 7, -8
 2440              		.cfi_offset 14, -4
 2441 0002 86B0     		sub	sp, sp, #24
 2442              	.LCFI31:
 2443              		.cfi_def_cfa_offset 32
 2444 0004 00AF     		add	r7, sp, #0
 2445              	.LCFI32:
 2446              		.cfi_def_cfa_register 7
 2447 0006 7860     		str	r0, [r7, #4]
 664:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 665:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 666:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
 667:../Sources/TFC/TFC_CrystalClock.c ****   
 668:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 669:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2448              		.loc 1 669 0
 2449 0008 534B     		ldr	r3, .L203
 2450 000a 9B79     		ldrb	r3, [r3, #6]
 2451 000c DBB2     		uxtb	r3, r3
 2452 000e 1A1C     		mov	r2, r3
 2453 0010 0C23     		mov	r3, #12
 2454 0012 1340     		and	r3, r2
 2455 0014 9B08     		lsr	r3, r3, #2
 2456 0016 022B     		cmp	r3, #2
 2457 0018 14D1     		bne	.L185
 670:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2458              		.loc 1 670 0
 2459 001a 4F4B     		ldr	r3, .L203
 2460 001c 9B79     		ldrb	r3, [r3, #6]
 2461 001e DBB2     		uxtb	r3, r3
 2462 0020 1A1C     		mov	r2, r3
 2463 0022 1023     		mov	r3, #16
 2464 0024 1340     		and	r3, r2
 669:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2465              		.loc 1 669 0
 2466 0026 0DD1     		bne	.L185
 671:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 2467              		.loc 1 671 0
 2468 0028 4B4B     		ldr	r3, .L203
 2469 002a 9B79     		ldrb	r3, [r3, #6]
 2470 002c DBB2     		uxtb	r3, r3
 2471 002e 1A1C     		mov	r2, r3
 2472 0030 2023     		mov	r3, #32
 2473 0032 1340     		and	r3, r2
 670:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 2474              		.loc 1 670 0
 2475 0034 06D1     		bne	.L185
 672:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 2476              		.loc 1 672 0
 2477 0036 484B     		ldr	r3, .L203
 2478 0038 5B78     		ldrb	r3, [r3, #1]
 2479 003a DBB2     		uxtb	r3, r3
 2480 003c 1A1C     		mov	r2, r3
 2481 003e 0223     		mov	r3, #2
 2482 0040 1340     		and	r3, r2
 669:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 2483              		.loc 1 669 0
 2484 0042 01D0     		beq	.L186
 2485              	.L185:
 673:../Sources/TFC/TFC_CrystalClock.c ****   {
 674:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 2486              		.loc 1 674 0
 2487 0044 0423     		mov	r3, #4
 2488 0046 83E0     		b	.L187
 2489              	.L186:
 675:../Sources/TFC/TFC_CrystalClock.c ****   }
 676:../Sources/TFC/TFC_CrystalClock.c **** 
 677:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
 678:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 2490              		.loc 1 678 0
 2491 0048 7A68     		ldr	r2, [r7, #4]
 2492 004a 444B     		ldr	r3, .L203+4
 2493 004c 9A42     		cmp	r2, r3
 2494 004e 03DD     		ble	.L188
 2495              		.loc 1 678 0 is_stmt 0
 2496 0050 7A68     		ldr	r2, [r7, #4]
 2497 0052 434B     		ldr	r3, .L203+8
 2498 0054 9A42     		cmp	r2, r3
 2499 0056 01DD     		ble	.L189
 2500              	.L188:
 679:../Sources/TFC/TFC_CrystalClock.c ****   {
 680:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 2501              		.loc 1 680 0 is_stmt 1
 2502 0058 3123     		mov	r3, #49
 2503 005a 79E0     		b	.L187
 2504              	.L189:
 681:../Sources/TFC/TFC_CrystalClock.c ****   }
 682:../Sources/TFC/TFC_CrystalClock.c ****   
 683:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
 684:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 2505              		.loc 1 684 0
 2506 005c 7B68     		ldr	r3, [r7, #4]
 2507 005e 181C     		mov	r0, r3
 2508 0060 FFF7FEFF 		bl	fll_freq
 2509 0064 031C     		mov	r3, r0
 2510 0066 3B61     		str	r3, [r7, #16]
 685:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 2511              		.loc 1 685 0
 2512 0068 3B69     		ldr	r3, [r7, #16]
 2513 006a 3B2B     		cmp	r3, #59
 2514 006c 01DC     		bgt	.L190
 2515              		.loc 1 685 0 is_stmt 0
 2516 006e 3B69     		ldr	r3, [r7, #16]
 2517 0070 6EE0     		b	.L187
 2518              	.L190:
 686:../Sources/TFC/TFC_CrystalClock.c **** 
 687:../Sources/TFC/TFC_CrystalClock.c **** // Need to make sure the clockmonitor is disabled before moving to an "internal" clock mode
 688:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK; //This assumes OSC0 is used as the external clock source
 2519              		.loc 1 688 0 is_stmt 1
 2520 0072 394B     		ldr	r3, .L203
 2521 0074 384A     		ldr	r2, .L203
 2522 0076 5279     		ldrb	r2, [r2, #5]
 2523 0078 D2B2     		uxtb	r2, r2
 2524 007a 2021     		mov	r1, #32
 2525 007c 8A43     		bic	r2, r1
 2526 007e D2B2     		uxtb	r2, r2
 2527 0080 5A71     		strb	r2, [r3, #5]
 689:../Sources/TFC/TFC_CrystalClock.c ****   
 690:../Sources/TFC/TFC_CrystalClock.c **** // Move to FEI by setting CLKS to 0 and enabling the slow IRC as the FLL reference clock
 691:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 2528              		.loc 1 691 0
 2529 0082 354A     		ldr	r2, .L203
 2530 0084 3B1C     		mov	r3, r7
 2531 0086 0F33     		add	r3, r3, #15
 2532 0088 1278     		ldrb	r2, [r2]
 2533 008a 1A70     		strb	r2, [r3]
 692:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
 2534              		.loc 1 692 0
 2535 008c 3B1C     		mov	r3, r7
 2536 008e 0F33     		add	r3, r3, #15
 2537 0090 3A1C     		mov	r2, r7
 2538 0092 0F32     		add	r2, r2, #15
 2539 0094 1178     		ldrb	r1, [r2]
 2540 0096 3F22     		mov	r2, #63
 2541 0098 0A40     		and	r2, r1
 2542 009a 1A70     		strb	r2, [r3]
 693:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_IREFS_MASK; // select internal reference clock
 2543              		.loc 1 693 0
 2544 009c 3B1C     		mov	r3, r7
 2545 009e 0F33     		add	r3, r3, #15
 2546 00a0 3A1C     		mov	r2, r7
 2547 00a2 0F32     		add	r2, r2, #15
 2548 00a4 1278     		ldrb	r2, [r2]
 2549 00a6 0421     		mov	r1, #4
 2550 00a8 0A43     		orr	r2, r1
 2551 00aa 1A70     		strb	r2, [r3]
 694:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1 
 2552              		.loc 1 694 0
 2553 00ac 2A4B     		ldr	r3, .L203
 2554 00ae 3A1C     		mov	r2, r7
 2555 00b0 0F32     		add	r2, r2, #15
 2556 00b2 1278     		ldrb	r2, [r2]
 2557 00b4 1A70     		strb	r2, [r3]
 695:../Sources/TFC/TFC_CrystalClock.c ****   
 696:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to set
 697:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2558              		.loc 1 697 0
 2559 00b6 3B1C     		mov	r3, r7
 2560 00b8 1633     		add	r3, r3, #22
 2561 00ba 0022     		mov	r2, #0
 2562 00bc 1A80     		strh	r2, [r3]
 2563 00be 0DE0     		b	.L191
 2564              	.L194:
 698:../Sources/TFC/TFC_CrystalClock.c ****   {
 699:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 2565              		.loc 1 699 0
 2566 00c0 254B     		ldr	r3, .L203
 2567 00c2 9B79     		ldrb	r3, [r3, #6]
 2568 00c4 DBB2     		uxtb	r3, r3
 2569 00c6 1A1C     		mov	r2, r3
 2570 00c8 1023     		mov	r3, #16
 2571 00ca 1340     		and	r3, r2
 2572 00cc 0ED1     		bne	.L201
 2573              	.L192:
 697:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2574              		.loc 1 697 0
 2575 00ce 3B1C     		mov	r3, r7
 2576 00d0 1633     		add	r3, r3, #22
 2577 00d2 3A1C     		mov	r2, r7
 2578 00d4 1632     		add	r2, r2, #22
 2579 00d6 1288     		ldrh	r2, [r2]
 2580 00d8 0132     		add	r2, r2, #1
 2581 00da 1A80     		strh	r2, [r3]
 2582              	.L191:
 697:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2583              		.loc 1 697 0 is_stmt 0
 2584 00dc 3B1C     		mov	r3, r7
 2585 00de 1633     		add	r3, r3, #22
 2586 00e0 0021     		mov	r1, #0
 2587 00e2 5A5E     		ldrsh	r2, [r3, r1]
 2588 00e4 1F4B     		ldr	r3, .L203+12
 2589 00e6 9A42     		cmp	r2, r3
 2590 00e8 EADD     		ble	.L194
 2591 00ea 00E0     		b	.L193
 2592              	.L201:
 2593              		.loc 1 699 0 is_stmt 1
 2594 00ec C046     		mov	r8, r8
 2595              	.L193:
 700:../Sources/TFC/TFC_CrystalClock.c ****   }
 701:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 2596              		.loc 1 701 0
 2597 00ee 1A4B     		ldr	r3, .L203
 2598 00f0 9B79     		ldrb	r3, [r3, #6]
 2599 00f2 DBB2     		uxtb	r3, r3
 2600 00f4 1A1C     		mov	r2, r3
 2601 00f6 1023     		mov	r3, #16
 2602 00f8 1340     		and	r3, r2
 2603 00fa 01D1     		bne	.L195
 2604              		.loc 1 701 0 is_stmt 0
 2605 00fc 1223     		mov	r3, #18
 2606 00fe 27E0     		b	.L187
 2607              	.L195:
 702:../Sources/TFC/TFC_CrystalClock.c ****   
 703:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
 704:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2608              		.loc 1 704 0 is_stmt 1
 2609 0100 3B1C     		mov	r3, r7
 2610 0102 1633     		add	r3, r3, #22
 2611 0104 0022     		mov	r2, #0
 2612 0106 1A80     		strh	r2, [r3]
 2613 0108 0EE0     		b	.L196
 2614              	.L199:
 705:../Sources/TFC/TFC_CrystalClock.c ****   {
 706:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 2615              		.loc 1 706 0
 2616 010a 134B     		ldr	r3, .L203
 2617 010c 9B79     		ldrb	r3, [r3, #6]
 2618 010e DBB2     		uxtb	r3, r3
 2619 0110 1A1C     		mov	r2, r3
 2620 0112 0C23     		mov	r3, #12
 2621 0114 1340     		and	r3, r2
 2622 0116 9B08     		lsr	r3, r3, #2
 2623 0118 0ED0     		beq	.L202
 2624              	.L197:
 704:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2625              		.loc 1 704 0
 2626 011a 3B1C     		mov	r3, r7
 2627 011c 1633     		add	r3, r3, #22
 2628 011e 3A1C     		mov	r2, r7
 2629 0120 1632     		add	r2, r2, #22
 2630 0122 1288     		ldrh	r2, [r2]
 2631 0124 0132     		add	r2, r2, #1
 2632 0126 1A80     		strh	r2, [r3]
 2633              	.L196:
 704:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 2634              		.loc 1 704 0 is_stmt 0
 2635 0128 3B1C     		mov	r3, r7
 2636 012a 1633     		add	r3, r3, #22
 2637 012c 0021     		mov	r1, #0
 2638 012e 5A5E     		ldrsh	r2, [r3, r1]
 2639 0130 0C4B     		ldr	r3, .L203+12
 2640 0132 9A42     		cmp	r2, r3
 2641 0134 E9DD     		ble	.L199
 2642 0136 00E0     		b	.L198
 2643              	.L202:
 2644              		.loc 1 706 0 is_stmt 1
 2645 0138 C046     		mov	r8, r8
 2646              	.L198:
 707:../Sources/TFC/TFC_CrystalClock.c ****   }
 708:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check EXT CLK is re
 2647              		.loc 1 708 0
 2648 013a 074B     		ldr	r3, .L203
 2649 013c 9B79     		ldrb	r3, [r3, #6]
 2650 013e DBB2     		uxtb	r3, r3
 2651 0140 1A1C     		mov	r2, r3
 2652 0142 0C23     		mov	r3, #12
 2653 0144 1340     		and	r3, r2
 2654 0146 9B08     		lsr	r3, r3, #2
 2655 0148 01D0     		beq	.L200
 2656              		.loc 1 708 0 is_stmt 0
 2657 014a 1823     		mov	r3, #24
 2658 014c 00E0     		b	.L187
 2659              	.L200:
 709:../Sources/TFC/TFC_CrystalClock.c **** 
 710:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode
 711:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;
 2660              		.loc 1 711 0 is_stmt 1
 2661 014e 3B69     		ldr	r3, [r7, #16]
 2662              	.L187:
 712:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_fei
 2663              		.loc 1 712 0
 2664 0150 181C     		mov	r0, r3
 2665 0152 BD46     		mov	sp, r7
 2666 0154 06B0     		add	sp, sp, #24
 2667              		@ sp needed for prologue
 2668 0156 80BD     		pop	{r7, pc}
 2669              	.L204:
 2670              		.align	2
 2671              	.L203:
 2672 0158 00400640 		.word	1074151424
 2673 015c 117A0000 		.word	31249
 2674 0160 97980000 		.word	39063
 2675 0164 CF070000 		.word	1999
 2676              		.cfi_endproc
 2677              	.LFE10:
 2679              		.section	.text.fei_fbe,"ax",%progbits
 2680              		.align	2
 2681              		.global	fei_fbe
 2682              		.code	16
 2683              		.thumb_func
 2685              	fei_fbe:
 2686              	.LFB11:
 713:../Sources/TFC/TFC_CrystalClock.c **** 
 714:../Sources/TFC/TFC_CrystalClock.c **** 
 715:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
 716:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fei_fbe
 717:../Sources/TFC/TFC_CrystalClock.c ****  *
 718:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FEI to FBE mode
 719:../Sources/TFC/TFC_CrystalClock.c ****  *
 720:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FEI mode to FBE mode. This is
 721:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
 722:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
 723:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. The MCGCLKOUT frequency does not change
 724:../Sources/TFC/TFC_CrystalClock.c ****  *
 725:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
 726:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
 727:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an 
 728:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
 729:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
 730:../Sources/TFC/TFC_CrystalClock.c ****  *
 731:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
 732:../Sources/TFC/TFC_CrystalClock.c ****  */
 733:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
 734:../Sources/TFC/TFC_CrystalClock.c **** {
 2687              		.loc 1 734 0
 2688              		.cfi_startproc
 2689 0000 80B5     		push	{r7, lr}
 2690              	.LCFI33:
 2691              		.cfi_def_cfa_offset 8
 2692              		.cfi_offset 7, -8
 2693              		.cfi_offset 14, -4
 2694 0002 84B0     		sub	sp, sp, #16
 2695              	.LCFI34:
 2696              		.cfi_def_cfa_offset 24
 2697 0004 00AF     		add	r7, sp, #0
 2698              	.LCFI35:
 2699              		.cfi_def_cfa_register 7
 2700 0006 7860     		str	r0, [r7, #4]
 2701 0008 FB1C     		add	r3, r7, #3
 2702 000a 1970     		strb	r1, [r3]
 2703 000c BB1C     		add	r3, r7, #2
 2704 000e 1A70     		strb	r2, [r3]
 735:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 736:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 737:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 738:../Sources/TFC/TFC_CrystalClock.c ****   
 739:../Sources/TFC/TFC_CrystalClock.c **** // check if in FEI mode
 740:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2705              		.loc 1 740 0
 2706 0010 B44B     		ldr	r3, .L241
 2707 0012 9B79     		ldrb	r3, [r3, #6]
 2708 0014 DBB2     		uxtb	r3, r3
 2709 0016 1A1C     		mov	r2, r3
 2710 0018 0C23     		mov	r3, #12
 2711 001a 1340     		and	r3, r2
 2712 001c 9B08     		lsr	r3, r3, #2
 2713 001e 0DD1     		bne	.L206
 741:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 2714              		.loc 1 741 0
 2715 0020 B04B     		ldr	r3, .L241
 2716 0022 9B79     		ldrb	r3, [r3, #6]
 2717 0024 DBB2     		uxtb	r3, r3
 2718 0026 1A1C     		mov	r2, r3
 2719 0028 1023     		mov	r3, #16
 2720 002a 1340     		and	r3, r2
 740:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2721              		.loc 1 740 0
 2722 002c 06D0     		beq	.L206
 742:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 2723              		.loc 1 742 0
 2724 002e AD4B     		ldr	r3, .L241
 2725 0030 9B79     		ldrb	r3, [r3, #6]
 2726 0032 DBB2     		uxtb	r3, r3
 2727 0034 1A1C     		mov	r2, r3
 2728 0036 2023     		mov	r3, #32
 2729 0038 1340     		and	r3, r2
 740:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 2730              		.loc 1 740 0
 2731 003a 01D0     		beq	.L207
 2732              	.L206:
 743:../Sources/TFC/TFC_CrystalClock.c ****   {
 744:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 2733              		.loc 1 744 0
 2734 003c 0123     		mov	r3, #1
 2735 003e 4DE1     		b	.L208
 2736              	.L207:
 745:../Sources/TFC/TFC_CrystalClock.c ****   }
 746:../Sources/TFC/TFC_CrystalClock.c **** 
 747:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
 748:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 2737              		.loc 1 748 0
 2738 0040 7A68     		ldr	r2, [r7, #4]
 2739 0042 A94B     		ldr	r3, .L241+4
 2740 0044 9A42     		cmp	r2, r3
 2741 0046 01DD     		ble	.L209
 2742              		.loc 1 748 0 is_stmt 0
 2743 0048 2123     		mov	r3, #33
 2744 004a 47E1     		b	.L208
 2745              	.L209:
 749:../Sources/TFC/TFC_CrystalClock.c ****   
 750:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
 751:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 2746              		.loc 1 751 0 is_stmt 1
 2747 004c BB1C     		add	r3, r7, #2
 2748 004e 1B78     		ldrb	r3, [r3]
 2749 0050 002B     		cmp	r3, #0
 2750 0052 11D0     		beq	.L210
 752:../Sources/TFC/TFC_CrystalClock.c ****   {
 753:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 2751              		.loc 1 753 0
 2752 0054 7A68     		ldr	r2, [r7, #4]
 2753 0056 A54B     		ldr	r3, .L241+8
 2754 0058 9A42     		cmp	r2, r3
 2755 005a 0BDD     		ble	.L211
 2756              		.loc 1 753 0 is_stmt 0
 2757 005c 7A68     		ldr	r2, [r7, #4]
 2758 005e A44B     		ldr	r3, .L241+12
 2759 0060 9A42     		cmp	r2, r3
 2760 0062 03DD     		ble	.L212
 754:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 2761              		.loc 1 754 0 is_stmt 1
 2762 0064 7A68     		ldr	r2, [r7, #4]
 2763 0066 A34B     		ldr	r3, .L241+16
 2764 0068 9A42     		cmp	r2, r3
 2765 006a 03DD     		ble	.L211
 2766              	.L212:
 2767              		.loc 1 754 0 is_stmt 0
 2768 006c 7A68     		ldr	r2, [r7, #4]
 2769 006e A24B     		ldr	r3, .L241+20
 2770 0070 9A42     		cmp	r2, r3
 2771 0072 01DD     		ble	.L210
 2772              	.L211:
 755:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 2773              		.loc 1 755 0 is_stmt 1
 2774 0074 2223     		mov	r3, #34
 2775 0076 31E1     		b	.L208
 2776              	.L210:
 756:../Sources/TFC/TFC_CrystalClock.c ****   }
 757:../Sources/TFC/TFC_CrystalClock.c **** 
 758:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
 759:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 2777              		.loc 1 759 0
 2778 0078 FB1C     		add	r3, r7, #3
 2779 007a 1B78     		ldrb	r3, [r3]
 2780 007c 002B     		cmp	r3, #0
 2781 007e 02D0     		beq	.L213
 760:../Sources/TFC/TFC_CrystalClock.c ****   {
 761:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 2782              		.loc 1 761 0
 2783 0080 FB1C     		add	r3, r7, #3
 2784 0082 0122     		mov	r2, #1
 2785 0084 1A70     		strb	r2, [r3]
 2786              	.L213:
 762:../Sources/TFC/TFC_CrystalClock.c ****   }
 763:../Sources/TFC/TFC_CrystalClock.c **** 
 764:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
 765:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
 766:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
 767:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 2787              		.loc 1 767 0
 2788 0086 974A     		ldr	r2, .L241
 2789 0088 3B1C     		mov	r3, r7
 2790 008a 0E33     		add	r3, r3, #14
 2791 008c 5278     		ldrb	r2, [r2, #1]
 2792 008e 1A70     		strb	r2, [r3]
 768:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 2793              		.loc 1 768 0
 2794 0090 3B1C     		mov	r3, r7
 2795 0092 0E33     		add	r3, r3, #14
 2796 0094 3A1C     		mov	r2, r7
 2797 0096 0E32     		add	r2, r2, #14
 2798 0098 1278     		ldrb	r2, [r2]
 2799 009a 3C21     		mov	r1, #60
 2800 009c 8A43     		bic	r2, r1
 2801 009e 1A70     		strb	r2, [r3]
 769:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 2802              		.loc 1 769 0
 2803 00a0 7A68     		ldr	r2, [r7, #4]
 2804 00a2 934B     		ldr	r3, .L241+12
 2805 00a4 9A42     		cmp	r2, r3
 2806 00a6 11DC     		bgt	.L214
 770:../Sources/TFC/TFC_CrystalClock.c ****   {
 771:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2807              		.loc 1 771 0
 2808 00a8 FB1C     		add	r3, r7, #3
 2809 00aa 1B78     		ldrb	r3, [r3]
 2810 00ac DB00     		lsl	r3, r3, #3
 2811 00ae DAB2     		uxtb	r2, r3
 2812 00b0 BB1C     		add	r3, r7, #2
 2813 00b2 1B78     		ldrb	r3, [r3]
 2814 00b4 9B00     		lsl	r3, r3, #2
 2815 00b6 DBB2     		uxtb	r3, r3
 2816 00b8 1343     		orr	r3, r2
 2817 00ba D9B2     		uxtb	r1, r3
 2818 00bc 3B1C     		mov	r3, r7
 2819 00be 0E33     		add	r3, r3, #14
 2820 00c0 3A1C     		mov	r2, r7
 2821 00c2 0E32     		add	r2, r2, #14
 2822 00c4 1278     		ldrb	r2, [r2]
 2823 00c6 0A43     		orr	r2, r1
 2824 00c8 1A70     		strb	r2, [r3]
 2825 00ca 2CE0     		b	.L215
 2826              	.L214:
 772:../Sources/TFC/TFC_CrystalClock.c ****   }
 773:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 2827              		.loc 1 773 0
 2828 00cc 7A68     		ldr	r2, [r7, #4]
 2829 00ce 8B4B     		ldr	r3, .L241+24
 2830 00d0 9A42     		cmp	r2, r3
 2831 00d2 14DC     		bgt	.L216
 774:../Sources/TFC/TFC_CrystalClock.c ****   {
 775:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2832              		.loc 1 775 0
 2833 00d4 FB1C     		add	r3, r7, #3
 2834 00d6 1B78     		ldrb	r3, [r3]
 2835 00d8 DB00     		lsl	r3, r3, #3
 2836 00da DAB2     		uxtb	r2, r3
 2837 00dc BB1C     		add	r3, r7, #2
 2838 00de 1B78     		ldrb	r3, [r3]
 2839 00e0 9B00     		lsl	r3, r3, #2
 2840 00e2 DBB2     		uxtb	r3, r3
 2841 00e4 1343     		orr	r3, r2
 2842 00e6 DAB2     		uxtb	r2, r3
 2843 00e8 3B1C     		mov	r3, r7
 2844 00ea 0E33     		add	r3, r3, #14
 2845 00ec 1B78     		ldrb	r3, [r3]
 2846 00ee 1343     		orr	r3, r2
 2847 00f0 DAB2     		uxtb	r2, r3
 2848 00f2 3B1C     		mov	r3, r7
 2849 00f4 0E33     		add	r3, r3, #14
 2850 00f6 1021     		mov	r1, #16
 2851 00f8 0A43     		orr	r2, r1
 2852 00fa 1A70     		strb	r2, [r3]
 2853 00fc 13E0     		b	.L215
 2854              	.L216:
 776:../Sources/TFC/TFC_CrystalClock.c ****   }
 777:../Sources/TFC/TFC_CrystalClock.c ****   else
 778:../Sources/TFC/TFC_CrystalClock.c ****   {
 779:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 2855              		.loc 1 779 0
 2856 00fe FB1C     		add	r3, r7, #3
 2857 0100 1B78     		ldrb	r3, [r3]
 2858 0102 DB00     		lsl	r3, r3, #3
 2859 0104 DAB2     		uxtb	r2, r3
 2860 0106 BB1C     		add	r3, r7, #2
 2861 0108 1B78     		ldrb	r3, [r3]
 2862 010a 9B00     		lsl	r3, r3, #2
 2863 010c DBB2     		uxtb	r3, r3
 2864 010e 1343     		orr	r3, r2
 2865 0110 DAB2     		uxtb	r2, r3
 2866 0112 3B1C     		mov	r3, r7
 2867 0114 0E33     		add	r3, r3, #14
 2868 0116 1B78     		ldrb	r3, [r3]
 2869 0118 1343     		orr	r3, r2
 2870 011a DAB2     		uxtb	r2, r3
 2871 011c 3B1C     		mov	r3, r7
 2872 011e 0E33     		add	r3, r3, #14
 2873 0120 2021     		mov	r1, #32
 2874 0122 0A43     		orr	r2, r1
 2875 0124 1A70     		strb	r2, [r3]
 2876              	.L215:
 780:../Sources/TFC/TFC_CrystalClock.c ****   }
 781:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 2877              		.loc 1 781 0
 2878 0126 6F4B     		ldr	r3, .L241
 2879 0128 3A1C     		mov	r2, r7
 2880 012a 0E32     		add	r2, r2, #14
 2881 012c 1278     		ldrb	r2, [r2]
 2882 012e 5A70     		strb	r2, [r3, #1]
 782:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
 783:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
 784:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 2883              		.loc 1 784 0
 2884 0130 7A68     		ldr	r2, [r7, #4]
 2885 0132 734B     		ldr	r3, .L241+28
 2886 0134 9A42     		cmp	r2, r3
 2887 0136 04DC     		bgt	.L217
 2888              		.loc 1 784 0 is_stmt 0
 2889 0138 3B1C     		mov	r3, r7
 2890 013a 0F33     		add	r3, r3, #15
 2891 013c 0022     		mov	r2, #0
 2892 013e 1A70     		strb	r2, [r3]
 2893 0140 27E0     		b	.L218
 2894              	.L217:
 785:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 2895              		.loc 1 785 0 is_stmt 1
 2896 0142 7A68     		ldr	r2, [r7, #4]
 2897 0144 6F4B     		ldr	r3, .L241+32
 2898 0146 9A42     		cmp	r2, r3
 2899 0148 04DC     		bgt	.L219
 2900              		.loc 1 785 0 is_stmt 0
 2901 014a 3B1C     		mov	r3, r7
 2902 014c 0F33     		add	r3, r3, #15
 2903 014e 0122     		mov	r2, #1
 2904 0150 1A70     		strb	r2, [r3]
 2905 0152 1EE0     		b	.L218
 2906              	.L219:
 786:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 2907              		.loc 1 786 0 is_stmt 1
 2908 0154 7A68     		ldr	r2, [r7, #4]
 2909 0156 6C4B     		ldr	r3, .L241+36
 2910 0158 9A42     		cmp	r2, r3
 2911 015a 04DC     		bgt	.L220
 2912              		.loc 1 786 0 is_stmt 0
 2913 015c 3B1C     		mov	r3, r7
 2914 015e 0F33     		add	r3, r3, #15
 2915 0160 0222     		mov	r2, #2
 2916 0162 1A70     		strb	r2, [r3]
 2917 0164 15E0     		b	.L218
 2918              	.L220:
 787:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 2919              		.loc 1 787 0 is_stmt 1
 2920 0166 7A68     		ldr	r2, [r7, #4]
 2921 0168 684B     		ldr	r3, .L241+40
 2922 016a 9A42     		cmp	r2, r3
 2923 016c 04DC     		bgt	.L221
 2924              		.loc 1 787 0 is_stmt 0
 2925 016e 3B1C     		mov	r3, r7
 2926 0170 0F33     		add	r3, r3, #15
 2927 0172 0322     		mov	r2, #3
 2928 0174 1A70     		strb	r2, [r3]
 2929 0176 0CE0     		b	.L218
 2930              	.L221:
 788:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 2931              		.loc 1 788 0 is_stmt 1
 2932 0178 7A68     		ldr	r2, [r7, #4]
 2933 017a 654B     		ldr	r3, .L241+44
 2934 017c 9A42     		cmp	r2, r3
 2935 017e 04DC     		bgt	.L222
 2936              		.loc 1 788 0 is_stmt 0
 2937 0180 3B1C     		mov	r3, r7
 2938 0182 0F33     		add	r3, r3, #15
 2939 0184 0422     		mov	r2, #4
 2940 0186 1A70     		strb	r2, [r3]
 2941 0188 03E0     		b	.L218
 2942              	.L222:
 789:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 2943              		.loc 1 789 0 is_stmt 1
 2944 018a 3B1C     		mov	r3, r7
 2945 018c 0F33     		add	r3, r3, #15
 2946 018e 0522     		mov	r2, #5
 2947 0190 1A70     		strb	r2, [r3]
 2948              	.L218:
 790:../Sources/TFC/TFC_CrystalClock.c ****   
 791:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
 792:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
 793:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
 794:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 2949              		.loc 1 794 0
 2950 0192 544A     		ldr	r2, .L241
 2951 0194 3B1C     		mov	r3, r7
 2952 0196 0E33     		add	r3, r3, #14
 2953 0198 1278     		ldrb	r2, [r2]
 2954 019a 1A70     		strb	r2, [r3]
 795:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 2955              		.loc 1 795 0
 2956 019c 3B1C     		mov	r3, r7
 2957 019e 0E33     		add	r3, r3, #14
 2958 01a0 3A1C     		mov	r2, r7
 2959 01a2 0E32     		add	r2, r2, #14
 2960 01a4 1178     		ldrb	r1, [r2]
 2961 01a6 0322     		mov	r2, #3
 2962 01a8 0A40     		and	r2, r1
 2963 01aa 1A70     		strb	r2, [r3]
 796:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 2964              		.loc 1 796 0
 2965 01ac 3B1C     		mov	r3, r7
 2966 01ae 0F33     		add	r3, r3, #15
 2967 01b0 1B78     		ldrb	r3, [r3]
 2968 01b2 DB00     		lsl	r3, r3, #3
 2969 01b4 DAB2     		uxtb	r2, r3
 2970 01b6 3823     		mov	r3, #56
 2971 01b8 1340     		and	r3, r2
 2972 01ba DAB2     		uxtb	r2, r3
 2973 01bc 3B1C     		mov	r3, r7
 2974 01be 0E33     		add	r3, r3, #14
 2975 01c0 1B78     		ldrb	r3, [r3]
 2976 01c2 1343     		orr	r3, r2
 2977 01c4 DAB2     		uxtb	r2, r3
 2978 01c6 3B1C     		mov	r3, r7
 2979 01c8 0E33     		add	r3, r3, #14
 2980 01ca 8021     		mov	r1, #128
 2981 01cc 4942     		neg	r1, r1
 2982 01ce 0A43     		orr	r2, r1
 2983 01d0 1A70     		strb	r2, [r3]
 797:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 2984              		.loc 1 797 0
 2985 01d2 444B     		ldr	r3, .L241
 2986 01d4 3A1C     		mov	r2, r7
 2987 01d6 0E32     		add	r2, r2, #14
 2988 01d8 1278     		ldrb	r2, [r2]
 2989 01da 1A70     		strb	r2, [r3]
 798:../Sources/TFC/TFC_CrystalClock.c **** 
 799:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
 800:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 2990              		.loc 1 800 0
 2991 01dc BB1C     		add	r3, r7, #2
 2992 01de 1B78     		ldrb	r3, [r3]
 2993 01e0 002B     		cmp	r3, #0
 2994 01e2 24D0     		beq	.L223
 801:../Sources/TFC/TFC_CrystalClock.c ****   {
 802:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 2995              		.loc 1 802 0
 2996 01e4 3B1C     		mov	r3, r7
 2997 01e6 0C33     		add	r3, r3, #12
 2998 01e8 0022     		mov	r2, #0
 2999 01ea 1A80     		strh	r2, [r3]
 3000 01ec 0DE0     		b	.L224
 3001              	.L227:
 803:../Sources/TFC/TFC_CrystalClock.c ****     {
 804:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 3002              		.loc 1 804 0
 3003 01ee 3D4B     		ldr	r3, .L241
 3004 01f0 9B79     		ldrb	r3, [r3, #6]
 3005 01f2 DBB2     		uxtb	r3, r3
 3006 01f4 1A1C     		mov	r2, r3
 3007 01f6 0223     		mov	r3, #2
 3008 01f8 1340     		and	r3, r2
 3009 01fa 0ED1     		bne	.L238
 3010              	.L225:
 802:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 3011              		.loc 1 802 0
 3012 01fc 3B1C     		mov	r3, r7
 3013 01fe 0C33     		add	r3, r3, #12
 3014 0200 3A1C     		mov	r2, r7
 3015 0202 0C32     		add	r2, r2, #12
 3016 0204 1288     		ldrh	r2, [r2]
 3017 0206 0132     		add	r2, r2, #1
 3018 0208 1A80     		strh	r2, [r3]
 3019              	.L224:
 802:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 3020              		.loc 1 802 0 is_stmt 0
 3021 020a 3B1C     		mov	r3, r7
 3022 020c 0C33     		add	r3, r3, #12
 3023 020e 0021     		mov	r1, #0
 3024 0210 5A5E     		ldrsh	r2, [r3, r1]
 3025 0212 404B     		ldr	r3, .L241+48
 3026 0214 9A42     		cmp	r2, r3
 3027 0216 EADD     		ble	.L227
 3028 0218 00E0     		b	.L226
 3029              	.L238:
 3030              		.loc 1 804 0 is_stmt 1
 3031 021a C046     		mov	r8, r8
 3032              	.L226:
 805:../Sources/TFC/TFC_CrystalClock.c ****     }
 806:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 3033              		.loc 1 806 0
 3034 021c 314B     		ldr	r3, .L241
 3035 021e 9B79     		ldrb	r3, [r3, #6]
 3036 0220 DBB2     		uxtb	r3, r3
 3037 0222 1A1C     		mov	r2, r3
 3038 0224 0223     		mov	r3, #2
 3039 0226 1340     		and	r3, r2
 3040 0228 01D1     		bne	.L223
 3041              		.loc 1 806 0 is_stmt 0
 3042 022a 2323     		mov	r3, #35
 3043 022c 56E0     		b	.L208
 3044              	.L223:
 807:../Sources/TFC/TFC_CrystalClock.c ****   }
 808:../Sources/TFC/TFC_CrystalClock.c **** 
 809:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
 810:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3045              		.loc 1 810 0 is_stmt 1
 3046 022e 3B1C     		mov	r3, r7
 3047 0230 0C33     		add	r3, r3, #12
 3048 0232 0022     		mov	r2, #0
 3049 0234 1A80     		strh	r2, [r3]
 3050 0236 0DE0     		b	.L228
 3051              	.L231:
 811:../Sources/TFC/TFC_CrystalClock.c ****   {
 812:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 3052              		.loc 1 812 0
 3053 0238 2A4B     		ldr	r3, .L241
 3054 023a 9B79     		ldrb	r3, [r3, #6]
 3055 023c DBB2     		uxtb	r3, r3
 3056 023e 1A1C     		mov	r2, r3
 3057 0240 1023     		mov	r3, #16
 3058 0242 1340     		and	r3, r2
 3059 0244 0ED0     		beq	.L239
 3060              	.L229:
 810:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3061              		.loc 1 810 0
 3062 0246 3B1C     		mov	r3, r7
 3063 0248 0C33     		add	r3, r3, #12
 3064 024a 3A1C     		mov	r2, r7
 3065 024c 0C32     		add	r2, r2, #12
 3066 024e 1288     		ldrh	r2, [r2]
 3067 0250 0132     		add	r2, r2, #1
 3068 0252 1A80     		strh	r2, [r3]
 3069              	.L228:
 810:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3070              		.loc 1 810 0 is_stmt 0
 3071 0254 3B1C     		mov	r3, r7
 3072 0256 0C33     		add	r3, r3, #12
 3073 0258 0021     		mov	r1, #0
 3074 025a 5A5E     		ldrsh	r2, [r3, r1]
 3075 025c 2E4B     		ldr	r3, .L241+52
 3076 025e 9A42     		cmp	r2, r3
 3077 0260 EADD     		ble	.L231
 3078 0262 00E0     		b	.L230
 3079              	.L239:
 3080              		.loc 1 812 0 is_stmt 1
 3081 0264 C046     		mov	r8, r8
 3082              	.L230:
 813:../Sources/TFC/TFC_CrystalClock.c ****   }
 814:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 3083              		.loc 1 814 0
 3084 0266 1F4B     		ldr	r3, .L241
 3085 0268 9B79     		ldrb	r3, [r3, #6]
 3086 026a DBB2     		uxtb	r3, r3
 3087 026c 1A1C     		mov	r2, r3
 3088 026e 1023     		mov	r3, #16
 3089 0270 1340     		and	r3, r2
 3090 0272 01D0     		beq	.L232
 3091              		.loc 1 814 0 is_stmt 0
 3092 0274 1123     		mov	r3, #17
 3093 0276 31E0     		b	.L208
 3094              	.L232:
 815:../Sources/TFC/TFC_CrystalClock.c ****   
 816:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
 817:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3095              		.loc 1 817 0 is_stmt 1
 3096 0278 3B1C     		mov	r3, r7
 3097 027a 0C33     		add	r3, r3, #12
 3098 027c 0022     		mov	r2, #0
 3099 027e 1A80     		strh	r2, [r3]
 3100 0280 0FE0     		b	.L233
 3101              	.L236:
 818:../Sources/TFC/TFC_CrystalClock.c ****   {
 819:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 3102              		.loc 1 819 0
 3103 0282 184B     		ldr	r3, .L241
 3104 0284 9B79     		ldrb	r3, [r3, #6]
 3105 0286 DBB2     		uxtb	r3, r3
 3106 0288 1A1C     		mov	r2, r3
 3107 028a 0C23     		mov	r3, #12
 3108 028c 1340     		and	r3, r2
 3109 028e 9B08     		lsr	r3, r3, #2
 3110 0290 022B     		cmp	r3, #2
 3111 0292 0ED0     		beq	.L240
 3112              	.L234:
 817:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3113              		.loc 1 817 0
 3114 0294 3B1C     		mov	r3, r7
 3115 0296 0C33     		add	r3, r3, #12
 3116 0298 3A1C     		mov	r2, r7
 3117 029a 0C32     		add	r2, r2, #12
 3118 029c 1288     		ldrh	r2, [r2]
 3119 029e 0132     		add	r2, r2, #1
 3120 02a0 1A80     		strh	r2, [r3]
 3121              	.L233:
 817:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3122              		.loc 1 817 0 is_stmt 0
 3123 02a2 3B1C     		mov	r3, r7
 3124 02a4 0C33     		add	r3, r3, #12
 3125 02a6 0021     		mov	r1, #0
 3126 02a8 5A5E     		ldrsh	r2, [r3, r1]
 3127 02aa 1B4B     		ldr	r3, .L241+52
 3128 02ac 9A42     		cmp	r2, r3
 3129 02ae E8DD     		ble	.L236
 3130 02b0 00E0     		b	.L235
 3131              	.L240:
 3132              		.loc 1 819 0 is_stmt 1
 3133 02b2 C046     		mov	r8, r8
 3134              	.L235:
 820:../Sources/TFC/TFC_CrystalClock.c ****   }
 821:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 3135              		.loc 1 821 0
 3136 02b4 0B4B     		ldr	r3, .L241
 3137 02b6 9B79     		ldrb	r3, [r3, #6]
 3138 02b8 DBB2     		uxtb	r3, r3
 3139 02ba 1A1C     		mov	r2, r3
 3140 02bc 0C23     		mov	r3, #12
 3141 02be 1340     		and	r3, r2
 3142 02c0 9B08     		lsr	r3, r3, #2
 3143 02c2 022B     		cmp	r3, #2
 3144 02c4 01D0     		beq	.L237
 3145              		.loc 1 821 0 is_stmt 0
 3146 02c6 1A23     		mov	r3, #26
 3147 02c8 08E0     		b	.L208
 3148              	.L237:
 822:../Sources/TFC/TFC_CrystalClock.c ****  
 823:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
 824:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
 825:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
 826:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 3149              		.loc 1 826 0 is_stmt 1
 3150 02ca 064B     		ldr	r3, .L241
 3151 02cc 054A     		ldr	r2, .L241
 3152 02ce 5279     		ldrb	r2, [r2, #5]
 3153 02d0 D2B2     		uxtb	r2, r2
 3154 02d2 2021     		mov	r1, #32
 3155 02d4 0A43     		orr	r2, r1
 3156 02d6 D2B2     		uxtb	r2, r2
 3157 02d8 5A71     		strb	r2, [r3, #5]
 827:../Sources/TFC/TFC_CrystalClock.c ****   
 828:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency
 3158              		.loc 1 828 0
 3159 02da 7B68     		ldr	r3, [r7, #4]
 3160              	.L208:
 829:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fbe
 3161              		.loc 1 829 0
 3162 02dc 181C     		mov	r0, r3
 3163 02de BD46     		mov	sp, r7
 3164 02e0 04B0     		add	sp, sp, #16
 3165              		@ sp needed for prologue
 3166 02e2 80BD     		pop	{r7, pc}
 3167              	.L242:
 3168              		.align	2
 3169              	.L241:
 3170 02e4 00400640 		.word	1074151424
 3171 02e8 80F0FA02 		.word	50000000
 3172 02ec 2F750000 		.word	29999
 3173 02f0 409C0000 		.word	40000
 3174 02f4 BFC62D00 		.word	2999999
 3175 02f8 0048E801 		.word	32000000
 3176 02fc 00127A00 		.word	8000000
 3177 0300 D0121300 		.word	1250000
 3178 0304 A0252600 		.word	2500000
 3179 0308 404B4C00 		.word	5000000
 3180 030c 80969800 		.word	10000000
 3181 0310 002D3101 		.word	20000000
 3182 0314 0F270000 		.word	9999
 3183 0318 CF070000 		.word	1999
 3184              		.cfi_endproc
 3185              	.LFE11:
 3187              		.section	.text.fbe_fee,"ax",%progbits
 3188              		.align	2
 3189              		.global	fbe_fee
 3190              		.code	16
 3191              		.thumb_func
 3193              	fbe_fee:
 3194              	.LFB12:
 830:../Sources/TFC/TFC_CrystalClock.c **** 
 831:../Sources/TFC/TFC_CrystalClock.c **** 
 832:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fee(int crystal_val)
 833:../Sources/TFC/TFC_CrystalClock.c **** {
 3195              		.loc 1 833 0
 3196              		.cfi_startproc
 3197 0000 80B5     		push	{r7, lr}
 3198              	.LCFI36:
 3199              		.cfi_def_cfa_offset 8
 3200              		.cfi_offset 7, -8
 3201              		.cfi_offset 14, -4
 3202 0002 84B0     		sub	sp, sp, #16
 3203              	.LCFI37:
 3204              		.cfi_def_cfa_offset 24
 3205 0004 00AF     		add	r7, sp, #0
 3206              	.LCFI38:
 3207              		.cfi_def_cfa_register 7
 3208 0006 7860     		str	r0, [r7, #4]
 834:../Sources/TFC/TFC_CrystalClock.c ****   short i, fll_ref_freq;
 835:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
 836:../Sources/TFC/TFC_CrystalClock.c **** 
 837:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 838:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3209              		.loc 1 838 0
 3210 0008 494B     		ldr	r3, .L256
 3211 000a 9B79     		ldrb	r3, [r3, #6]
 3212 000c DBB2     		uxtb	r3, r3
 3213 000e 1A1C     		mov	r2, r3
 3214 0010 0C23     		mov	r3, #12
 3215 0012 1340     		and	r3, r2
 3216 0014 9B08     		lsr	r3, r3, #2
 3217 0016 022B     		cmp	r3, #2
 3218 0018 14D1     		bne	.L244
 839:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3219              		.loc 1 839 0
 3220 001a 454B     		ldr	r3, .L256
 3221 001c 9B79     		ldrb	r3, [r3, #6]
 3222 001e DBB2     		uxtb	r3, r3
 3223 0020 1A1C     		mov	r2, r3
 3224 0022 1023     		mov	r3, #16
 3225 0024 1340     		and	r3, r2
 838:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3226              		.loc 1 838 0
 3227 0026 0DD1     		bne	.L244
 840:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3228              		.loc 1 840 0
 3229 0028 414B     		ldr	r3, .L256
 3230 002a 9B79     		ldrb	r3, [r3, #6]
 3231 002c DBB2     		uxtb	r3, r3
 3232 002e 1A1C     		mov	r2, r3
 3233 0030 2023     		mov	r3, #32
 3234 0032 1340     		and	r3, r2
 839:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3235              		.loc 1 839 0
 3236 0034 06D1     		bne	.L244
 841:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 3237              		.loc 1 841 0
 3238 0036 3E4B     		ldr	r3, .L256
 3239 0038 5B78     		ldrb	r3, [r3, #1]
 3240 003a DBB2     		uxtb	r3, r3
 3241 003c 1A1C     		mov	r2, r3
 3242 003e 0223     		mov	r3, #2
 3243 0040 1340     		and	r3, r2
 838:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3244              		.loc 1 838 0
 3245 0042 01D0     		beq	.L245
 3246              	.L244:
 842:../Sources/TFC/TFC_CrystalClock.c ****   {
 843:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 3247              		.loc 1 843 0
 3248 0044 0423     		mov	r3, #4
 3249 0046 6EE0     		b	.L246
 3250              	.L245:
 844:../Sources/TFC/TFC_CrystalClock.c ****   }
 845:../Sources/TFC/TFC_CrystalClock.c ****   
 846:../Sources/TFC/TFC_CrystalClock.c ****   // The FLL ref clk divide value depends on FRDIV and the RANGE value
 847:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 3251              		.loc 1 847 0
 3252 0048 394B     		ldr	r3, .L256
 3253 004a 5B78     		ldrb	r3, [r3, #1]
 3254 004c DBB2     		uxtb	r3, r3
 3255 004e 1A1C     		mov	r2, r3
 3256 0050 3023     		mov	r3, #48
 3257 0052 1340     		and	r3, r2
 3258 0054 1B09     		lsr	r3, r3, #4
 3259 0056 14D0     		beq	.L247
 848:../Sources/TFC/TFC_CrystalClock.c ****   {
 849:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = (crystal_val / (32 << ((MCG_C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT)));
 3260              		.loc 1 849 0
 3261 0058 354B     		ldr	r3, .L256
 3262 005a 1B78     		ldrb	r3, [r3]
 3263 005c DBB2     		uxtb	r3, r3
 3264 005e 1A1C     		mov	r2, r3
 3265 0060 3823     		mov	r3, #56
 3266 0062 1340     		and	r3, r2
 3267 0064 DB08     		lsr	r3, r3, #3
 3268 0066 2022     		mov	r2, #32
 3269 0068 111C     		mov	r1, r2
 3270 006a 9940     		lsl	r1, r1, r3
 3271 006c 0B1C     		mov	r3, r1
 3272 006e 7868     		ldr	r0, [r7, #4]
 3273 0070 191C     		mov	r1, r3
 3274 0072 FFF7FEFF 		bl	__aeabi_idiv
 3275 0076 031C     		mov	r3, r0
 3276 0078 1A1C     		mov	r2, r3
 3277 007a 3B1C     		mov	r3, r7
 3278 007c 0C33     		add	r3, r3, #12
 3279 007e 1A80     		strh	r2, [r3]
 3280 0080 13E0     		b	.L248
 3281              	.L247:
 850:../Sources/TFC/TFC_CrystalClock.c ****   }
 851:../Sources/TFC/TFC_CrystalClock.c ****   else
 852:../Sources/TFC/TFC_CrystalClock.c ****   {
 853:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT)))
 3282              		.loc 1 853 0
 3283 0082 2B4B     		ldr	r3, .L256
 3284 0084 5B78     		ldrb	r3, [r3, #1]
 3285 0086 DBB2     		uxtb	r3, r3
 3286 0088 1A1C     		mov	r2, r3
 3287 008a 3023     		mov	r3, #48
 3288 008c 1340     		and	r3, r2
 3289 008e 1B09     		lsr	r3, r3, #4
 3290 0090 0122     		mov	r2, #1
 3291 0092 111C     		mov	r1, r2
 3292 0094 9940     		lsl	r1, r1, r3
 3293 0096 0B1C     		mov	r3, r1
 3294 0098 7868     		ldr	r0, [r7, #4]
 3295 009a 191C     		mov	r1, r3
 3296 009c FFF7FEFF 		bl	__aeabi_idiv
 3297 00a0 031C     		mov	r3, r0
 3298 00a2 1A1C     		mov	r2, r3
 3299 00a4 3B1C     		mov	r3, r7
 3300 00a6 0C33     		add	r3, r3, #12
 3301 00a8 1A80     		strh	r2, [r3]
 3302              	.L248:
 854:../Sources/TFC/TFC_CrystalClock.c ****   }
 855:../Sources/TFC/TFC_CrystalClock.c ****   
 856:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
 857:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 3303              		.loc 1 857 0
 3304 00aa 3B1C     		mov	r3, r7
 3305 00ac 0C33     		add	r3, r3, #12
 3306 00ae 0022     		mov	r2, #0
 3307 00b0 9B5E     		ldrsh	r3, [r3, r2]
 3308 00b2 181C     		mov	r0, r3
 3309 00b4 FFF7FEFF 		bl	fll_freq
 3310 00b8 031C     		mov	r3, r0
 3311 00ba BB60     		str	r3, [r7, #8]
 858:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 3312              		.loc 1 858 0
 3313 00bc BB68     		ldr	r3, [r7, #8]
 3314 00be 3B2B     		cmp	r3, #59
 3315 00c0 01DC     		bgt	.L249
 3316              		.loc 1 858 0 is_stmt 0
 3317 00c2 BB68     		ldr	r3, [r7, #8]
 3318 00c4 2FE0     		b	.L246
 3319              	.L249:
 859:../Sources/TFC/TFC_CrystalClock.c ****   
 860:../Sources/TFC/TFC_CrystalClock.c **** // Clear CLKS field to switch CLKS mux to select FLL output
 861:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 &= ~MCG_C1_CLKS_MASK; // clear CLKS to select FLL output
 3320              		.loc 1 861 0 is_stmt 1
 3321 00c6 1A4B     		ldr	r3, .L256
 3322 00c8 194A     		ldr	r2, .L256
 3323 00ca 1278     		ldrb	r2, [r2]
 3324 00cc D1B2     		uxtb	r1, r2
 3325 00ce 3F22     		mov	r2, #63
 3326 00d0 0A40     		and	r2, r1
 3327 00d2 D2B2     		uxtb	r2, r2
 3328 00d4 1A70     		strb	r2, [r3]
 862:../Sources/TFC/TFC_CrystalClock.c **** 
 863:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is FLL
 864:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3329              		.loc 1 864 0
 3330 00d6 3B1C     		mov	r3, r7
 3331 00d8 0E33     		add	r3, r3, #14
 3332 00da 0022     		mov	r2, #0
 3333 00dc 1A80     		strh	r2, [r3]
 3334 00de 0EE0     		b	.L250
 3335              	.L253:
 865:../Sources/TFC/TFC_CrystalClock.c ****   {
 866:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 3336              		.loc 1 866 0
 3337 00e0 134B     		ldr	r3, .L256
 3338 00e2 9B79     		ldrb	r3, [r3, #6]
 3339 00e4 DBB2     		uxtb	r3, r3
 3340 00e6 1A1C     		mov	r2, r3
 3341 00e8 0C23     		mov	r3, #12
 3342 00ea 1340     		and	r3, r2
 3343 00ec 9B08     		lsr	r3, r3, #2
 3344 00ee 0ED0     		beq	.L255
 3345              	.L251:
 864:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3346              		.loc 1 864 0
 3347 00f0 3B1C     		mov	r3, r7
 3348 00f2 0E33     		add	r3, r3, #14
 3349 00f4 3A1C     		mov	r2, r7
 3350 00f6 0E32     		add	r2, r2, #14
 3351 00f8 1288     		ldrh	r2, [r2]
 3352 00fa 0132     		add	r2, r2, #1
 3353 00fc 1A80     		strh	r2, [r3]
 3354              	.L250:
 864:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3355              		.loc 1 864 0 is_stmt 0
 3356 00fe 3B1C     		mov	r3, r7
 3357 0100 0E33     		add	r3, r3, #14
 3358 0102 0021     		mov	r1, #0
 3359 0104 5A5E     		ldrsh	r2, [r3, r1]
 3360 0106 0B4B     		ldr	r3, .L256+4
 3361 0108 9A42     		cmp	r2, r3
 3362 010a E9DD     		ble	.L253
 3363 010c 00E0     		b	.L252
 3364              	.L255:
 3365              		.loc 1 866 0 is_stmt 1
 3366 010e C046     		mov	r8, r8
 3367              	.L252:
 867:../Sources/TFC/TFC_CrystalClock.c ****   }
 868:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really
 3368              		.loc 1 868 0
 3369 0110 074B     		ldr	r3, .L256
 3370 0112 9B79     		ldrb	r3, [r3, #6]
 3371 0114 DBB2     		uxtb	r3, r3
 3372 0116 1A1C     		mov	r2, r3
 3373 0118 0C23     		mov	r3, #12
 3374 011a 1340     		and	r3, r2
 3375 011c 9B08     		lsr	r3, r3, #2
 3376 011e 01D0     		beq	.L254
 3377              		.loc 1 868 0 is_stmt 0
 3378 0120 1823     		mov	r3, #24
 3379 0122 00E0     		b	.L246
 3380              	.L254:
 869:../Sources/TFC/TFC_CrystalClock.c ****   
 870:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEE mode
 871:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;
 3381              		.loc 1 871 0 is_stmt 1
 3382 0124 BB68     		ldr	r3, [r7, #8]
 3383              	.L246:
 872:../Sources/TFC/TFC_CrystalClock.c **** } // fbe_fee
 3384              		.loc 1 872 0
 3385 0126 181C     		mov	r0, r3
 3386 0128 BD46     		mov	sp, r7
 3387 012a 04B0     		add	sp, sp, #16
 3388              		@ sp needed for prologue
 3389 012c 80BD     		pop	{r7, pc}
 3390              	.L257:
 3391 012e C046     		.align	2
 3392              	.L256:
 3393 0130 00400640 		.word	1074151424
 3394 0134 CF070000 		.word	1999
 3395              		.cfi_endproc
 3396              	.LFE12:
 3398              		.section	.text.fee_fbe,"ax",%progbits
 3399              		.align	2
 3400              		.global	fee_fbe
 3401              		.code	16
 3402              		.thumb_func
 3404              	fee_fbe:
 3405              	.LFB13:
 873:../Sources/TFC/TFC_CrystalClock.c **** 
 874:../Sources/TFC/TFC_CrystalClock.c **** 
 875:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbe(int crystal_val)
 876:../Sources/TFC/TFC_CrystalClock.c **** { 
 3406              		.loc 1 876 0
 3407              		.cfi_startproc
 3408 0000 80B5     		push	{r7, lr}
 3409              	.LCFI39:
 3410              		.cfi_def_cfa_offset 8
 3411              		.cfi_offset 7, -8
 3412              		.cfi_offset 14, -4
 3413 0002 84B0     		sub	sp, sp, #16
 3414              	.LCFI40:
 3415              		.cfi_def_cfa_offset 24
 3416 0004 00AF     		add	r7, sp, #0
 3417              	.LCFI41:
 3418              		.cfi_def_cfa_register 7
 3419 0006 7860     		str	r0, [r7, #4]
 877:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 878:../Sources/TFC/TFC_CrystalClock.c ****   
 879:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
 880:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3420              		.loc 1 880 0
 3421 0008 274B     		ldr	r3, .L268
 3422 000a 9B79     		ldrb	r3, [r3, #6]
 3423 000c DBB2     		uxtb	r3, r3
 3424 000e 1A1C     		mov	r2, r3
 3425 0010 0C23     		mov	r3, #12
 3426 0012 1340     		and	r3, r2
 3427 0014 9B08     		lsr	r3, r3, #2
 3428 0016 0DD1     		bne	.L259
 881:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3429              		.loc 1 881 0
 3430 0018 234B     		ldr	r3, .L268
 3431 001a 9B79     		ldrb	r3, [r3, #6]
 3432 001c DBB2     		uxtb	r3, r3
 3433 001e 1A1C     		mov	r2, r3
 3434 0020 1023     		mov	r3, #16
 3435 0022 1340     		and	r3, r2
 880:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3436              		.loc 1 880 0
 3437 0024 06D1     		bne	.L259
 882:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 3438              		.loc 1 882 0
 3439 0026 204B     		ldr	r3, .L268
 3440 0028 9B79     		ldrb	r3, [r3, #6]
 3441 002a DBB2     		uxtb	r3, r3
 3442 002c 1A1C     		mov	r2, r3
 3443 002e 2023     		mov	r3, #32
 3444 0030 1340     		and	r3, r2
 880:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 3445              		.loc 1 880 0
 3446 0032 01D0     		beq	.L260
 3447              	.L259:
 883:../Sources/TFC/TFC_CrystalClock.c ****   {
 884:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                       // return error code
 3448              		.loc 1 884 0
 3449 0034 0223     		mov	r3, #2
 3450 0036 32E0     		b	.L261
 3451              	.L260:
 885:../Sources/TFC/TFC_CrystalClock.c ****   }
 886:../Sources/TFC/TFC_CrystalClock.c ****   
 887:../Sources/TFC/TFC_CrystalClock.c **** // Set CLKS field to 2 to switch CLKS mux to select ext ref clock
 888:../Sources/TFC/TFC_CrystalClock.c **** // MCG is current in FEE mode so CLKS field = 0 so can just OR in new value
 889:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(2); // set CLKS to select ext ref clock
 3452              		.loc 1 889 0
 3453 0038 1B4B     		ldr	r3, .L268
 3454 003a 1B4A     		ldr	r2, .L268
 3455 003c 1278     		ldrb	r2, [r2]
 3456 003e D2B2     		uxtb	r2, r2
 3457 0040 8021     		mov	r1, #128
 3458 0042 4942     		neg	r1, r1
 3459 0044 0A43     		orr	r2, r1
 3460 0046 D2B2     		uxtb	r2, r2
 3461 0048 1A70     		strb	r2, [r3]
 890:../Sources/TFC/TFC_CrystalClock.c **** 
 891:../Sources/TFC/TFC_CrystalClock.c **** /// Wait for clock status bits to show clock source is ext ref clk
 892:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3462              		.loc 1 892 0
 3463 004a 3B1C     		mov	r3, r7
 3464 004c 0E33     		add	r3, r3, #14
 3465 004e 0022     		mov	r2, #0
 3466 0050 1A80     		strh	r2, [r3]
 3467 0052 0FE0     		b	.L262
 3468              	.L265:
 893:../Sources/TFC/TFC_CrystalClock.c ****   {
 894:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 3469              		.loc 1 894 0
 3470 0054 144B     		ldr	r3, .L268
 3471 0056 9B79     		ldrb	r3, [r3, #6]
 3472 0058 DBB2     		uxtb	r3, r3
 3473 005a 1A1C     		mov	r2, r3
 3474 005c 0C23     		mov	r3, #12
 3475 005e 1340     		and	r3, r2
 3476 0060 9B08     		lsr	r3, r3, #2
 3477 0062 022B     		cmp	r3, #2
 3478 0064 0ED0     		beq	.L267
 3479              	.L263:
 892:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3480              		.loc 1 892 0
 3481 0066 3B1C     		mov	r3, r7
 3482 0068 0E33     		add	r3, r3, #14
 3483 006a 3A1C     		mov	r2, r7
 3484 006c 0E32     		add	r2, r2, #14
 3485 006e 1288     		ldrh	r2, [r2]
 3486 0070 0132     		add	r2, r2, #1
 3487 0072 1A80     		strh	r2, [r3]
 3488              	.L262:
 892:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3489              		.loc 1 892 0 is_stmt 0
 3490 0074 3B1C     		mov	r3, r7
 3491 0076 0E33     		add	r3, r3, #14
 3492 0078 0021     		mov	r1, #0
 3493 007a 5A5E     		ldrsh	r2, [r3, r1]
 3494 007c 0B4B     		ldr	r3, .L268+4
 3495 007e 9A42     		cmp	r2, r3
 3496 0080 E8DD     		ble	.L265
 3497 0082 00E0     		b	.L264
 3498              	.L267:
 3499              		.loc 1 894 0 is_stmt 1
 3500 0084 C046     		mov	r8, r8
 3501              	.L264:
 895:../Sources/TFC/TFC_CrystalClock.c ****   }
 896:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 3502              		.loc 1 896 0
 3503 0086 084B     		ldr	r3, .L268
 3504 0088 9B79     		ldrb	r3, [r3, #6]
 3505 008a DBB2     		uxtb	r3, r3
 3506 008c 1A1C     		mov	r2, r3
 3507 008e 0C23     		mov	r3, #12
 3508 0090 1340     		and	r3, r2
 3509 0092 9B08     		lsr	r3, r3, #2
 3510 0094 022B     		cmp	r3, #2
 3511 0096 01D0     		beq	.L266
 3512              		.loc 1 896 0 is_stmt 0
 3513 0098 1A23     		mov	r3, #26
 3514 009a 00E0     		b	.L261
 3515              	.L266:
 897:../Sources/TFC/TFC_CrystalClock.c ****   
 898:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE mode
 899:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val;
 3516              		.loc 1 899 0 is_stmt 1
 3517 009c 7B68     		ldr	r3, [r7, #4]
 3518              	.L261:
 900:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fbe
 3519              		.loc 1 900 0
 3520 009e 181C     		mov	r0, r3
 3521 00a0 BD46     		mov	sp, r7
 3522 00a2 04B0     		add	sp, sp, #16
 3523              		@ sp needed for prologue
 3524 00a4 80BD     		pop	{r7, pc}
 3525              	.L269:
 3526 00a6 C046     		.align	2
 3527              	.L268:
 3528 00a8 00400640 		.word	1074151424
 3529 00ac CF070000 		.word	1999
 3530              		.cfi_endproc
 3531              	.LFE13:
 3533              		.section	.text.fbe_fbi,"ax",%progbits
 3534              		.align	2
 3535              		.global	fbe_fbi
 3536              		.code	16
 3537              		.thumb_func
 3539              	fbe_fbi:
 3540              	.LFB14:
 901:../Sources/TFC/TFC_CrystalClock.c **** 
 902:../Sources/TFC/TFC_CrystalClock.c **** 
 903:../Sources/TFC/TFC_CrystalClock.c **** int fbe_fbi(int irc_freq, unsigned char irc_select)
 904:../Sources/TFC/TFC_CrystalClock.c **** {
 3541              		.loc 1 904 0
 3542              		.cfi_startproc
 3543 0000 80B5     		push	{r7, lr}
 3544              	.LCFI42:
 3545              		.cfi_def_cfa_offset 8
 3546              		.cfi_offset 7, -8
 3547              		.cfi_offset 14, -4
 3548 0002 84B0     		sub	sp, sp, #16
 3549              	.LCFI43:
 3550              		.cfi_def_cfa_offset 24
 3551 0004 00AF     		add	r7, sp, #0
 3552              	.LCFI44:
 3553              		.cfi_def_cfa_register 7
 3554 0006 7860     		str	r0, [r7, #4]
 3555 0008 0A1C     		mov	r2, r1
 3556 000a FB1C     		add	r3, r7, #3
 3557 000c 1A70     		strb	r2, [r3]
 905:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 906:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
 907:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 908:../Sources/TFC/TFC_CrystalClock.c ****   
 909:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FBE mode
 910:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3558              		.loc 1 910 0
 3559 000e 944B     		ldr	r3, .L305
 3560 0010 9B79     		ldrb	r3, [r3, #6]
 3561 0012 DBB2     		uxtb	r3, r3
 3562 0014 1A1C     		mov	r2, r3
 3563 0016 0C23     		mov	r3, #12
 3564 0018 1340     		and	r3, r2
 3565 001a 9B08     		lsr	r3, r3, #2
 3566 001c 022B     		cmp	r3, #2
 3567 001e 14D1     		bne	.L271
 911:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3568              		.loc 1 911 0
 3569 0020 8F4B     		ldr	r3, .L305
 3570 0022 9B79     		ldrb	r3, [r3, #6]
 3571 0024 DBB2     		uxtb	r3, r3
 3572 0026 1A1C     		mov	r2, r3
 3573 0028 1023     		mov	r3, #16
 3574 002a 1340     		and	r3, r2
 910:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3575              		.loc 1 910 0
 3576 002c 0DD1     		bne	.L271
 912:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 3577              		.loc 1 912 0
 3578 002e 8C4B     		ldr	r3, .L305
 3579 0030 9B79     		ldrb	r3, [r3, #6]
 3580 0032 DBB2     		uxtb	r3, r3
 3581 0034 1A1C     		mov	r2, r3
 3582 0036 2023     		mov	r3, #32
 3583 0038 1340     		and	r3, r2
 911:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                               // check FLL ref is external 
 3584              		.loc 1 911 0
 3585 003a 06D1     		bne	.L271
 913:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check MCG_C2[LP] bit is no
 3586              		.loc 1 913 0
 3587 003c 884B     		ldr	r3, .L305
 3588 003e 5B78     		ldrb	r3, [r3, #1]
 3589 0040 DBB2     		uxtb	r3, r3
 3590 0042 1A1C     		mov	r2, r3
 3591 0044 0223     		mov	r3, #2
 3592 0046 1340     		and	r3, r2
 910:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selcted
 3593              		.loc 1 910 0
 3594 0048 01D0     		beq	.L272
 3595              	.L271:
 914:../Sources/TFC/TFC_CrystalClock.c ****   {
 915:../Sources/TFC/TFC_CrystalClock.c ****     return 0x4;                                                       // return error code
 3596              		.loc 1 915 0
 3597 004a 0423     		mov	r3, #4
 3598 004c 04E1     		b	.L273
 3599              	.L272:
 916:../Sources/TFC/TFC_CrystalClock.c ****   }
 917:../Sources/TFC/TFC_CrystalClock.c **** 
 918:../Sources/TFC/TFC_CrystalClock.c **** // Check that the irc frequency matches the selected IRC 
 919:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 3600              		.loc 1 919 0
 3601 004e FB1C     		add	r3, r7, #3
 3602 0050 1B78     		ldrb	r3, [r3]
 3603 0052 002B     		cmp	r3, #0
 3604 0054 09D1     		bne	.L274
 920:../Sources/TFC/TFC_CrystalClock.c ****   {    
 921:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 3605              		.loc 1 921 0
 3606 0056 7A68     		ldr	r2, [r7, #4]
 3607 0058 824B     		ldr	r3, .L305+4
 3608 005a 9A42     		cmp	r2, r3
 3609 005c 03DD     		ble	.L275
 3610              		.loc 1 921 0 is_stmt 0
 3611 005e 7A68     		ldr	r2, [r7, #4]
 3612 0060 814B     		ldr	r3, .L305+8
 3613 0062 9A42     		cmp	r2, r3
 3614 0064 0BDD     		ble	.L276
 3615              	.L275:
 3616              		.loc 1 921 0
 3617 0066 3123     		mov	r3, #49
 3618 0068 F6E0     		b	.L273
 3619              	.L274:
 922:../Sources/TFC/TFC_CrystalClock.c ****   }
 923:../Sources/TFC/TFC_CrystalClock.c ****   else
 924:../Sources/TFC/TFC_CrystalClock.c ****   {
 925:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 3620              		.loc 1 925 0 is_stmt 1
 3621 006a 7A68     		ldr	r2, [r7, #4]
 3622 006c 7F4B     		ldr	r3, .L305+12
 3623 006e 9A42     		cmp	r2, r3
 3624 0070 03DD     		ble	.L277
 3625              		.loc 1 925 0 is_stmt 0
 3626 0072 7A68     		ldr	r2, [r7, #4]
 3627 0074 7E4B     		ldr	r3, .L305+16
 3628 0076 9A42     		cmp	r2, r3
 3629 0078 01DD     		ble	.L276
 3630              	.L277:
 3631              		.loc 1 925 0
 3632 007a 3223     		mov	r3, #50
 3633 007c ECE0     		b	.L273
 3634              	.L276:
 926:../Sources/TFC/TFC_CrystalClock.c ****   }
 927:../Sources/TFC/TFC_CrystalClock.c ****   
 928:../Sources/TFC/TFC_CrystalClock.c **** // Select the required IRC
 929:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 3635              		.loc 1 929 0 is_stmt 1
 3636 007e FB1C     		add	r3, r7, #3
 3637 0080 1B78     		ldrb	r3, [r3]
 3638 0082 002B     		cmp	r3, #0
 3639 0084 08D0     		beq	.L278
 930:../Sources/TFC/TFC_CrystalClock.c ****   {
 931:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
 3640              		.loc 1 931 0
 3641 0086 764B     		ldr	r3, .L305
 3642 0088 754A     		ldr	r2, .L305
 3643 008a 5278     		ldrb	r2, [r2, #1]
 3644 008c D2B2     		uxtb	r2, r2
 3645 008e 0121     		mov	r1, #1
 3646 0090 0A43     		orr	r2, r1
 3647 0092 D2B2     		uxtb	r2, r2
 3648 0094 5A70     		strb	r2, [r3, #1]
 3649 0096 07E0     		b	.L279
 3650              	.L278:
 932:../Sources/TFC/TFC_CrystalClock.c ****   }
 933:../Sources/TFC/TFC_CrystalClock.c ****   else
 934:../Sources/TFC/TFC_CrystalClock.c ****   {
 935:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
 3651              		.loc 1 935 0
 3652 0098 714B     		ldr	r3, .L305
 3653 009a 714A     		ldr	r2, .L305
 3654 009c 5278     		ldrb	r2, [r2, #1]
 3655 009e D2B2     		uxtb	r2, r2
 3656 00a0 0121     		mov	r1, #1
 3657 00a2 8A43     		bic	r2, r1
 3658 00a4 D2B2     		uxtb	r2, r2
 3659 00a6 5A70     		strb	r2, [r3, #1]
 3660              	.L279:
 936:../Sources/TFC/TFC_CrystalClock.c ****   }
 937:../Sources/TFC/TFC_CrystalClock.c ****   
 938:../Sources/TFC/TFC_CrystalClock.c **** // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
 939:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 3661              		.loc 1 939 0
 3662 00a8 6D4B     		ldr	r3, .L305
 3663 00aa 6D4A     		ldr	r2, .L305
 3664 00ac 5279     		ldrb	r2, [r2, #5]
 3665 00ae D2B2     		uxtb	r2, r2
 3666 00b0 2021     		mov	r1, #32
 3667 00b2 8A43     		bic	r2, r1
 3668 00b4 D2B2     		uxtb	r2, r2
 3669 00b6 5A71     		strb	r2, [r3, #5]
 940:../Sources/TFC/TFC_CrystalClock.c ****   
 941:../Sources/TFC/TFC_CrystalClock.c **** // Select the IRC as the CLKS mux selection
 942:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 3670              		.loc 1 942 0
 3671 00b8 694A     		ldr	r2, .L305
 3672 00ba 3B1C     		mov	r3, r7
 3673 00bc 0D33     		add	r3, r3, #13
 3674 00be 1278     		ldrb	r2, [r2]
 3675 00c0 1A70     		strb	r2, [r3]
 943:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK;                    // clear CLKS bits 
 3676              		.loc 1 943 0
 3677 00c2 3B1C     		mov	r3, r7
 3678 00c4 0D33     		add	r3, r3, #13
 3679 00c6 3A1C     		mov	r2, r7
 3680 00c8 0D32     		add	r2, r2, #13
 3681 00ca 1178     		ldrb	r1, [r2]
 3682 00cc 3F22     		mov	r2, #63
 3683 00ce 0A40     		and	r2, r1
 3684 00d0 1A70     		strb	r2, [r3]
 944:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK); // select IRC as MCGOUT and enable IREFS
 3685              		.loc 1 944 0
 3686 00d2 3B1C     		mov	r3, r7
 3687 00d4 0D33     		add	r3, r3, #13
 3688 00d6 3A1C     		mov	r2, r7
 3689 00d8 0D32     		add	r2, r2, #13
 3690 00da 1278     		ldrb	r2, [r2]
 3691 00dc 4421     		mov	r1, #68
 3692 00de 0A43     		orr	r2, r1
 3693 00e0 1A70     		strb	r2, [r3]
 945:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1
 3694              		.loc 1 945 0
 3695 00e2 5F4B     		ldr	r3, .L305
 3696 00e4 3A1C     		mov	r2, r7
 3697 00e6 0D32     		add	r2, r2, #13
 3698 00e8 1278     		ldrb	r2, [r2]
 3699 00ea 1A70     		strb	r2, [r3]
 946:../Sources/TFC/TFC_CrystalClock.c ****   
 947:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
 948:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 3700              		.loc 1 948 0
 3701 00ec FB1C     		add	r3, r7, #3
 3702 00ee 1B78     		ldrb	r3, [r3]
 3703 00f0 002B     		cmp	r3, #0
 3704 00f2 24D1     		bne	.L280
 949:../Sources/TFC/TFC_CrystalClock.c ****   {
 950:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3705              		.loc 1 950 0
 3706 00f4 3B1C     		mov	r3, r7
 3707 00f6 0E33     		add	r3, r3, #14
 3708 00f8 0022     		mov	r2, #0
 3709 00fa 1A80     		strh	r2, [r3]
 3710 00fc 0DE0     		b	.L281
 3711              	.L284:
 951:../Sources/TFC/TFC_CrystalClock.c ****     {
 952:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 3712              		.loc 1 952 0
 3713 00fe 584B     		ldr	r3, .L305
 3714 0100 9B79     		ldrb	r3, [r3, #6]
 3715 0102 DBB2     		uxtb	r3, r3
 3716 0104 1A1C     		mov	r2, r3
 3717 0106 0123     		mov	r3, #1
 3718 0108 1340     		and	r3, r2
 3719 010a 0ED0     		beq	.L301
 3720              	.L282:
 950:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3721              		.loc 1 950 0
 3722 010c 3B1C     		mov	r3, r7
 3723 010e 0E33     		add	r3, r3, #14
 3724 0110 3A1C     		mov	r2, r7
 3725 0112 0E32     		add	r2, r2, #14
 3726 0114 1288     		ldrh	r2, [r2]
 3727 0116 0132     		add	r2, r2, #1
 3728 0118 1A80     		strh	r2, [r3]
 3729              	.L281:
 950:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3730              		.loc 1 950 0 is_stmt 0
 3731 011a 3B1C     		mov	r3, r7
 3732 011c 0E33     		add	r3, r3, #14
 3733 011e 0021     		mov	r1, #0
 3734 0120 5A5E     		ldrsh	r2, [r3, r1]
 3735 0122 544B     		ldr	r3, .L305+20
 3736 0124 9A42     		cmp	r2, r3
 3737 0126 EADD     		ble	.L284
 3738 0128 00E0     		b	.L283
 3739              	.L301:
 3740              		.loc 1 952 0 is_stmt 1
 3741 012a C046     		mov	r8, r8
 3742              	.L283:
 953:../Sources/TFC/TFC_CrystalClock.c ****     }
 954:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 3743              		.loc 1 954 0
 3744 012c 4C4B     		ldr	r3, .L305
 3745 012e 9B79     		ldrb	r3, [r3, #6]
 3746 0130 DBB2     		uxtb	r3, r3
 3747 0132 1A1C     		mov	r2, r3
 3748 0134 0123     		mov	r3, #1
 3749 0136 1340     		and	r3, r2
 3750 0138 26D0     		beq	.L285
 3751              		.loc 1 954 0 is_stmt 0
 3752 013a 1323     		mov	r3, #19
 3753 013c 8CE0     		b	.L273
 3754              	.L280:
 955:../Sources/TFC/TFC_CrystalClock.c ****   }
 956:../Sources/TFC/TFC_CrystalClock.c ****   else
 957:../Sources/TFC/TFC_CrystalClock.c ****   {
 958:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3755              		.loc 1 958 0 is_stmt 1
 3756 013e 3B1C     		mov	r3, r7
 3757 0140 0E33     		add	r3, r3, #14
 3758 0142 0022     		mov	r2, #0
 3759 0144 1A80     		strh	r2, [r3]
 3760 0146 0DE0     		b	.L286
 3761              	.L289:
 959:../Sources/TFC/TFC_CrystalClock.c ****     {
 960:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 3762              		.loc 1 960 0
 3763 0148 454B     		ldr	r3, .L305
 3764 014a 9B79     		ldrb	r3, [r3, #6]
 3765 014c DBB2     		uxtb	r3, r3
 3766 014e 1A1C     		mov	r2, r3
 3767 0150 0123     		mov	r3, #1
 3768 0152 1340     		and	r3, r2
 3769 0154 0ED1     		bne	.L302
 3770              	.L287:
 958:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3771              		.loc 1 958 0
 3772 0156 3B1C     		mov	r3, r7
 3773 0158 0E33     		add	r3, r3, #14
 3774 015a 3A1C     		mov	r2, r7
 3775 015c 0E32     		add	r2, r2, #14
 3776 015e 1288     		ldrh	r2, [r2]
 3777 0160 0132     		add	r2, r2, #1
 3778 0162 1A80     		strh	r2, [r3]
 3779              	.L286:
 958:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 3780              		.loc 1 958 0 is_stmt 0
 3781 0164 3B1C     		mov	r3, r7
 3782 0166 0E33     		add	r3, r3, #14
 3783 0168 0021     		mov	r1, #0
 3784 016a 5A5E     		ldrsh	r2, [r3, r1]
 3785 016c 414B     		ldr	r3, .L305+20
 3786 016e 9A42     		cmp	r2, r3
 3787 0170 EADD     		ble	.L289
 3788 0172 00E0     		b	.L288
 3789              	.L302:
 3790              		.loc 1 960 0 is_stmt 1
 3791 0174 C046     		mov	r8, r8
 3792              	.L288:
 961:../Sources/TFC/TFC_CrystalClock.c ****     }
 962:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 3793              		.loc 1 962 0
 3794 0176 3A4B     		ldr	r3, .L305
 3795 0178 9B79     		ldrb	r3, [r3, #6]
 3796 017a DBB2     		uxtb	r3, r3
 3797 017c 1A1C     		mov	r2, r3
 3798 017e 0123     		mov	r3, #1
 3799 0180 1340     		and	r3, r2
 3800 0182 01D1     		bne	.L285
 3801              		.loc 1 962 0 is_stmt 0
 3802 0184 1423     		mov	r3, #20
 3803 0186 67E0     		b	.L273
 3804              	.L285:
 963:../Sources/TFC/TFC_CrystalClock.c ****   }
 964:../Sources/TFC/TFC_CrystalClock.c ****  
 965:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
 966:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3805              		.loc 1 966 0 is_stmt 1
 3806 0188 3B1C     		mov	r3, r7
 3807 018a 0E33     		add	r3, r3, #14
 3808 018c 0022     		mov	r2, #0
 3809 018e 1A80     		strh	r2, [r3]
 3810 0190 0FE0     		b	.L290
 3811              	.L293:
 967:../Sources/TFC/TFC_CrystalClock.c ****   {
 968:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 3812              		.loc 1 968 0
 3813 0192 334B     		ldr	r3, .L305
 3814 0194 9B79     		ldrb	r3, [r3, #6]
 3815 0196 DBB2     		uxtb	r3, r3
 3816 0198 1A1C     		mov	r2, r3
 3817 019a 0C23     		mov	r3, #12
 3818 019c 1340     		and	r3, r2
 3819 019e 9B08     		lsr	r3, r3, #2
 3820 01a0 012B     		cmp	r3, #1
 3821 01a2 0ED0     		beq	.L303
 3822              	.L291:
 966:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3823              		.loc 1 966 0
 3824 01a4 3B1C     		mov	r3, r7
 3825 01a6 0E33     		add	r3, r3, #14
 3826 01a8 3A1C     		mov	r2, r7
 3827 01aa 0E32     		add	r2, r2, #14
 3828 01ac 1288     		ldrh	r2, [r2]
 3829 01ae 0132     		add	r2, r2, #1
 3830 01b0 1A80     		strh	r2, [r3]
 3831              	.L290:
 966:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3832              		.loc 1 966 0 is_stmt 0
 3833 01b2 3B1C     		mov	r3, r7
 3834 01b4 0E33     		add	r3, r3, #14
 3835 01b6 0021     		mov	r1, #0
 3836 01b8 5A5E     		ldrsh	r2, [r3, r1]
 3837 01ba 2E4B     		ldr	r3, .L305+20
 3838 01bc 9A42     		cmp	r2, r3
 3839 01be E8DD     		ble	.L293
 3840 01c0 00E0     		b	.L292
 3841              	.L303:
 3842              		.loc 1 968 0 is_stmt 1
 3843 01c2 C046     		mov	r8, r8
 3844              	.L292:
 969:../Sources/TFC/TFC_CrystalClock.c ****   }
 970:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 3845              		.loc 1 970 0
 3846 01c4 264B     		ldr	r3, .L305
 3847 01c6 9B79     		ldrb	r3, [r3, #6]
 3848 01c8 DBB2     		uxtb	r3, r3
 3849 01ca 1A1C     		mov	r2, r3
 3850 01cc 0C23     		mov	r3, #12
 3851 01ce 1340     		and	r3, r2
 3852 01d0 9B08     		lsr	r3, r3, #2
 3853 01d2 012B     		cmp	r3, #1
 3854 01d4 01D0     		beq	.L294
 3855              		.loc 1 970 0 is_stmt 0
 3856 01d6 1923     		mov	r3, #25
 3857 01d8 3EE0     		b	.L273
 3858              	.L294:
 971:../Sources/TFC/TFC_CrystalClock.c ****   
 972:../Sources/TFC/TFC_CrystalClock.c ****   // wait for Reference clock Status bit to set
 973:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3859              		.loc 1 973 0 is_stmt 1
 3860 01da 3B1C     		mov	r3, r7
 3861 01dc 0E33     		add	r3, r3, #14
 3862 01de 0022     		mov	r2, #0
 3863 01e0 1A80     		strh	r2, [r3]
 3864 01e2 0DE0     		b	.L295
 3865              	.L298:
 974:../Sources/TFC/TFC_CrystalClock.c ****   {
 975:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 3866              		.loc 1 975 0
 3867 01e4 1E4B     		ldr	r3, .L305
 3868 01e6 9B79     		ldrb	r3, [r3, #6]
 3869 01e8 DBB2     		uxtb	r3, r3
 3870 01ea 1A1C     		mov	r2, r3
 3871 01ec 1023     		mov	r3, #16
 3872 01ee 1340     		and	r3, r2
 3873 01f0 0ED1     		bne	.L304
 3874              	.L296:
 973:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3875              		.loc 1 973 0
 3876 01f2 3B1C     		mov	r3, r7
 3877 01f4 0E33     		add	r3, r3, #14
 3878 01f6 3A1C     		mov	r2, r7
 3879 01f8 0E32     		add	r2, r2, #14
 3880 01fa 1288     		ldrh	r2, [r2]
 3881 01fc 0132     		add	r2, r2, #1
 3882 01fe 1A80     		strh	r2, [r3]
 3883              	.L295:
 973:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 3884              		.loc 1 973 0 is_stmt 0
 3885 0200 3B1C     		mov	r3, r7
 3886 0202 0E33     		add	r3, r3, #14
 3887 0204 0021     		mov	r1, #0
 3888 0206 5A5E     		ldrsh	r2, [r3, r1]
 3889 0208 1A4B     		ldr	r3, .L305+20
 3890 020a 9A42     		cmp	r2, r3
 3891 020c EADD     		ble	.L298
 3892 020e 00E0     		b	.L297
 3893              	.L304:
 3894              		.loc 1 975 0 is_stmt 1
 3895 0210 C046     		mov	r8, r8
 3896              	.L297:
 976:../Sources/TFC/TFC_CrystalClock.c ****   }
 977:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 3897              		.loc 1 977 0
 3898 0212 134B     		ldr	r3, .L305
 3899 0214 9B79     		ldrb	r3, [r3, #6]
 3900 0216 DBB2     		uxtb	r3, r3
 3901 0218 1A1C     		mov	r2, r3
 3902 021a 1023     		mov	r3, #16
 3903 021c 1340     		and	r3, r2
 3904 021e 01D1     		bne	.L299
 3905              		.loc 1 977 0 is_stmt 0
 3906 0220 1223     		mov	r3, #18
 3907 0222 19E0     		b	.L273
 3908              	.L299:
 978:../Sources/TFC/TFC_CrystalClock.c ****   
 979:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
 980:../Sources/TFC/TFC_CrystalClock.c ****   
 981:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 3909              		.loc 1 981 0 is_stmt 1
 3910 0224 FB1C     		add	r3, r7, #3
 3911 0226 1B78     		ldrb	r3, [r3]
 3912 0228 002B     		cmp	r3, #0
 3913 022a 14D0     		beq	.L300
 982:../Sources/TFC/TFC_CrystalClock.c ****   {
 983:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 3914              		.loc 1 983 0
 3915 022c 0C4B     		ldr	r3, .L305
 3916 022e 1B7A     		ldrb	r3, [r3, #8]
 3917 0230 DBB2     		uxtb	r3, r3
 3918 0232 1A1C     		mov	r2, r3
 3919 0234 0E23     		mov	r3, #14
 3920 0236 1340     		and	r3, r2
 3921 0238 5B08     		lsr	r3, r3, #1
 3922 023a 0122     		mov	r2, #1
 3923 023c 9A40     		lsl	r2, r2, r3
 3924 023e 3B1C     		mov	r3, r7
 3925 0240 0C33     		add	r3, r3, #12
 3926 0242 1A70     		strb	r2, [r3]
 984:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by FCRDIV
 3927              		.loc 1 984 0
 3928 0244 3B1C     		mov	r3, r7
 3929 0246 0C33     		add	r3, r3, #12
 3930 0248 1B78     		ldrb	r3, [r3]
 3931 024a 7868     		ldr	r0, [r7, #4]
 3932 024c 191C     		mov	r1, r3
 3933 024e FFF7FEFF 		bl	__aeabi_idiv
 3934 0252 031C     		mov	r3, r0
 3935 0254 00E0     		b	.L273
 3936              	.L300:
 985:../Sources/TFC/TFC_CrystalClock.c ****   }
 986:../Sources/TFC/TFC_CrystalClock.c ****   else
 987:../Sources/TFC/TFC_CrystalClock.c ****   {
 988:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 3937              		.loc 1 988 0
 3938 0256 7B68     		ldr	r3, [r7, #4]
 3939              	.L273:
 989:../Sources/TFC/TFC_CrystalClock.c ****   }
 990:../Sources/TFC/TFC_CrystalClock.c **** } //fbe_fbi
 3940              		.loc 1 990 0
 3941 0258 181C     		mov	r0, r3
 3942 025a BD46     		mov	sp, r7
 3943 025c 04B0     		add	sp, sp, #16
 3944              		@ sp needed for prologue
 3945 025e 80BD     		pop	{r7, pc}
 3946              	.L306:
 3947              		.align	2
 3948              	.L305:
 3949 0260 00400640 		.word	1074151424
 3950 0264 117A0000 		.word	31249
 3951 0268 97980000 		.word	39063
 3952 026c BFC62D00 		.word	2999999
 3953 0270 404B4C00 		.word	5000000
 3954 0274 CF070000 		.word	1999
 3955              		.cfi_endproc
 3956              	.LFE14:
 3958              		.section	.text.fbi_fbe,"ax",%progbits
 3959              		.align	2
 3960              		.global	fbi_fbe
 3961              		.code	16
 3962              		.thumb_func
 3964              	fbi_fbe:
 3965              	.LFB15:
 991:../Sources/TFC/TFC_CrystalClock.c **** 
 992:../Sources/TFC/TFC_CrystalClock.c **** 
 993:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fbe(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
 994:../Sources/TFC/TFC_CrystalClock.c **** {
 3966              		.loc 1 994 0
 3967              		.cfi_startproc
 3968 0000 80B5     		push	{r7, lr}
 3969              	.LCFI45:
 3970              		.cfi_def_cfa_offset 8
 3971              		.cfi_offset 7, -8
 3972              		.cfi_offset 14, -4
 3973 0002 84B0     		sub	sp, sp, #16
 3974              	.LCFI46:
 3975              		.cfi_def_cfa_offset 24
 3976 0004 00AF     		add	r7, sp, #0
 3977              	.LCFI47:
 3978              		.cfi_def_cfa_register 7
 3979 0006 7860     		str	r0, [r7, #4]
 3980 0008 FB1C     		add	r3, r7, #3
 3981 000a 1970     		strb	r1, [r3]
 3982 000c BB1C     		add	r3, r7, #2
 3983 000e 1A70     		strb	r2, [r3]
 995:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
 996:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
 997:../Sources/TFC/TFC_CrystalClock.c ****   short i;
 998:../Sources/TFC/TFC_CrystalClock.c ****   
 999:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1000:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 3984              		.loc 1 1000 0
 3985 0010 B84B     		ldr	r3, .L343
 3986 0012 9B79     		ldrb	r3, [r3, #6]
 3987 0014 DBB2     		uxtb	r3, r3
 3988 0016 1A1C     		mov	r2, r3
 3989 0018 0C23     		mov	r3, #12
 3990 001a 1340     		and	r3, r2
 3991 001c 9B08     		lsr	r3, r3, #2
 3992 001e 012B     		cmp	r3, #1
 3993 0020 14D1     		bne	.L308
1001:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 3994              		.loc 1 1001 0
 3995 0022 B44B     		ldr	r3, .L343
 3996 0024 9B79     		ldrb	r3, [r3, #6]
 3997 0026 DBB2     		uxtb	r3, r3
 3998 0028 1A1C     		mov	r2, r3
 3999 002a 1023     		mov	r3, #16
 4000 002c 1340     		and	r3, r2
1000:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4001              		.loc 1 1000 0
 4002 002e 0DD0     		beq	.L308
1002:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4003              		.loc 1 1002 0
 4004 0030 B04B     		ldr	r3, .L343
 4005 0032 9B79     		ldrb	r3, [r3, #6]
 4006 0034 DBB2     		uxtb	r3, r3
 4007 0036 1A1C     		mov	r2, r3
 4008 0038 2023     		mov	r3, #32
 4009 003a 1340     		and	r3, r2
1001:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4010              		.loc 1 1001 0
 4011 003c 06D1     		bne	.L308
1003:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 4012              		.loc 1 1003 0
 4013 003e AD4B     		ldr	r3, .L343
 4014 0040 5B78     		ldrb	r3, [r3, #1]
 4015 0042 DBB2     		uxtb	r3, r3
 4016 0044 1A1C     		mov	r2, r3
 4017 0046 0223     		mov	r3, #2
 4018 0048 1340     		and	r3, r2
1000:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4019              		.loc 1 1000 0
 4020 004a 01D0     		beq	.L309
 4021              	.L308:
1004:../Sources/TFC/TFC_CrystalClock.c ****   {  
1005:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4022              		.loc 1 1005 0
 4023 004c 0323     		mov	r3, #3
 4024 004e 4DE1     		b	.L310
 4025              	.L309:
1006:../Sources/TFC/TFC_CrystalClock.c ****   }
1007:../Sources/TFC/TFC_CrystalClock.c ****  
1008:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1009:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 4026              		.loc 1 1009 0
 4027 0050 7A68     		ldr	r2, [r7, #4]
 4028 0052 A94B     		ldr	r3, .L343+4
 4029 0054 9A42     		cmp	r2, r3
 4030 0056 01DD     		ble	.L311
 4031              		.loc 1 1009 0 is_stmt 0
 4032 0058 2123     		mov	r3, #33
 4033 005a 47E1     		b	.L310
 4034              	.L311:
1010:../Sources/TFC/TFC_CrystalClock.c ****   
1011:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1012:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4035              		.loc 1 1012 0 is_stmt 1
 4036 005c BB1C     		add	r3, r7, #2
 4037 005e 1B78     		ldrb	r3, [r3]
 4038 0060 002B     		cmp	r3, #0
 4039 0062 11D0     		beq	.L312
1013:../Sources/TFC/TFC_CrystalClock.c ****   {
1014:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 4040              		.loc 1 1014 0
 4041 0064 7A68     		ldr	r2, [r7, #4]
 4042 0066 A54B     		ldr	r3, .L343+8
 4043 0068 9A42     		cmp	r2, r3
 4044 006a 0BDD     		ble	.L313
 4045              		.loc 1 1014 0 is_stmt 0
 4046 006c 7A68     		ldr	r2, [r7, #4]
 4047 006e A44B     		ldr	r3, .L343+12
 4048 0070 9A42     		cmp	r2, r3
 4049 0072 03DD     		ble	.L314
1015:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 4050              		.loc 1 1015 0 is_stmt 1
 4051 0074 7A68     		ldr	r2, [r7, #4]
 4052 0076 A34B     		ldr	r3, .L343+16
 4053 0078 9A42     		cmp	r2, r3
 4054 007a 03DD     		ble	.L313
 4055              	.L314:
 4056              		.loc 1 1015 0 is_stmt 0
 4057 007c 7A68     		ldr	r2, [r7, #4]
 4058 007e A24B     		ldr	r3, .L343+20
 4059 0080 9A42     		cmp	r2, r3
 4060 0082 01DD     		ble	.L312
 4061              	.L313:
1016:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 4062              		.loc 1 1016 0 is_stmt 1
 4063 0084 2223     		mov	r3, #34
 4064 0086 31E1     		b	.L310
 4065              	.L312:
1017:../Sources/TFC/TFC_CrystalClock.c ****   }
1018:../Sources/TFC/TFC_CrystalClock.c **** 
1019:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1020:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 4066              		.loc 1 1020 0
 4067 0088 FB1C     		add	r3, r7, #3
 4068 008a 1B78     		ldrb	r3, [r3]
 4069 008c 002B     		cmp	r3, #0
 4070 008e 02D0     		beq	.L315
1021:../Sources/TFC/TFC_CrystalClock.c ****   {
1022:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 4071              		.loc 1 1022 0
 4072 0090 FB1C     		add	r3, r7, #3
 4073 0092 0122     		mov	r2, #1
 4074 0094 1A70     		strb	r2, [r3]
 4075              	.L315:
1023:../Sources/TFC/TFC_CrystalClock.c ****   }
1024:../Sources/TFC/TFC_CrystalClock.c **** 
1025:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1026:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1027:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1028:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 4076              		.loc 1 1028 0
 4077 0096 974A     		ldr	r2, .L343
 4078 0098 3B1C     		mov	r3, r7
 4079 009a 0F33     		add	r3, r3, #15
 4080 009c 5278     		ldrb	r2, [r2, #1]
 4081 009e 1A70     		strb	r2, [r3]
1029:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 4082              		.loc 1 1029 0
 4083 00a0 3B1C     		mov	r3, r7
 4084 00a2 0F33     		add	r3, r3, #15
 4085 00a4 3A1C     		mov	r2, r7
 4086 00a6 0F32     		add	r2, r2, #15
 4087 00a8 1278     		ldrb	r2, [r2]
 4088 00aa 3C21     		mov	r1, #60
 4089 00ac 8A43     		bic	r2, r1
 4090 00ae 1A70     		strb	r2, [r3]
1030:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 4091              		.loc 1 1030 0
 4092 00b0 7A68     		ldr	r2, [r7, #4]
 4093 00b2 934B     		ldr	r3, .L343+12
 4094 00b4 9A42     		cmp	r2, r3
 4095 00b6 11DC     		bgt	.L316
1031:../Sources/TFC/TFC_CrystalClock.c ****   {
1032:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4096              		.loc 1 1032 0
 4097 00b8 FB1C     		add	r3, r7, #3
 4098 00ba 1B78     		ldrb	r3, [r3]
 4099 00bc DB00     		lsl	r3, r3, #3
 4100 00be DAB2     		uxtb	r2, r3
 4101 00c0 BB1C     		add	r3, r7, #2
 4102 00c2 1B78     		ldrb	r3, [r3]
 4103 00c4 9B00     		lsl	r3, r3, #2
 4104 00c6 DBB2     		uxtb	r3, r3
 4105 00c8 1343     		orr	r3, r2
 4106 00ca D9B2     		uxtb	r1, r3
 4107 00cc 3B1C     		mov	r3, r7
 4108 00ce 0F33     		add	r3, r3, #15
 4109 00d0 3A1C     		mov	r2, r7
 4110 00d2 0F32     		add	r2, r2, #15
 4111 00d4 1278     		ldrb	r2, [r2]
 4112 00d6 0A43     		orr	r2, r1
 4113 00d8 1A70     		strb	r2, [r3]
 4114 00da 2CE0     		b	.L317
 4115              	.L316:
1033:../Sources/TFC/TFC_CrystalClock.c ****   }
1034:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 4116              		.loc 1 1034 0
 4117 00dc 7A68     		ldr	r2, [r7, #4]
 4118 00de 8B4B     		ldr	r3, .L343+24
 4119 00e0 9A42     		cmp	r2, r3
 4120 00e2 14DC     		bgt	.L318
1035:../Sources/TFC/TFC_CrystalClock.c ****   {
1036:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4121              		.loc 1 1036 0
 4122 00e4 FB1C     		add	r3, r7, #3
 4123 00e6 1B78     		ldrb	r3, [r3]
 4124 00e8 DB00     		lsl	r3, r3, #3
 4125 00ea DAB2     		uxtb	r2, r3
 4126 00ec BB1C     		add	r3, r7, #2
 4127 00ee 1B78     		ldrb	r3, [r3]
 4128 00f0 9B00     		lsl	r3, r3, #2
 4129 00f2 DBB2     		uxtb	r3, r3
 4130 00f4 1343     		orr	r3, r2
 4131 00f6 DAB2     		uxtb	r2, r3
 4132 00f8 3B1C     		mov	r3, r7
 4133 00fa 0F33     		add	r3, r3, #15
 4134 00fc 1B78     		ldrb	r3, [r3]
 4135 00fe 1343     		orr	r3, r2
 4136 0100 DAB2     		uxtb	r2, r3
 4137 0102 3B1C     		mov	r3, r7
 4138 0104 0F33     		add	r3, r3, #15
 4139 0106 1021     		mov	r1, #16
 4140 0108 0A43     		orr	r2, r1
 4141 010a 1A70     		strb	r2, [r3]
 4142 010c 13E0     		b	.L317
 4143              	.L318:
1037:../Sources/TFC/TFC_CrystalClock.c ****   }
1038:../Sources/TFC/TFC_CrystalClock.c ****   else
1039:../Sources/TFC/TFC_CrystalClock.c ****   {
1040:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4144              		.loc 1 1040 0
 4145 010e FB1C     		add	r3, r7, #3
 4146 0110 1B78     		ldrb	r3, [r3]
 4147 0112 DB00     		lsl	r3, r3, #3
 4148 0114 DAB2     		uxtb	r2, r3
 4149 0116 BB1C     		add	r3, r7, #2
 4150 0118 1B78     		ldrb	r3, [r3]
 4151 011a 9B00     		lsl	r3, r3, #2
 4152 011c DBB2     		uxtb	r3, r3
 4153 011e 1343     		orr	r3, r2
 4154 0120 DAB2     		uxtb	r2, r3
 4155 0122 3B1C     		mov	r3, r7
 4156 0124 0F33     		add	r3, r3, #15
 4157 0126 1B78     		ldrb	r3, [r3]
 4158 0128 1343     		orr	r3, r2
 4159 012a DAB2     		uxtb	r2, r3
 4160 012c 3B1C     		mov	r3, r7
 4161 012e 0F33     		add	r3, r3, #15
 4162 0130 2021     		mov	r1, #32
 4163 0132 0A43     		orr	r2, r1
 4164 0134 1A70     		strb	r2, [r3]
 4165              	.L317:
1041:../Sources/TFC/TFC_CrystalClock.c ****   }
1042:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 4166              		.loc 1 1042 0
 4167 0136 6F4B     		ldr	r3, .L343
 4168 0138 3A1C     		mov	r2, r7
 4169 013a 0F32     		add	r2, r2, #15
 4170 013c 1278     		ldrb	r2, [r2]
 4171 013e 5A70     		strb	r2, [r3, #1]
1043:../Sources/TFC/TFC_CrystalClock.c **** 
1044:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1045:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1046:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 4172              		.loc 1 1046 0
 4173 0140 7A68     		ldr	r2, [r7, #4]
 4174 0142 734B     		ldr	r3, .L343+28
 4175 0144 9A42     		cmp	r2, r3
 4176 0146 04DC     		bgt	.L319
 4177              		.loc 1 1046 0 is_stmt 0
 4178 0148 3B1C     		mov	r3, r7
 4179 014a 0E33     		add	r3, r3, #14
 4180 014c 0022     		mov	r2, #0
 4181 014e 1A70     		strb	r2, [r3]
 4182 0150 27E0     		b	.L320
 4183              	.L319:
1047:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 4184              		.loc 1 1047 0 is_stmt 1
 4185 0152 7A68     		ldr	r2, [r7, #4]
 4186 0154 6F4B     		ldr	r3, .L343+32
 4187 0156 9A42     		cmp	r2, r3
 4188 0158 04DC     		bgt	.L321
 4189              		.loc 1 1047 0 is_stmt 0
 4190 015a 3B1C     		mov	r3, r7
 4191 015c 0E33     		add	r3, r3, #14
 4192 015e 0122     		mov	r2, #1
 4193 0160 1A70     		strb	r2, [r3]
 4194 0162 1EE0     		b	.L320
 4195              	.L321:
1048:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 4196              		.loc 1 1048 0 is_stmt 1
 4197 0164 7A68     		ldr	r2, [r7, #4]
 4198 0166 6C4B     		ldr	r3, .L343+36
 4199 0168 9A42     		cmp	r2, r3
 4200 016a 04DC     		bgt	.L322
 4201              		.loc 1 1048 0 is_stmt 0
 4202 016c 3B1C     		mov	r3, r7
 4203 016e 0E33     		add	r3, r3, #14
 4204 0170 0222     		mov	r2, #2
 4205 0172 1A70     		strb	r2, [r3]
 4206 0174 15E0     		b	.L320
 4207              	.L322:
1049:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 4208              		.loc 1 1049 0 is_stmt 1
 4209 0176 7A68     		ldr	r2, [r7, #4]
 4210 0178 684B     		ldr	r3, .L343+40
 4211 017a 9A42     		cmp	r2, r3
 4212 017c 04DC     		bgt	.L323
 4213              		.loc 1 1049 0 is_stmt 0
 4214 017e 3B1C     		mov	r3, r7
 4215 0180 0E33     		add	r3, r3, #14
 4216 0182 0322     		mov	r2, #3
 4217 0184 1A70     		strb	r2, [r3]
 4218 0186 0CE0     		b	.L320
 4219              	.L323:
1050:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 4220              		.loc 1 1050 0 is_stmt 1
 4221 0188 7A68     		ldr	r2, [r7, #4]
 4222 018a 654B     		ldr	r3, .L343+44
 4223 018c 9A42     		cmp	r2, r3
 4224 018e 04DC     		bgt	.L324
 4225              		.loc 1 1050 0 is_stmt 0
 4226 0190 3B1C     		mov	r3, r7
 4227 0192 0E33     		add	r3, r3, #14
 4228 0194 0422     		mov	r2, #4
 4229 0196 1A70     		strb	r2, [r3]
 4230 0198 03E0     		b	.L320
 4231              	.L324:
1051:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 4232              		.loc 1 1051 0 is_stmt 1
 4233 019a 3B1C     		mov	r3, r7
 4234 019c 0E33     		add	r3, r3, #14
 4235 019e 0522     		mov	r2, #5
 4236 01a0 1A70     		strb	r2, [r3]
 4237              	.L320:
1052:../Sources/TFC/TFC_CrystalClock.c ****   
1053:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1054:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1055:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=2, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
1056:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 4238              		.loc 1 1056 0
 4239 01a2 544A     		ldr	r2, .L343
 4240 01a4 3B1C     		mov	r3, r7
 4241 01a6 0F33     		add	r3, r3, #15
 4242 01a8 1278     		ldrb	r2, [r2]
 4243 01aa 1A70     		strb	r2, [r3]
1057:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 4244              		.loc 1 1057 0
 4245 01ac 3B1C     		mov	r3, r7
 4246 01ae 0F33     		add	r3, r3, #15
 4247 01b0 3A1C     		mov	r2, r7
 4248 01b2 0F32     		add	r2, r2, #15
 4249 01b4 1178     		ldrb	r1, [r2]
 4250 01b6 0322     		mov	r2, #3
 4251 01b8 0A40     		and	r2, r1
 4252 01ba 1A70     		strb	r2, [r3]
1058:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(2) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 4253              		.loc 1 1058 0
 4254 01bc 3B1C     		mov	r3, r7
 4255 01be 0E33     		add	r3, r3, #14
 4256 01c0 1B78     		ldrb	r3, [r3]
 4257 01c2 DB00     		lsl	r3, r3, #3
 4258 01c4 DAB2     		uxtb	r2, r3
 4259 01c6 3823     		mov	r3, #56
 4260 01c8 1340     		and	r3, r2
 4261 01ca DAB2     		uxtb	r2, r3
 4262 01cc 3B1C     		mov	r3, r7
 4263 01ce 0F33     		add	r3, r3, #15
 4264 01d0 1B78     		ldrb	r3, [r3]
 4265 01d2 1343     		orr	r3, r2
 4266 01d4 DAB2     		uxtb	r2, r3
 4267 01d6 3B1C     		mov	r3, r7
 4268 01d8 0F33     		add	r3, r3, #15
 4269 01da 8021     		mov	r1, #128
 4270 01dc 4942     		neg	r1, r1
 4271 01de 0A43     		orr	r2, r1
 4272 01e0 1A70     		strb	r2, [r3]
1059:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 4273              		.loc 1 1059 0
 4274 01e2 444B     		ldr	r3, .L343
 4275 01e4 3A1C     		mov	r2, r7
 4276 01e6 0F32     		add	r2, r2, #15
 4277 01e8 1278     		ldrb	r2, [r2]
 4278 01ea 1A70     		strb	r2, [r3]
1060:../Sources/TFC/TFC_CrystalClock.c **** 
1061:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1062:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4279              		.loc 1 1062 0
 4280 01ec BB1C     		add	r3, r7, #2
 4281 01ee 1B78     		ldrb	r3, [r3]
 4282 01f0 002B     		cmp	r3, #0
 4283 01f2 24D0     		beq	.L325
1063:../Sources/TFC/TFC_CrystalClock.c ****   {
1064:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4284              		.loc 1 1064 0
 4285 01f4 3B1C     		mov	r3, r7
 4286 01f6 0C33     		add	r3, r3, #12
 4287 01f8 0022     		mov	r2, #0
 4288 01fa 1A80     		strh	r2, [r3]
 4289 01fc 0DE0     		b	.L326
 4290              	.L329:
1065:../Sources/TFC/TFC_CrystalClock.c ****     {
1066:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 4291              		.loc 1 1066 0
 4292 01fe 3D4B     		ldr	r3, .L343
 4293 0200 9B79     		ldrb	r3, [r3, #6]
 4294 0202 DBB2     		uxtb	r3, r3
 4295 0204 1A1C     		mov	r2, r3
 4296 0206 0223     		mov	r3, #2
 4297 0208 1340     		and	r3, r2
 4298 020a 0ED1     		bne	.L340
 4299              	.L327:
1064:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4300              		.loc 1 1064 0
 4301 020c 3B1C     		mov	r3, r7
 4302 020e 0C33     		add	r3, r3, #12
 4303 0210 3A1C     		mov	r2, r7
 4304 0212 0C32     		add	r2, r2, #12
 4305 0214 1288     		ldrh	r2, [r2]
 4306 0216 0132     		add	r2, r2, #1
 4307 0218 1A80     		strh	r2, [r3]
 4308              	.L326:
1064:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 4309              		.loc 1 1064 0 is_stmt 0
 4310 021a 3B1C     		mov	r3, r7
 4311 021c 0C33     		add	r3, r3, #12
 4312 021e 0021     		mov	r1, #0
 4313 0220 5A5E     		ldrsh	r2, [r3, r1]
 4314 0222 404B     		ldr	r3, .L343+48
 4315 0224 9A42     		cmp	r2, r3
 4316 0226 EADD     		ble	.L329
 4317 0228 00E0     		b	.L328
 4318              	.L340:
 4319              		.loc 1 1066 0 is_stmt 1
 4320 022a C046     		mov	r8, r8
 4321              	.L328:
1067:../Sources/TFC/TFC_CrystalClock.c ****     }
1068:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 4322              		.loc 1 1068 0
 4323 022c 314B     		ldr	r3, .L343
 4324 022e 9B79     		ldrb	r3, [r3, #6]
 4325 0230 DBB2     		uxtb	r3, r3
 4326 0232 1A1C     		mov	r2, r3
 4327 0234 0223     		mov	r3, #2
 4328 0236 1340     		and	r3, r2
 4329 0238 01D1     		bne	.L325
 4330              		.loc 1 1068 0 is_stmt 0
 4331 023a 2323     		mov	r3, #35
 4332 023c 56E0     		b	.L310
 4333              	.L325:
1069:../Sources/TFC/TFC_CrystalClock.c ****   }
1070:../Sources/TFC/TFC_CrystalClock.c **** 
1071:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1072:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4334              		.loc 1 1072 0 is_stmt 1
 4335 023e 3B1C     		mov	r3, r7
 4336 0240 0C33     		add	r3, r3, #12
 4337 0242 0022     		mov	r2, #0
 4338 0244 1A80     		strh	r2, [r3]
 4339 0246 0DE0     		b	.L330
 4340              	.L333:
1073:../Sources/TFC/TFC_CrystalClock.c ****   {
1074:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 4341              		.loc 1 1074 0
 4342 0248 2A4B     		ldr	r3, .L343
 4343 024a 9B79     		ldrb	r3, [r3, #6]
 4344 024c DBB2     		uxtb	r3, r3
 4345 024e 1A1C     		mov	r2, r3
 4346 0250 1023     		mov	r3, #16
 4347 0252 1340     		and	r3, r2
 4348 0254 0ED0     		beq	.L341
 4349              	.L331:
1072:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4350              		.loc 1 1072 0
 4351 0256 3B1C     		mov	r3, r7
 4352 0258 0C33     		add	r3, r3, #12
 4353 025a 3A1C     		mov	r2, r7
 4354 025c 0C32     		add	r2, r2, #12
 4355 025e 1288     		ldrh	r2, [r2]
 4356 0260 0132     		add	r2, r2, #1
 4357 0262 1A80     		strh	r2, [r3]
 4358              	.L330:
1072:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4359              		.loc 1 1072 0 is_stmt 0
 4360 0264 3B1C     		mov	r3, r7
 4361 0266 0C33     		add	r3, r3, #12
 4362 0268 0021     		mov	r1, #0
 4363 026a 5A5E     		ldrsh	r2, [r3, r1]
 4364 026c 2E4B     		ldr	r3, .L343+52
 4365 026e 9A42     		cmp	r2, r3
 4366 0270 EADD     		ble	.L333
 4367 0272 00E0     		b	.L332
 4368              	.L341:
 4369              		.loc 1 1074 0 is_stmt 1
 4370 0274 C046     		mov	r8, r8
 4371              	.L332:
1075:../Sources/TFC/TFC_CrystalClock.c ****   }
1076:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 4372              		.loc 1 1076 0
 4373 0276 1F4B     		ldr	r3, .L343
 4374 0278 9B79     		ldrb	r3, [r3, #6]
 4375 027a DBB2     		uxtb	r3, r3
 4376 027c 1A1C     		mov	r2, r3
 4377 027e 1023     		mov	r3, #16
 4378 0280 1340     		and	r3, r2
 4379 0282 01D0     		beq	.L334
 4380              		.loc 1 1076 0 is_stmt 0
 4381 0284 1123     		mov	r3, #17
 4382 0286 31E0     		b	.L310
 4383              	.L334:
1077:../Sources/TFC/TFC_CrystalClock.c ****   
1078:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1079:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4384              		.loc 1 1079 0 is_stmt 1
 4385 0288 3B1C     		mov	r3, r7
 4386 028a 0C33     		add	r3, r3, #12
 4387 028c 0022     		mov	r2, #0
 4388 028e 1A80     		strh	r2, [r3]
 4389 0290 0FE0     		b	.L335
 4390              	.L338:
1080:../Sources/TFC/TFC_CrystalClock.c ****   {
1081:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) break; // jump out early if CLKST
 4391              		.loc 1 1081 0
 4392 0292 184B     		ldr	r3, .L343
 4393 0294 9B79     		ldrb	r3, [r3, #6]
 4394 0296 DBB2     		uxtb	r3, r3
 4395 0298 1A1C     		mov	r2, r3
 4396 029a 0C23     		mov	r3, #12
 4397 029c 1340     		and	r3, r2
 4398 029e 9B08     		lsr	r3, r3, #2
 4399 02a0 022B     		cmp	r3, #2
 4400 02a2 0ED0     		beq	.L342
 4401              	.L336:
1079:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4402              		.loc 1 1079 0
 4403 02a4 3B1C     		mov	r3, r7
 4404 02a6 0C33     		add	r3, r3, #12
 4405 02a8 3A1C     		mov	r2, r7
 4406 02aa 0C32     		add	r2, r2, #12
 4407 02ac 1288     		ldrh	r2, [r2]
 4408 02ae 0132     		add	r2, r2, #1
 4409 02b0 1A80     		strh	r2, [r3]
 4410              	.L335:
1079:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 4411              		.loc 1 1079 0 is_stmt 0
 4412 02b2 3B1C     		mov	r3, r7
 4413 02b4 0C33     		add	r3, r3, #12
 4414 02b6 0021     		mov	r1, #0
 4415 02b8 5A5E     		ldrsh	r2, [r3, r1]
 4416 02ba 1B4B     		ldr	r3, .L343+52
 4417 02bc 9A42     		cmp	r2, r3
 4418 02be E8DD     		ble	.L338
 4419 02c0 00E0     		b	.L337
 4420              	.L342:
 4421              		.loc 1 1081 0 is_stmt 1
 4422 02c2 C046     		mov	r8, r8
 4423              	.L337:
1082:../Sources/TFC/TFC_CrystalClock.c ****   }
1083:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) return 0x1A; // check EXT CLK is re
 4424              		.loc 1 1083 0
 4425 02c4 0B4B     		ldr	r3, .L343
 4426 02c6 9B79     		ldrb	r3, [r3, #6]
 4427 02c8 DBB2     		uxtb	r3, r3
 4428 02ca 1A1C     		mov	r2, r3
 4429 02cc 0C23     		mov	r3, #12
 4430 02ce 1340     		and	r3, r2
 4431 02d0 9B08     		lsr	r3, r3, #2
 4432 02d2 022B     		cmp	r3, #2
 4433 02d4 01D0     		beq	.L339
 4434              		.loc 1 1083 0 is_stmt 0
 4435 02d6 1A23     		mov	r3, #26
 4436 02d8 08E0     		b	.L310
 4437              	.L339:
1084:../Sources/TFC/TFC_CrystalClock.c ****  
1085:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
1086:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1087:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1088:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 4438              		.loc 1 1088 0 is_stmt 1
 4439 02da 064B     		ldr	r3, .L343
 4440 02dc 054A     		ldr	r2, .L343
 4441 02de 5279     		ldrb	r2, [r2, #5]
 4442 02e0 D2B2     		uxtb	r2, r2
 4443 02e2 2021     		mov	r1, #32
 4444 02e4 0A43     		orr	r2, r1
 4445 02e6 D2B2     		uxtb	r2, r2
 4446 02e8 5A71     		strb	r2, [r3, #5]
1089:../Sources/TFC/TFC_CrystalClock.c ****   
1090:../Sources/TFC/TFC_CrystalClock.c ****   return crystal_val; // MCGOUT frequency equals external clock frequency  
 4447              		.loc 1 1090 0
 4448 02ea 7B68     		ldr	r3, [r7, #4]
 4449              	.L310:
1091:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_fbe
 4450              		.loc 1 1091 0
 4451 02ec 181C     		mov	r0, r3
 4452 02ee BD46     		mov	sp, r7
 4453 02f0 04B0     		add	sp, sp, #16
 4454              		@ sp needed for prologue
 4455 02f2 80BD     		pop	{r7, pc}
 4456              	.L344:
 4457              		.align	2
 4458              	.L343:
 4459 02f4 00400640 		.word	1074151424
 4460 02f8 80F0FA02 		.word	50000000
 4461 02fc 2F750000 		.word	29999
 4462 0300 409C0000 		.word	40000
 4463 0304 BFC62D00 		.word	2999999
 4464 0308 0048E801 		.word	32000000
 4465 030c 00127A00 		.word	8000000
 4466 0310 D0121300 		.word	1250000
 4467 0314 A0252600 		.word	2500000
 4468 0318 404B4C00 		.word	5000000
 4469 031c 80969800 		.word	10000000
 4470 0320 002D3101 		.word	20000000
 4471 0324 0F270000 		.word	9999
 4472 0328 CF070000 		.word	1999
 4473              		.cfi_endproc
 4474              	.LFE15:
 4476              		.section	.text.fbi_blpi,"ax",%progbits
 4477              		.align	2
 4478              		.global	fbi_blpi
 4479              		.code	16
 4480              		.thumb_func
 4482              	fbi_blpi:
 4483              	.LFB16:
1092:../Sources/TFC/TFC_CrystalClock.c **** 
1093:../Sources/TFC/TFC_CrystalClock.c **** 
1094:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1095:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fbi_blpi
1096:../Sources/TFC/TFC_CrystalClock.c ****  *
1097:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FBI to BLPI mode
1098:../Sources/TFC/TFC_CrystalClock.c ****  *
1099:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FBI mode to BLPI mode. This is
1100:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
1101:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1102:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. 
1103:../Sources/TFC/TFC_CrystalClock.c ****  *
1104:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: irc_freq - internal reference clock frequency
1105:../Sources/TFC/TFC_CrystalClock.c ****  *             ircs_select - 0 if slow irc, 1 if fast irc
1106:../Sources/TFC/TFC_CrystalClock.c ****  *
1107:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGOUT frequency or error code 0x13
1108:../Sources/TFC/TFC_CrystalClock.c ****  */
1109:../Sources/TFC/TFC_CrystalClock.c **** int fbi_blpi(int irc_freq, unsigned char irc_select)
1110:../Sources/TFC/TFC_CrystalClock.c **** {
 4484              		.loc 1 1110 0
 4485              		.cfi_startproc
 4486 0000 80B5     		push	{r7, lr}
 4487              	.LCFI48:
 4488              		.cfi_def_cfa_offset 8
 4489              		.cfi_offset 7, -8
 4490              		.cfi_offset 14, -4
 4491 0002 84B0     		sub	sp, sp, #16
 4492              	.LCFI49:
 4493              		.cfi_def_cfa_offset 24
 4494 0004 00AF     		add	r7, sp, #0
 4495              	.LCFI50:
 4496              		.cfi_def_cfa_register 7
 4497 0006 7860     		str	r0, [r7, #4]
 4498 0008 0A1C     		mov	r2, r1
 4499 000a FB1C     		add	r3, r7, #3
 4500 000c 1A70     		strb	r2, [r3]
1111:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1112:../Sources/TFC/TFC_CrystalClock.c ****   
1113:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1114:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4501              		.loc 1 1114 0
 4502 000e 234B     		ldr	r3, .L350
 4503 0010 9B79     		ldrb	r3, [r3, #6]
 4504 0012 DBB2     		uxtb	r3, r3
 4505 0014 1A1C     		mov	r2, r3
 4506 0016 0C23     		mov	r3, #12
 4507 0018 1340     		and	r3, r2
 4508 001a 9B08     		lsr	r3, r3, #2
 4509 001c 012B     		cmp	r3, #1
 4510 001e 14D1     		bne	.L346
1115:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4511              		.loc 1 1115 0
 4512 0020 1E4B     		ldr	r3, .L350
 4513 0022 9B79     		ldrb	r3, [r3, #6]
 4514 0024 DBB2     		uxtb	r3, r3
 4515 0026 1A1C     		mov	r2, r3
 4516 0028 1023     		mov	r3, #16
 4517 002a 1340     		and	r3, r2
1114:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4518              		.loc 1 1114 0
 4519 002c 0DD0     		beq	.L346
1116:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4520              		.loc 1 1116 0
 4521 002e 1B4B     		ldr	r3, .L350
 4522 0030 9B79     		ldrb	r3, [r3, #6]
 4523 0032 DBB2     		uxtb	r3, r3
 4524 0034 1A1C     		mov	r2, r3
 4525 0036 2023     		mov	r3, #32
 4526 0038 1340     		and	r3, r2
1115:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4527              		.loc 1 1115 0
 4528 003a 06D1     		bne	.L346
1117:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 4529              		.loc 1 1117 0
 4530 003c 174B     		ldr	r3, .L350
 4531 003e 5B78     		ldrb	r3, [r3, #1]
 4532 0040 DBB2     		uxtb	r3, r3
 4533 0042 1A1C     		mov	r2, r3
 4534 0044 0223     		mov	r3, #2
 4535 0046 1340     		and	r3, r2
1114:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4536              		.loc 1 1114 0
 4537 0048 01D0     		beq	.L347
 4538              	.L346:
1118:../Sources/TFC/TFC_CrystalClock.c ****   {  
1119:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4539              		.loc 1 1119 0
 4540 004a 0323     		mov	r3, #3
 4541 004c 21E0     		b	.L348
 4542              	.L347:
1120:../Sources/TFC/TFC_CrystalClock.c ****   }
1121:../Sources/TFC/TFC_CrystalClock.c **** 
1122:../Sources/TFC/TFC_CrystalClock.c **** // Set LP bit to disable the FLL and enter BLPI
1123:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 |= MCG_C2_LP_MASK;
 4543              		.loc 1 1123 0
 4544 004e 134B     		ldr	r3, .L350
 4545 0050 124A     		ldr	r2, .L350
 4546 0052 5278     		ldrb	r2, [r2, #1]
 4547 0054 D2B2     		uxtb	r2, r2
 4548 0056 0221     		mov	r1, #2
 4549 0058 0A43     		orr	r2, r1
 4550 005a D2B2     		uxtb	r2, r2
 4551 005c 5A70     		strb	r2, [r3, #1]
1124:../Sources/TFC/TFC_CrystalClock.c ****   
1125:../Sources/TFC/TFC_CrystalClock.c **** // Now in BLPI
1126:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 4552              		.loc 1 1126 0
 4553 005e FB1C     		add	r3, r7, #3
 4554 0060 1B78     		ldrb	r3, [r3]
 4555 0062 002B     		cmp	r3, #0
 4556 0064 14D0     		beq	.L349
1127:../Sources/TFC/TFC_CrystalClock.c ****   {
1128:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 4557              		.loc 1 1128 0
 4558 0066 0D4B     		ldr	r3, .L350
 4559 0068 1B7A     		ldrb	r3, [r3, #8]
 4560 006a DBB2     		uxtb	r3, r3
 4561 006c 1A1C     		mov	r2, r3
 4562 006e 0E23     		mov	r3, #14
 4563 0070 1340     		and	r3, r2
 4564 0072 5B08     		lsr	r3, r3, #1
 4565 0074 0122     		mov	r2, #1
 4566 0076 9A40     		lsl	r2, r2, r3
 4567 0078 3B1C     		mov	r3, r7
 4568 007a 0F33     		add	r3, r3, #15
 4569 007c 1A70     		strb	r2, [r3]
1129:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 4570              		.loc 1 1129 0
 4571 007e 3B1C     		mov	r3, r7
 4572 0080 0F33     		add	r3, r3, #15
 4573 0082 1B78     		ldrb	r3, [r3]
 4574 0084 7868     		ldr	r0, [r7, #4]
 4575 0086 191C     		mov	r1, r3
 4576 0088 FFF7FEFF 		bl	__aeabi_idiv
 4577 008c 031C     		mov	r3, r0
 4578 008e 00E0     		b	.L348
 4579              	.L349:
1130:../Sources/TFC/TFC_CrystalClock.c ****   }
1131:../Sources/TFC/TFC_CrystalClock.c ****   else
1132:../Sources/TFC/TFC_CrystalClock.c ****   {
1133:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 4580              		.loc 1 1133 0
 4581 0090 7B68     		ldr	r3, [r7, #4]
 4582              	.L348:
1134:../Sources/TFC/TFC_CrystalClock.c ****   }   
1135:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_blpi
 4583              		.loc 1 1135 0
 4584 0092 181C     		mov	r0, r3
 4585 0094 BD46     		mov	sp, r7
 4586 0096 04B0     		add	sp, sp, #16
 4587              		@ sp needed for prologue
 4588 0098 80BD     		pop	{r7, pc}
 4589              	.L351:
 4590 009a C046     		.align	2
 4591              	.L350:
 4592 009c 00400640 		.word	1074151424
 4593              		.cfi_endproc
 4594              	.LFE16:
 4596              		.section	.text.blpi_fbi,"ax",%progbits
 4597              		.align	2
 4598              		.global	blpi_fbi
 4599              		.code	16
 4600              		.thumb_func
 4602              	blpi_fbi:
 4603              	.LFB17:
1136:../Sources/TFC/TFC_CrystalClock.c **** 
1137:../Sources/TFC/TFC_CrystalClock.c **** 
1138:../Sources/TFC/TFC_CrystalClock.c **** 
1139:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1140:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : blpi_fbi
1141:../Sources/TFC/TFC_CrystalClock.c ****  *
1142:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: BLPI to FBI mode
1143:../Sources/TFC/TFC_CrystalClock.c ****  *
1144:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from BLPI mode to FBI mode. This is
1145:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by clearing the MCG_C2[LP] bit. There is no status bit to 
1146:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1147:../Sources/TFC/TFC_CrystalClock.c ****  * in BLPI mode. 
1148:../Sources/TFC/TFC_CrystalClock.c ****  *
1149:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: irc_freq - internal reference clock frequency
1150:../Sources/TFC/TFC_CrystalClock.c ****  *             ircs_select - 0 if slow irc, 1 if fast irc
1151:../Sources/TFC/TFC_CrystalClock.c ****  *
1152:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGOUT frequency or error code 0x15
1153:../Sources/TFC/TFC_CrystalClock.c ****  */
1154:../Sources/TFC/TFC_CrystalClock.c **** int blpi_fbi(int irc_freq, unsigned char irc_select)
1155:../Sources/TFC/TFC_CrystalClock.c **** {
 4604              		.loc 1 1155 0
 4605              		.cfi_startproc
 4606 0000 80B5     		push	{r7, lr}
 4607              	.LCFI51:
 4608              		.cfi_def_cfa_offset 8
 4609              		.cfi_offset 7, -8
 4610              		.cfi_offset 14, -4
 4611 0002 84B0     		sub	sp, sp, #16
 4612              	.LCFI52:
 4613              		.cfi_def_cfa_offset 24
 4614 0004 00AF     		add	r7, sp, #0
 4615              	.LCFI53:
 4616              		.cfi_def_cfa_register 7
 4617 0006 7860     		str	r0, [r7, #4]
 4618 0008 0A1C     		mov	r2, r1
 4619 000a FB1C     		add	r3, r7, #3
 4620 000c 1A70     		strb	r2, [r3]
1156:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1157:../Sources/TFC/TFC_CrystalClock.c ****   // check if in BLPI mode
1158:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4621              		.loc 1 1158 0
 4622 000e 234B     		ldr	r3, .L357
 4623 0010 9B79     		ldrb	r3, [r3, #6]
 4624 0012 DBB2     		uxtb	r3, r3
 4625 0014 1A1C     		mov	r2, r3
 4626 0016 0C23     		mov	r3, #12
 4627 0018 1340     		and	r3, r2
 4628 001a 9B08     		lsr	r3, r3, #2
 4629 001c 012B     		cmp	r3, #1
 4630 001e 14D1     		bne	.L353
1159:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4631              		.loc 1 1159 0
 4632 0020 1E4B     		ldr	r3, .L357
 4633 0022 9B79     		ldrb	r3, [r3, #6]
 4634 0024 DBB2     		uxtb	r3, r3
 4635 0026 1A1C     		mov	r2, r3
 4636 0028 1023     		mov	r3, #16
 4637 002a 1340     		and	r3, r2
1158:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4638              		.loc 1 1158 0
 4639 002c 0DD0     		beq	.L353
1160:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4640              		.loc 1 1160 0
 4641 002e 1B4B     		ldr	r3, .L357
 4642 0030 9B79     		ldrb	r3, [r3, #6]
 4643 0032 DBB2     		uxtb	r3, r3
 4644 0034 1A1C     		mov	r2, r3
 4645 0036 2023     		mov	r3, #32
 4646 0038 1340     		and	r3, r2
1159:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4647              		.loc 1 1159 0
 4648 003a 06D1     		bne	.L353
1161:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_C2 & MCG_C2_LP_MASK)))                                     // check LP bit is set
 4649              		.loc 1 1161 0
 4650 003c 174B     		ldr	r3, .L357
 4651 003e 5B78     		ldrb	r3, [r3, #1]
 4652 0040 DBB2     		uxtb	r3, r3
 4653 0042 1A1C     		mov	r2, r3
 4654 0044 0223     		mov	r3, #2
 4655 0046 1340     		and	r3, r2
1158:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4656              		.loc 1 1158 0
 4657 0048 01D1     		bne	.L354
 4658              	.L353:
1162:../Sources/TFC/TFC_CrystalClock.c ****   {
1163:../Sources/TFC/TFC_CrystalClock.c ****     return 0x5;                                                       // MCG not in correct mode re
 4659              		.loc 1 1163 0
 4660 004a 0523     		mov	r3, #5
 4661 004c 21E0     		b	.L355
 4662              	.L354:
1164:../Sources/TFC/TFC_CrystalClock.c ****   }
1165:../Sources/TFC/TFC_CrystalClock.c **** 
1166:../Sources/TFC/TFC_CrystalClock.c **** // Clear LP bit to enable the FLL and enter FBI mode   
1167:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 &= ~MCG_C2_LP_MASK;
 4663              		.loc 1 1167 0
 4664 004e 134B     		ldr	r3, .L357
 4665 0050 124A     		ldr	r2, .L357
 4666 0052 5278     		ldrb	r2, [r2, #1]
 4667 0054 D2B2     		uxtb	r2, r2
 4668 0056 0221     		mov	r1, #2
 4669 0058 8A43     		bic	r2, r1
 4670 005a D2B2     		uxtb	r2, r2
 4671 005c 5A70     		strb	r2, [r3, #1]
1168:../Sources/TFC/TFC_CrystalClock.c ****   
1169:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1170:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 4672              		.loc 1 1170 0
 4673 005e FB1C     		add	r3, r7, #3
 4674 0060 1B78     		ldrb	r3, [r3]
 4675 0062 002B     		cmp	r3, #0
 4676 0064 14D0     		beq	.L356
1171:../Sources/TFC/TFC_CrystalClock.c ****   {
1172:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 4677              		.loc 1 1172 0
 4678 0066 0D4B     		ldr	r3, .L357
 4679 0068 1B7A     		ldrb	r3, [r3, #8]
 4680 006a DBB2     		uxtb	r3, r3
 4681 006c 1A1C     		mov	r2, r3
 4682 006e 0E23     		mov	r3, #14
 4683 0070 1340     		and	r3, r2
 4684 0072 5B08     		lsr	r3, r3, #1
 4685 0074 0122     		mov	r2, #1
 4686 0076 9A40     		lsl	r2, r2, r3
 4687 0078 3B1C     		mov	r3, r7
 4688 007a 0F33     		add	r3, r3, #15
 4689 007c 1A70     		strb	r2, [r3]
1173:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 4690              		.loc 1 1173 0
 4691 007e 3B1C     		mov	r3, r7
 4692 0080 0F33     		add	r3, r3, #15
 4693 0082 1B78     		ldrb	r3, [r3]
 4694 0084 7868     		ldr	r0, [r7, #4]
 4695 0086 191C     		mov	r1, r3
 4696 0088 FFF7FEFF 		bl	__aeabi_idiv
 4697 008c 031C     		mov	r3, r0
 4698 008e 00E0     		b	.L355
 4699              	.L356:
1174:../Sources/TFC/TFC_CrystalClock.c ****   }
1175:../Sources/TFC/TFC_CrystalClock.c ****   else
1176:../Sources/TFC/TFC_CrystalClock.c ****   {
1177:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 4700              		.loc 1 1177 0
 4701 0090 7B68     		ldr	r3, [r7, #4]
 4702              	.L355:
1178:../Sources/TFC/TFC_CrystalClock.c ****   }
1179:../Sources/TFC/TFC_CrystalClock.c **** } // blpi_fbi
 4703              		.loc 1 1179 0
 4704 0092 181C     		mov	r0, r3
 4705 0094 BD46     		mov	sp, r7
 4706 0096 04B0     		add	sp, sp, #16
 4707              		@ sp needed for prologue
 4708 0098 80BD     		pop	{r7, pc}
 4709              	.L358:
 4710 009a C046     		.align	2
 4711              	.L357:
 4712 009c 00400640 		.word	1074151424
 4713              		.cfi_endproc
 4714              	.LFE17:
 4716              		.section	.text.fbi_fee,"ax",%progbits
 4717              		.align	2
 4718              		.global	fbi_fee
 4719              		.code	16
 4720              		.thumb_func
 4722              	fbi_fee:
 4723              	.LFB18:
1180:../Sources/TFC/TFC_CrystalClock.c **** 
1181:../Sources/TFC/TFC_CrystalClock.c **** 
1182:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
1183:../Sources/TFC/TFC_CrystalClock.c **** {
 4724              		.loc 1 1183 0
 4725              		.cfi_startproc
 4726 0000 80B5     		push	{r7, lr}
 4727              	.LCFI54:
 4728              		.cfi_def_cfa_offset 8
 4729              		.cfi_offset 7, -8
 4730              		.cfi_offset 14, -4
 4731 0002 86B0     		sub	sp, sp, #24
 4732              	.LCFI55:
 4733              		.cfi_def_cfa_offset 32
 4734 0004 00AF     		add	r7, sp, #0
 4735              	.LCFI56:
 4736              		.cfi_def_cfa_register 7
 4737 0006 7860     		str	r0, [r7, #4]
 4738 0008 FB1C     		add	r3, r7, #3
 4739 000a 1970     		strb	r1, [r3]
 4740 000c BB1C     		add	r3, r7, #2
 4741 000e 1A70     		strb	r2, [r3]
1184:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1185:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
1186:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1187:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out, fll_ref_freq;
1188:../Sources/TFC/TFC_CrystalClock.c **** 
1189:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4742              		.loc 1 1190 0
 4743 0010 C64B     		ldr	r3, .L398
 4744 0012 9B79     		ldrb	r3, [r3, #6]
 4745 0014 DBB2     		uxtb	r3, r3
 4746 0016 1A1C     		mov	r2, r3
 4747 0018 0C23     		mov	r3, #12
 4748 001a 1340     		and	r3, r2
 4749 001c 9B08     		lsr	r3, r3, #2
 4750 001e 012B     		cmp	r3, #1
 4751 0020 14D1     		bne	.L360
1191:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4752              		.loc 1 1191 0
 4753 0022 C24B     		ldr	r3, .L398
 4754 0024 9B79     		ldrb	r3, [r3, #6]
 4755 0026 DBB2     		uxtb	r3, r3
 4756 0028 1A1C     		mov	r2, r3
 4757 002a 1023     		mov	r3, #16
 4758 002c 1340     		and	r3, r2
1190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4759              		.loc 1 1190 0
 4760 002e 0DD0     		beq	.L360
1192:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 4761              		.loc 1 1192 0
 4762 0030 BE4B     		ldr	r3, .L398
 4763 0032 9B79     		ldrb	r3, [r3, #6]
 4764 0034 DBB2     		uxtb	r3, r3
 4765 0036 1A1C     		mov	r2, r3
 4766 0038 2023     		mov	r3, #32
 4767 003a 1340     		and	r3, r2
1191:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 4768              		.loc 1 1191 0
 4769 003c 06D1     		bne	.L360
1193:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 4770              		.loc 1 1193 0
 4771 003e BB4B     		ldr	r3, .L398
 4772 0040 5B78     		ldrb	r3, [r3, #1]
 4773 0042 DBB2     		uxtb	r3, r3
 4774 0044 1A1C     		mov	r2, r3
 4775 0046 0223     		mov	r3, #2
 4776 0048 1340     		and	r3, r2
1190:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 4777              		.loc 1 1190 0
 4778 004a 01D0     		beq	.L361
 4779              	.L360:
1194:../Sources/TFC/TFC_CrystalClock.c ****   {  
1195:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 4780              		.loc 1 1195 0
 4781 004c 0323     		mov	r3, #3
 4782 004e 92E1     		b	.L362
 4783              	.L361:
1196:../Sources/TFC/TFC_CrystalClock.c ****   }
1197:../Sources/TFC/TFC_CrystalClock.c ****   
1198:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1199:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 4784              		.loc 1 1199 0
 4785 0050 7A68     		ldr	r2, [r7, #4]
 4786 0052 B74B     		ldr	r3, .L398+4
 4787 0054 9A42     		cmp	r2, r3
 4788 0056 01DD     		ble	.L363
 4789              		.loc 1 1199 0 is_stmt 0
 4790 0058 2123     		mov	r3, #33
 4791 005a 8CE1     		b	.L362
 4792              	.L363:
1200:../Sources/TFC/TFC_CrystalClock.c ****   
1201:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1202:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 4793              		.loc 1 1202 0 is_stmt 1
 4794 005c BB1C     		add	r3, r7, #2
 4795 005e 1B78     		ldrb	r3, [r3]
 4796 0060 002B     		cmp	r3, #0
 4797 0062 11D0     		beq	.L364
1203:../Sources/TFC/TFC_CrystalClock.c ****   {
1204:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 4798              		.loc 1 1204 0
 4799 0064 7A68     		ldr	r2, [r7, #4]
 4800 0066 B34B     		ldr	r3, .L398+8
 4801 0068 9A42     		cmp	r2, r3
 4802 006a 0BDD     		ble	.L365
 4803              		.loc 1 1204 0 is_stmt 0
 4804 006c 7A68     		ldr	r2, [r7, #4]
 4805 006e B24B     		ldr	r3, .L398+12
 4806 0070 9A42     		cmp	r2, r3
 4807 0072 03DD     		ble	.L366
1205:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 4808              		.loc 1 1205 0 is_stmt 1
 4809 0074 7A68     		ldr	r2, [r7, #4]
 4810 0076 B14B     		ldr	r3, .L398+16
 4811 0078 9A42     		cmp	r2, r3
 4812 007a 03DD     		ble	.L365
 4813              	.L366:
 4814              		.loc 1 1205 0 is_stmt 0
 4815 007c 7A68     		ldr	r2, [r7, #4]
 4816 007e B04B     		ldr	r3, .L398+20
 4817 0080 9A42     		cmp	r2, r3
 4818 0082 01DD     		ble	.L364
 4819              	.L365:
1206:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 4820              		.loc 1 1206 0 is_stmt 1
 4821 0084 2223     		mov	r3, #34
 4822 0086 76E1     		b	.L362
 4823              	.L364:
1207:../Sources/TFC/TFC_CrystalClock.c ****   }
1208:../Sources/TFC/TFC_CrystalClock.c **** 
1209:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1210:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 4824              		.loc 1 1210 0
 4825 0088 FB1C     		add	r3, r7, #3
 4826 008a 1B78     		ldrb	r3, [r3]
 4827 008c 002B     		cmp	r3, #0
 4828 008e 02D0     		beq	.L367
1211:../Sources/TFC/TFC_CrystalClock.c ****   {
1212:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 4829              		.loc 1 1212 0
 4830 0090 FB1C     		add	r3, r7, #3
 4831 0092 0122     		mov	r2, #1
 4832 0094 1A70     		strb	r2, [r3]
 4833              	.L367:
1213:../Sources/TFC/TFC_CrystalClock.c ****   }
1214:../Sources/TFC/TFC_CrystalClock.c **** 
1215:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1216:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1217:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1218:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 4834              		.loc 1 1218 0
 4835 0096 A54A     		ldr	r2, .L398
 4836 0098 3B1C     		mov	r3, r7
 4837 009a 1733     		add	r3, r3, #23
 4838 009c 5278     		ldrb	r2, [r2, #1]
 4839 009e 1A70     		strb	r2, [r3]
1219:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 4840              		.loc 1 1219 0
 4841 00a0 3B1C     		mov	r3, r7
 4842 00a2 1733     		add	r3, r3, #23
 4843 00a4 3A1C     		mov	r2, r7
 4844 00a6 1732     		add	r2, r2, #23
 4845 00a8 1278     		ldrb	r2, [r2]
 4846 00aa 3C21     		mov	r1, #60
 4847 00ac 8A43     		bic	r2, r1
 4848 00ae 1A70     		strb	r2, [r3]
1220:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 4849              		.loc 1 1220 0
 4850 00b0 7A68     		ldr	r2, [r7, #4]
 4851 00b2 A14B     		ldr	r3, .L398+12
 4852 00b4 9A42     		cmp	r2, r3
 4853 00b6 11DC     		bgt	.L368
1221:../Sources/TFC/TFC_CrystalClock.c ****   {
1222:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4854              		.loc 1 1222 0
 4855 00b8 FB1C     		add	r3, r7, #3
 4856 00ba 1B78     		ldrb	r3, [r3]
 4857 00bc DB00     		lsl	r3, r3, #3
 4858 00be DAB2     		uxtb	r2, r3
 4859 00c0 BB1C     		add	r3, r7, #2
 4860 00c2 1B78     		ldrb	r3, [r3]
 4861 00c4 9B00     		lsl	r3, r3, #2
 4862 00c6 DBB2     		uxtb	r3, r3
 4863 00c8 1343     		orr	r3, r2
 4864 00ca D9B2     		uxtb	r1, r3
 4865 00cc 3B1C     		mov	r3, r7
 4866 00ce 1733     		add	r3, r3, #23
 4867 00d0 3A1C     		mov	r2, r7
 4868 00d2 1732     		add	r2, r2, #23
 4869 00d4 1278     		ldrb	r2, [r2]
 4870 00d6 0A43     		orr	r2, r1
 4871 00d8 1A70     		strb	r2, [r3]
 4872 00da 2CE0     		b	.L369
 4873              	.L368:
1223:../Sources/TFC/TFC_CrystalClock.c ****   }
1224:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 4874              		.loc 1 1224 0
 4875 00dc 7A68     		ldr	r2, [r7, #4]
 4876 00de 994B     		ldr	r3, .L398+24
 4877 00e0 9A42     		cmp	r2, r3
 4878 00e2 14DC     		bgt	.L370
1225:../Sources/TFC/TFC_CrystalClock.c ****   {
1226:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4879              		.loc 1 1226 0
 4880 00e4 FB1C     		add	r3, r7, #3
 4881 00e6 1B78     		ldrb	r3, [r3]
 4882 00e8 DB00     		lsl	r3, r3, #3
 4883 00ea DAB2     		uxtb	r2, r3
 4884 00ec BB1C     		add	r3, r7, #2
 4885 00ee 1B78     		ldrb	r3, [r3]
 4886 00f0 9B00     		lsl	r3, r3, #2
 4887 00f2 DBB2     		uxtb	r3, r3
 4888 00f4 1343     		orr	r3, r2
 4889 00f6 DAB2     		uxtb	r2, r3
 4890 00f8 3B1C     		mov	r3, r7
 4891 00fa 1733     		add	r3, r3, #23
 4892 00fc 1B78     		ldrb	r3, [r3]
 4893 00fe 1343     		orr	r3, r2
 4894 0100 DAB2     		uxtb	r2, r3
 4895 0102 3B1C     		mov	r3, r7
 4896 0104 1733     		add	r3, r3, #23
 4897 0106 1021     		mov	r1, #16
 4898 0108 0A43     		orr	r2, r1
 4899 010a 1A70     		strb	r2, [r3]
 4900 010c 13E0     		b	.L369
 4901              	.L370:
1227:../Sources/TFC/TFC_CrystalClock.c ****   }
1228:../Sources/TFC/TFC_CrystalClock.c ****   else
1229:../Sources/TFC/TFC_CrystalClock.c ****   {
1230:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 4902              		.loc 1 1230 0
 4903 010e FB1C     		add	r3, r7, #3
 4904 0110 1B78     		ldrb	r3, [r3]
 4905 0112 DB00     		lsl	r3, r3, #3
 4906 0114 DAB2     		uxtb	r2, r3
 4907 0116 BB1C     		add	r3, r7, #2
 4908 0118 1B78     		ldrb	r3, [r3]
 4909 011a 9B00     		lsl	r3, r3, #2
 4910 011c DBB2     		uxtb	r3, r3
 4911 011e 1343     		orr	r3, r2
 4912 0120 DAB2     		uxtb	r2, r3
 4913 0122 3B1C     		mov	r3, r7
 4914 0124 1733     		add	r3, r3, #23
 4915 0126 1B78     		ldrb	r3, [r3]
 4916 0128 1343     		orr	r3, r2
 4917 012a DAB2     		uxtb	r2, r3
 4918 012c 3B1C     		mov	r3, r7
 4919 012e 1733     		add	r3, r3, #23
 4920 0130 2021     		mov	r1, #32
 4921 0132 0A43     		orr	r2, r1
 4922 0134 1A70     		strb	r2, [r3]
 4923              	.L369:
1231:../Sources/TFC/TFC_CrystalClock.c ****   }
1232:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 4924              		.loc 1 1232 0
 4925 0136 7D4B     		ldr	r3, .L398
 4926 0138 3A1C     		mov	r2, r7
 4927 013a 1732     		add	r2, r2, #23
 4928 013c 1278     		ldrb	r2, [r2]
 4929 013e 5A70     		strb	r2, [r3, #1]
1233:../Sources/TFC/TFC_CrystalClock.c **** 
1234:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1235:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1236:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 4930              		.loc 1 1236 0
 4931 0140 7A68     		ldr	r2, [r7, #4]
 4932 0142 814B     		ldr	r3, .L398+28
 4933 0144 9A42     		cmp	r2, r3
 4934 0146 04DC     		bgt	.L371
 4935              		.loc 1 1236 0 is_stmt 0
 4936 0148 3B1C     		mov	r3, r7
 4937 014a 1633     		add	r3, r3, #22
 4938 014c 0022     		mov	r2, #0
 4939 014e 1A70     		strb	r2, [r3]
 4940 0150 27E0     		b	.L372
 4941              	.L371:
1237:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 4942              		.loc 1 1237 0 is_stmt 1
 4943 0152 7A68     		ldr	r2, [r7, #4]
 4944 0154 7D4B     		ldr	r3, .L398+32
 4945 0156 9A42     		cmp	r2, r3
 4946 0158 04DC     		bgt	.L373
 4947              		.loc 1 1237 0 is_stmt 0
 4948 015a 3B1C     		mov	r3, r7
 4949 015c 1633     		add	r3, r3, #22
 4950 015e 0122     		mov	r2, #1
 4951 0160 1A70     		strb	r2, [r3]
 4952 0162 1EE0     		b	.L372
 4953              	.L373:
1238:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 4954              		.loc 1 1238 0 is_stmt 1
 4955 0164 7A68     		ldr	r2, [r7, #4]
 4956 0166 7A4B     		ldr	r3, .L398+36
 4957 0168 9A42     		cmp	r2, r3
 4958 016a 04DC     		bgt	.L374
 4959              		.loc 1 1238 0 is_stmt 0
 4960 016c 3B1C     		mov	r3, r7
 4961 016e 1633     		add	r3, r3, #22
 4962 0170 0222     		mov	r2, #2
 4963 0172 1A70     		strb	r2, [r3]
 4964 0174 15E0     		b	.L372
 4965              	.L374:
1239:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 4966              		.loc 1 1239 0 is_stmt 1
 4967 0176 7A68     		ldr	r2, [r7, #4]
 4968 0178 764B     		ldr	r3, .L398+40
 4969 017a 9A42     		cmp	r2, r3
 4970 017c 04DC     		bgt	.L375
 4971              		.loc 1 1239 0 is_stmt 0
 4972 017e 3B1C     		mov	r3, r7
 4973 0180 1633     		add	r3, r3, #22
 4974 0182 0322     		mov	r2, #3
 4975 0184 1A70     		strb	r2, [r3]
 4976 0186 0CE0     		b	.L372
 4977              	.L375:
1240:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 4978              		.loc 1 1240 0 is_stmt 1
 4979 0188 7A68     		ldr	r2, [r7, #4]
 4980 018a 734B     		ldr	r3, .L398+44
 4981 018c 9A42     		cmp	r2, r3
 4982 018e 04DC     		bgt	.L376
 4983              		.loc 1 1240 0 is_stmt 0
 4984 0190 3B1C     		mov	r3, r7
 4985 0192 1633     		add	r3, r3, #22
 4986 0194 0422     		mov	r2, #4
 4987 0196 1A70     		strb	r2, [r3]
 4988 0198 03E0     		b	.L372
 4989              	.L376:
1241:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 4990              		.loc 1 1241 0 is_stmt 1
 4991 019a 3B1C     		mov	r3, r7
 4992 019c 1633     		add	r3, r3, #22
 4993 019e 0522     		mov	r2, #5
 4994 01a0 1A70     		strb	r2, [r3]
 4995              	.L372:
1242:../Sources/TFC/TFC_CrystalClock.c **** // The FLL ref clk divide value depends on FRDIV and the RANGE value
1243:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 4996              		.loc 1 1243 0
 4997 01a2 624B     		ldr	r3, .L398
 4998 01a4 5B78     		ldrb	r3, [r3, #1]
 4999 01a6 DBB2     		uxtb	r3, r3
 5000 01a8 1A1C     		mov	r2, r3
 5001 01aa 3023     		mov	r3, #48
 5002 01ac 1340     		and	r3, r2
 5003 01ae 1B09     		lsr	r3, r3, #4
 5004 01b0 0DD0     		beq	.L377
1244:../Sources/TFC/TFC_CrystalClock.c ****   {
1245:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
 5005              		.loc 1 1245 0
 5006 01b2 3B1C     		mov	r3, r7
 5007 01b4 1633     		add	r3, r3, #22
 5008 01b6 1B78     		ldrb	r3, [r3]
 5009 01b8 2022     		mov	r2, #32
 5010 01ba 111C     		mov	r1, r2
 5011 01bc 9940     		lsl	r1, r1, r3
 5012 01be 0B1C     		mov	r3, r1
 5013 01c0 7868     		ldr	r0, [r7, #4]
 5014 01c2 191C     		mov	r1, r3
 5015 01c4 FFF7FEFF 		bl	__aeabi_idiv
 5016 01c8 031C     		mov	r3, r0
 5017 01ca 3B61     		str	r3, [r7, #16]
 5018 01cc 0CE0     		b	.L378
 5019              	.L377:
1246:../Sources/TFC/TFC_CrystalClock.c ****   }
1247:../Sources/TFC/TFC_CrystalClock.c ****   else
1248:../Sources/TFC/TFC_CrystalClock.c ****   {
1249:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
 5020              		.loc 1 1249 0
 5021 01ce 3B1C     		mov	r3, r7
 5022 01d0 1633     		add	r3, r3, #22
 5023 01d2 1B78     		ldrb	r3, [r3]
 5024 01d4 0122     		mov	r2, #1
 5025 01d6 111C     		mov	r1, r2
 5026 01d8 9940     		lsl	r1, r1, r3
 5027 01da 0B1C     		mov	r3, r1
 5028 01dc 7868     		ldr	r0, [r7, #4]
 5029 01de 191C     		mov	r1, r3
 5030 01e0 FFF7FEFF 		bl	__aeabi_idiv
 5031 01e4 031C     		mov	r3, r0
 5032 01e6 3B61     		str	r3, [r7, #16]
 5033              	.L378:
1250:../Sources/TFC/TFC_CrystalClock.c ****   }
1251:../Sources/TFC/TFC_CrystalClock.c ****   
1252:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1253:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 5034              		.loc 1 1253 0
 5035 01e8 3B69     		ldr	r3, [r7, #16]
 5036 01ea 181C     		mov	r0, r3
 5037 01ec FFF7FEFF 		bl	fll_freq
 5038 01f0 031C     		mov	r3, r0
 5039 01f2 FB60     		str	r3, [r7, #12]
1254:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 5040              		.loc 1 1254 0
 5041 01f4 FB68     		ldr	r3, [r7, #12]
 5042 01f6 3B2B     		cmp	r3, #59
 5043 01f8 01DC     		bgt	.L379
 5044              		.loc 1 1254 0 is_stmt 0
 5045 01fa FB68     		ldr	r3, [r7, #12]
 5046 01fc BBE0     		b	.L362
 5047              	.L379:
1255:../Sources/TFC/TFC_CrystalClock.c ****   
1256:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1257:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1258:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=?, IREFSTEN=?
1259:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 5048              		.loc 1 1259 0 is_stmt 1
 5049 01fe 4B4A     		ldr	r2, .L398
 5050 0200 3B1C     		mov	r3, r7
 5051 0202 1733     		add	r3, r3, #23
 5052 0204 1278     		ldrb	r2, [r2]
 5053 0206 1A70     		strb	r2, [r3]
1260:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear CLKS, FRDIV and
 5054              		.loc 1 1260 0
 5055 0208 3B1C     		mov	r3, r7
 5056 020a 1733     		add	r3, r3, #23
 5057 020c 3A1C     		mov	r2, r7
 5058 020e 1732     		add	r2, r2, #23
 5059 0210 1178     		ldrb	r1, [r2]
 5060 0212 0322     		mov	r2, #3
 5061 0214 0A40     		and	r2, r1
 5062 0216 1A70     		strb	r2, [r3]
1261:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 5063              		.loc 1 1261 0
 5064 0218 3B1C     		mov	r3, r7
 5065 021a 1633     		add	r3, r3, #22
 5066 021c 1B78     		ldrb	r3, [r3]
 5067 021e DB00     		lsl	r3, r3, #3
 5068 0220 DAB2     		uxtb	r2, r3
 5069 0222 3823     		mov	r3, #56
 5070 0224 1340     		and	r3, r2
 5071 0226 D9B2     		uxtb	r1, r3
 5072 0228 3B1C     		mov	r3, r7
 5073 022a 1733     		add	r3, r3, #23
 5074 022c 3A1C     		mov	r2, r7
 5075 022e 1732     		add	r2, r2, #23
 5076 0230 1278     		ldrb	r2, [r2]
 5077 0232 0A43     		orr	r2, r1
 5078 0234 1A70     		strb	r2, [r3]
1262:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 5079              		.loc 1 1262 0
 5080 0236 3D4B     		ldr	r3, .L398
 5081 0238 3A1C     		mov	r2, r7
 5082 023a 1732     		add	r2, r2, #23
 5083 023c 1278     		ldrb	r2, [r2]
 5084 023e 1A70     		strb	r2, [r3]
1263:../Sources/TFC/TFC_CrystalClock.c **** 
1264:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1265:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 5085              		.loc 1 1265 0
 5086 0240 BB1C     		add	r3, r7, #2
 5087 0242 1B78     		ldrb	r3, [r3]
 5088 0244 002B     		cmp	r3, #0
 5089 0246 24D0     		beq	.L380
1266:../Sources/TFC/TFC_CrystalClock.c ****   {
1267:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5090              		.loc 1 1267 0
 5091 0248 3B1C     		mov	r3, r7
 5092 024a 1433     		add	r3, r3, #20
 5093 024c 0022     		mov	r2, #0
 5094 024e 1A80     		strh	r2, [r3]
 5095 0250 0DE0     		b	.L381
 5096              	.L384:
1268:../Sources/TFC/TFC_CrystalClock.c ****     {
1269:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 5097              		.loc 1 1269 0
 5098 0252 364B     		ldr	r3, .L398
 5099 0254 9B79     		ldrb	r3, [r3, #6]
 5100 0256 DBB2     		uxtb	r3, r3
 5101 0258 1A1C     		mov	r2, r3
 5102 025a 0223     		mov	r3, #2
 5103 025c 1340     		and	r3, r2
 5104 025e 0ED1     		bne	.L395
 5105              	.L382:
1267:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5106              		.loc 1 1267 0
 5107 0260 3B1C     		mov	r3, r7
 5108 0262 1433     		add	r3, r3, #20
 5109 0264 3A1C     		mov	r2, r7
 5110 0266 1432     		add	r2, r2, #20
 5111 0268 1288     		ldrh	r2, [r2]
 5112 026a 0132     		add	r2, r2, #1
 5113 026c 1A80     		strh	r2, [r3]
 5114              	.L381:
1267:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 10000 ; i++)
 5115              		.loc 1 1267 0 is_stmt 0
 5116 026e 3B1C     		mov	r3, r7
 5117 0270 1433     		add	r3, r3, #20
 5118 0272 0021     		mov	r1, #0
 5119 0274 5A5E     		ldrsh	r2, [r3, r1]
 5120 0276 394B     		ldr	r3, .L398+48
 5121 0278 9A42     		cmp	r2, r3
 5122 027a EADD     		ble	.L384
 5123 027c 00E0     		b	.L383
 5124              	.L395:
 5125              		.loc 1 1269 0 is_stmt 1
 5126 027e C046     		mov	r8, r8
 5127              	.L383:
1270:../Sources/TFC/TFC_CrystalClock.c ****     }
1271:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 5128              		.loc 1 1271 0
 5129 0280 2A4B     		ldr	r3, .L398
 5130 0282 9B79     		ldrb	r3, [r3, #6]
 5131 0284 DBB2     		uxtb	r3, r3
 5132 0286 1A1C     		mov	r2, r3
 5133 0288 0223     		mov	r3, #2
 5134 028a 1340     		and	r3, r2
 5135 028c 01D1     		bne	.L380
 5136              		.loc 1 1271 0 is_stmt 0
 5137 028e 2323     		mov	r3, #35
 5138 0290 71E0     		b	.L362
 5139              	.L380:
1272:../Sources/TFC/TFC_CrystalClock.c ****   }
1273:../Sources/TFC/TFC_CrystalClock.c **** 
1274:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1275:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5140              		.loc 1 1275 0 is_stmt 1
 5141 0292 3B1C     		mov	r3, r7
 5142 0294 1433     		add	r3, r3, #20
 5143 0296 0022     		mov	r2, #0
 5144 0298 1A80     		strh	r2, [r3]
 5145 029a 0DE0     		b	.L385
 5146              	.L388:
1276:../Sources/TFC/TFC_CrystalClock.c ****   {
1277:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 5147              		.loc 1 1277 0
 5148 029c 234B     		ldr	r3, .L398
 5149 029e 9B79     		ldrb	r3, [r3, #6]
 5150 02a0 DBB2     		uxtb	r3, r3
 5151 02a2 1A1C     		mov	r2, r3
 5152 02a4 1023     		mov	r3, #16
 5153 02a6 1340     		and	r3, r2
 5154 02a8 0ED0     		beq	.L396
 5155              	.L386:
1275:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5156              		.loc 1 1275 0
 5157 02aa 3B1C     		mov	r3, r7
 5158 02ac 1433     		add	r3, r3, #20
 5159 02ae 3A1C     		mov	r2, r7
 5160 02b0 1432     		add	r2, r2, #20
 5161 02b2 1288     		ldrh	r2, [r2]
 5162 02b4 0132     		add	r2, r2, #1
 5163 02b6 1A80     		strh	r2, [r3]
 5164              	.L385:
1275:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5165              		.loc 1 1275 0 is_stmt 0
 5166 02b8 3B1C     		mov	r3, r7
 5167 02ba 1433     		add	r3, r3, #20
 5168 02bc 0021     		mov	r1, #0
 5169 02be 5A5E     		ldrsh	r2, [r3, r1]
 5170 02c0 274B     		ldr	r3, .L398+52
 5171 02c2 9A42     		cmp	r2, r3
 5172 02c4 EADD     		ble	.L388
 5173 02c6 00E0     		b	.L387
 5174              	.L396:
 5175              		.loc 1 1277 0 is_stmt 1
 5176 02c8 C046     		mov	r8, r8
 5177              	.L387:
1278:../Sources/TFC/TFC_CrystalClock.c ****   }
1279:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 5178              		.loc 1 1279 0
 5179 02ca 184B     		ldr	r3, .L398
 5180 02cc 9B79     		ldrb	r3, [r3, #6]
 5181 02ce DBB2     		uxtb	r3, r3
 5182 02d0 1A1C     		mov	r2, r3
 5183 02d2 1023     		mov	r3, #16
 5184 02d4 1340     		and	r3, r2
 5185 02d6 01D0     		beq	.L389
 5186              		.loc 1 1279 0 is_stmt 0
 5187 02d8 1123     		mov	r3, #17
 5188 02da 4CE0     		b	.L362
 5189              	.L389:
1280:../Sources/TFC/TFC_CrystalClock.c ****   
1281:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1282:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5190              		.loc 1 1282 0 is_stmt 1
 5191 02dc 3B1C     		mov	r3, r7
 5192 02de 1433     		add	r3, r3, #20
 5193 02e0 0022     		mov	r2, #0
 5194 02e2 1A80     		strh	r2, [r3]
 5195 02e4 0EE0     		b	.L390
 5196              	.L393:
1283:../Sources/TFC/TFC_CrystalClock.c ****   {
1284:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 5197              		.loc 1 1284 0
 5198 02e6 114B     		ldr	r3, .L398
 5199 02e8 9B79     		ldrb	r3, [r3, #6]
 5200 02ea DBB2     		uxtb	r3, r3
 5201 02ec 1A1C     		mov	r2, r3
 5202 02ee 0C23     		mov	r3, #12
 5203 02f0 1340     		and	r3, r2
 5204 02f2 9B08     		lsr	r3, r3, #2
 5205 02f4 0ED0     		beq	.L397
 5206              	.L391:
1282:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5207              		.loc 1 1282 0
 5208 02f6 3B1C     		mov	r3, r7
 5209 02f8 1433     		add	r3, r3, #20
 5210 02fa 3A1C     		mov	r2, r7
 5211 02fc 1432     		add	r2, r2, #20
 5212 02fe 1288     		ldrh	r2, [r2]
 5213 0300 0132     		add	r2, r2, #1
 5214 0302 1A80     		strh	r2, [r3]
 5215              	.L390:
1282:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5216              		.loc 1 1282 0 is_stmt 0
 5217 0304 3B1C     		mov	r3, r7
 5218 0306 1433     		add	r3, r3, #20
 5219 0308 0021     		mov	r1, #0
 5220 030a 5A5E     		ldrsh	r2, [r3, r1]
 5221 030c 144B     		ldr	r3, .L398+52
 5222 030e 9A42     		cmp	r2, r3
 5223 0310 E9DD     		ble	.L393
 5224 0312 00E0     		b	.L392
 5225              	.L397:
 5226              		.loc 1 1284 0 is_stmt 1
 5227 0314 C046     		mov	r8, r8
 5228              	.L392:
1285:../Sources/TFC/TFC_CrystalClock.c ****   }
1286:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLLK is reall
 5229              		.loc 1 1286 0
 5230 0316 054B     		ldr	r3, .L398
 5231 0318 9B79     		ldrb	r3, [r3, #6]
 5232 031a DBB2     		uxtb	r3, r3
 5233 031c 1A1C     		mov	r2, r3
 5234 031e 0C23     		mov	r3, #12
 5235 0320 1340     		and	r3, r2
 5236 0322 9B08     		lsr	r3, r3, #2
 5237 0324 1ED0     		beq	.L394
 5238              		.loc 1 1286 0 is_stmt 0
 5239 0326 1823     		mov	r3, #24
 5240 0328 25E0     		b	.L362
 5241              	.L399:
 5242 032a C046     		.align	2
 5243              	.L398:
 5244 032c 00400640 		.word	1074151424
 5245 0330 80F0FA02 		.word	50000000
 5246 0334 2F750000 		.word	29999
 5247 0338 409C0000 		.word	40000
 5248 033c BFC62D00 		.word	2999999
 5249 0340 0048E801 		.word	32000000
 5250 0344 00127A00 		.word	8000000
 5251 0348 D0121300 		.word	1250000
 5252 034c A0252600 		.word	2500000
 5253 0350 404B4C00 		.word	5000000
 5254 0354 80969800 		.word	10000000
 5255 0358 002D3101 		.word	20000000
 5256 035c 0F270000 		.word	9999
 5257 0360 CF070000 		.word	1999
 5258              	.L394:
1287:../Sources/TFC/TFC_CrystalClock.c ****  
1288:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEE  
1289:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1290:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1291:../Sources/TFC/TFC_CrystalClock.c **** // The clock monitor MUST be disabled when returning to a non-external clock mode (FEI, FBI and BLP
1292:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 5259              		.loc 1 1292 0 is_stmt 1
 5260 0364 064B     		ldr	r3, .L400
 5261 0366 064A     		ldr	r2, .L400
 5262 0368 5279     		ldrb	r2, [r2, #5]
 5263 036a D2B2     		uxtb	r2, r2
 5264 036c 2021     		mov	r1, #32
 5265 036e 0A43     		orr	r2, r1
 5266 0370 D2B2     		uxtb	r2, r2
 5267 0372 5A71     		strb	r2, [r3, #5]
1293:../Sources/TFC/TFC_CrystalClock.c ****   
1294:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out; // MCGOUT frequency equals FLL frequency
 5268              		.loc 1 1294 0
 5269 0374 FB68     		ldr	r3, [r7, #12]
 5270              	.L362:
1295:../Sources/TFC/TFC_CrystalClock.c **** } //fbi_fee
 5271              		.loc 1 1295 0
 5272 0376 181C     		mov	r0, r3
 5273 0378 BD46     		mov	sp, r7
 5274 037a 06B0     		add	sp, sp, #24
 5275              		@ sp needed for prologue
 5276 037c 80BD     		pop	{r7, pc}
 5277              	.L401:
 5278 037e C046     		.align	2
 5279              	.L400:
 5280 0380 00400640 		.word	1074151424
 5281              		.cfi_endproc
 5282              	.LFE18:
 5284              		.section	.text.fee_fbi,"ax",%progbits
 5285              		.align	2
 5286              		.global	fee_fbi
 5287              		.code	16
 5288              		.thumb_func
 5290              	fee_fbi:
 5291              	.LFB19:
1296:../Sources/TFC/TFC_CrystalClock.c **** 
1297:../Sources/TFC/TFC_CrystalClock.c **** 
1298:../Sources/TFC/TFC_CrystalClock.c **** int fee_fbi(int irc_freq, unsigned char irc_select)
1299:../Sources/TFC/TFC_CrystalClock.c **** { 
 5292              		.loc 1 1299 0
 5293              		.cfi_startproc
 5294 0000 80B5     		push	{r7, lr}
 5295              	.LCFI57:
 5296              		.cfi_def_cfa_offset 8
 5297              		.cfi_offset 7, -8
 5298              		.cfi_offset 14, -4
 5299 0002 84B0     		sub	sp, sp, #16
 5300              	.LCFI58:
 5301              		.cfi_def_cfa_offset 24
 5302 0004 00AF     		add	r7, sp, #0
 5303              	.LCFI59:
 5304              		.cfi_def_cfa_register 7
 5305 0006 7860     		str	r0, [r7, #4]
 5306 0008 0A1C     		mov	r2, r1
 5307 000a FB1C     		add	r3, r7, #3
 5308 000c 1A70     		strb	r2, [r3]
1300:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1301:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1302:../Sources/TFC/TFC_CrystalClock.c ****   
1303:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
1304:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5309              		.loc 1 1304 0
 5310 000e 874B     		ldr	r3, .L437
 5311 0010 9B79     		ldrb	r3, [r3, #6]
 5312 0012 DBB2     		uxtb	r3, r3
 5313 0014 1A1C     		mov	r2, r3
 5314 0016 0C23     		mov	r3, #12
 5315 0018 1340     		and	r3, r2
 5316 001a 9B08     		lsr	r3, r3, #2
 5317 001c 0DD1     		bne	.L403
1305:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external re
 5318              		.loc 1 1305 0
 5319 001e 834B     		ldr	r3, .L437
 5320 0020 9B79     		ldrb	r3, [r3, #6]
 5321 0022 DBB2     		uxtb	r3, r3
 5322 0024 1A1C     		mov	r2, r3
 5323 0026 1023     		mov	r3, #16
 5324 0028 1340     		and	r3, r2
1304:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5325              		.loc 1 1304 0
 5326 002a 06D1     		bne	.L403
1306:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected 
 5327              		.loc 1 1306 0
 5328 002c 7F4B     		ldr	r3, .L437
 5329 002e 9B79     		ldrb	r3, [r3, #6]
 5330 0030 DBB2     		uxtb	r3, r3
 5331 0032 1A1C     		mov	r2, r3
 5332 0034 2023     		mov	r3, #32
 5333 0036 1340     		and	r3, r2
1304:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5334              		.loc 1 1304 0
 5335 0038 01D0     		beq	.L404
 5336              	.L403:
1307:../Sources/TFC/TFC_CrystalClock.c ****   {
1308:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                     // return error code
 5337              		.loc 1 1308 0
 5338 003a 0223     		mov	r3, #2
 5339 003c F2E0     		b	.L405
 5340              	.L404:
1309:../Sources/TFC/TFC_CrystalClock.c ****   }
1310:../Sources/TFC/TFC_CrystalClock.c ****   
1311:../Sources/TFC/TFC_CrystalClock.c ****   // Check that the irc frequency matches the selected IRC 
1312:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5341              		.loc 1 1312 0
 5342 003e FB1C     		add	r3, r7, #3
 5343 0040 1B78     		ldrb	r3, [r3]
 5344 0042 002B     		cmp	r3, #0
 5345 0044 09D1     		bne	.L406
1313:../Sources/TFC/TFC_CrystalClock.c ****   {    
1314:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 5346              		.loc 1 1314 0
 5347 0046 7A68     		ldr	r2, [r7, #4]
 5348 0048 794B     		ldr	r3, .L437+4
 5349 004a 9A42     		cmp	r2, r3
 5350 004c 03DD     		ble	.L407
 5351              		.loc 1 1314 0 is_stmt 0
 5352 004e 7A68     		ldr	r2, [r7, #4]
 5353 0050 784B     		ldr	r3, .L437+8
 5354 0052 9A42     		cmp	r2, r3
 5355 0054 0BDD     		ble	.L408
 5356              	.L407:
 5357              		.loc 1 1314 0
 5358 0056 3123     		mov	r3, #49
 5359 0058 E4E0     		b	.L405
 5360              	.L406:
1315:../Sources/TFC/TFC_CrystalClock.c ****   }
1316:../Sources/TFC/TFC_CrystalClock.c ****   else
1317:../Sources/TFC/TFC_CrystalClock.c ****   {
1318:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 5361              		.loc 1 1318 0 is_stmt 1
 5362 005a 7A68     		ldr	r2, [r7, #4]
 5363 005c 764B     		ldr	r3, .L437+12
 5364 005e 9A42     		cmp	r2, r3
 5365 0060 03DD     		ble	.L409
 5366              		.loc 1 1318 0 is_stmt 0
 5367 0062 7A68     		ldr	r2, [r7, #4]
 5368 0064 754B     		ldr	r3, .L437+16
 5369 0066 9A42     		cmp	r2, r3
 5370 0068 01DD     		ble	.L408
 5371              	.L409:
 5372              		.loc 1 1318 0
 5373 006a 3223     		mov	r3, #50
 5374 006c DAE0     		b	.L405
 5375              	.L408:
1319:../Sources/TFC/TFC_CrystalClock.c ****   }
1320:../Sources/TFC/TFC_CrystalClock.c ****   
1321:../Sources/TFC/TFC_CrystalClock.c **** // Select the required IRC
1322:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 5376              		.loc 1 1322 0 is_stmt 1
 5377 006e FB1C     		add	r3, r7, #3
 5378 0070 1B78     		ldrb	r3, [r3]
 5379 0072 002B     		cmp	r3, #0
 5380 0074 08D0     		beq	.L410
1323:../Sources/TFC/TFC_CrystalClock.c ****   {
1324:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRC by setting IRCS
 5381              		.loc 1 1324 0
 5382 0076 6D4B     		ldr	r3, .L437
 5383 0078 6C4A     		ldr	r2, .L437
 5384 007a 5278     		ldrb	r2, [r2, #1]
 5385 007c D2B2     		uxtb	r2, r2
 5386 007e 0121     		mov	r1, #1
 5387 0080 0A43     		orr	r2, r1
 5388 0082 D2B2     		uxtb	r2, r2
 5389 0084 5A70     		strb	r2, [r3, #1]
 5390 0086 07E0     		b	.L411
 5391              	.L410:
1325:../Sources/TFC/TFC_CrystalClock.c ****   }
1326:../Sources/TFC/TFC_CrystalClock.c ****   else
1327:../Sources/TFC/TFC_CrystalClock.c ****   {
1328:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRC by clearing IRCS
 5392              		.loc 1 1328 0
 5393 0088 684B     		ldr	r3, .L437
 5394 008a 684A     		ldr	r2, .L437
 5395 008c 5278     		ldrb	r2, [r2, #1]
 5396 008e D2B2     		uxtb	r2, r2
 5397 0090 0121     		mov	r1, #1
 5398 0092 8A43     		bic	r2, r1
 5399 0094 D2B2     		uxtb	r2, r2
 5400 0096 5A70     		strb	r2, [r3, #1]
 5401              	.L411:
1329:../Sources/TFC/TFC_CrystalClock.c ****   }
1330:../Sources/TFC/TFC_CrystalClock.c ****   
1331:../Sources/TFC/TFC_CrystalClock.c **** // Make sure the clock monitor is disabled before switching modes otherwise it will trigger
1332:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 5402              		.loc 1 1332 0
 5403 0098 644B     		ldr	r3, .L437
 5404 009a 644A     		ldr	r2, .L437
 5405 009c 5279     		ldrb	r2, [r2, #5]
 5406 009e D2B2     		uxtb	r2, r2
 5407 00a0 2021     		mov	r1, #32
 5408 00a2 8A43     		bic	r2, r1
 5409 00a4 D2B2     		uxtb	r2, r2
 5410 00a6 5A71     		strb	r2, [r3, #5]
1333:../Sources/TFC/TFC_CrystalClock.c ****   
1334:../Sources/TFC/TFC_CrystalClock.c **** // Select the IRC as the CLKS mux selection
1335:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_CLKS(1) | MCG_C1_IREFS_MASK; // set IREFS and select IRC as MCGOUT
 5411              		.loc 1 1335 0
 5412 00a8 604B     		ldr	r3, .L437
 5413 00aa 604A     		ldr	r2, .L437
 5414 00ac 1278     		ldrb	r2, [r2]
 5415 00ae D2B2     		uxtb	r2, r2
 5416 00b0 4421     		mov	r1, #68
 5417 00b2 0A43     		orr	r2, r1
 5418 00b4 D2B2     		uxtb	r2, r2
 5419 00b6 1A70     		strb	r2, [r3]
1336:../Sources/TFC/TFC_CrystalClock.c ****  
1337:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
1338:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5420              		.loc 1 1338 0
 5421 00b8 FB1C     		add	r3, r7, #3
 5422 00ba 1B78     		ldrb	r3, [r3]
 5423 00bc 002B     		cmp	r3, #0
 5424 00be 24D1     		bne	.L412
1339:../Sources/TFC/TFC_CrystalClock.c ****   {
1340:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5425              		.loc 1 1340 0
 5426 00c0 3B1C     		mov	r3, r7
 5427 00c2 0E33     		add	r3, r3, #14
 5428 00c4 0022     		mov	r2, #0
 5429 00c6 1A80     		strh	r2, [r3]
 5430 00c8 0DE0     		b	.L413
 5431              	.L416:
1341:../Sources/TFC/TFC_CrystalClock.c ****     {
1342:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 5432              		.loc 1 1342 0
 5433 00ca 584B     		ldr	r3, .L437
 5434 00cc 9B79     		ldrb	r3, [r3, #6]
 5435 00ce DBB2     		uxtb	r3, r3
 5436 00d0 1A1C     		mov	r2, r3
 5437 00d2 0123     		mov	r3, #1
 5438 00d4 1340     		and	r3, r2
 5439 00d6 0ED0     		beq	.L433
 5440              	.L414:
1340:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5441              		.loc 1 1340 0
 5442 00d8 3B1C     		mov	r3, r7
 5443 00da 0E33     		add	r3, r3, #14
 5444 00dc 3A1C     		mov	r2, r7
 5445 00de 0E32     		add	r2, r2, #14
 5446 00e0 1288     		ldrh	r2, [r2]
 5447 00e2 0132     		add	r2, r2, #1
 5448 00e4 1A80     		strh	r2, [r3]
 5449              	.L413:
1340:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5450              		.loc 1 1340 0 is_stmt 0
 5451 00e6 3B1C     		mov	r3, r7
 5452 00e8 0E33     		add	r3, r3, #14
 5453 00ea 0021     		mov	r1, #0
 5454 00ec 5A5E     		ldrsh	r2, [r3, r1]
 5455 00ee 544B     		ldr	r3, .L437+20
 5456 00f0 9A42     		cmp	r2, r3
 5457 00f2 EADD     		ble	.L416
 5458 00f4 00E0     		b	.L415
 5459              	.L433:
 5460              		.loc 1 1342 0 is_stmt 1
 5461 00f6 C046     		mov	r8, r8
 5462              	.L415:
1343:../Sources/TFC/TFC_CrystalClock.c ****     }
1344:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 5463              		.loc 1 1344 0
 5464 00f8 4C4B     		ldr	r3, .L437
 5465 00fa 9B79     		ldrb	r3, [r3, #6]
 5466 00fc DBB2     		uxtb	r3, r3
 5467 00fe 1A1C     		mov	r2, r3
 5468 0100 0123     		mov	r3, #1
 5469 0102 1340     		and	r3, r2
 5470 0104 26D0     		beq	.L417
 5471              		.loc 1 1344 0 is_stmt 0
 5472 0106 1323     		mov	r3, #19
 5473 0108 8CE0     		b	.L405
 5474              	.L412:
1345:../Sources/TFC/TFC_CrystalClock.c ****   }
1346:../Sources/TFC/TFC_CrystalClock.c ****   else
1347:../Sources/TFC/TFC_CrystalClock.c ****   {
1348:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5475              		.loc 1 1348 0 is_stmt 1
 5476 010a 3B1C     		mov	r3, r7
 5477 010c 0E33     		add	r3, r3, #14
 5478 010e 0022     		mov	r2, #0
 5479 0110 1A80     		strh	r2, [r3]
 5480 0112 0DE0     		b	.L418
 5481              	.L421:
1349:../Sources/TFC/TFC_CrystalClock.c ****     {
1350:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 5482              		.loc 1 1350 0
 5483 0114 454B     		ldr	r3, .L437
 5484 0116 9B79     		ldrb	r3, [r3, #6]
 5485 0118 DBB2     		uxtb	r3, r3
 5486 011a 1A1C     		mov	r2, r3
 5487 011c 0123     		mov	r3, #1
 5488 011e 1340     		and	r3, r2
 5489 0120 0ED1     		bne	.L434
 5490              	.L419:
1348:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5491              		.loc 1 1348 0
 5492 0122 3B1C     		mov	r3, r7
 5493 0124 0E33     		add	r3, r3, #14
 5494 0126 3A1C     		mov	r2, r7
 5495 0128 0E32     		add	r2, r2, #14
 5496 012a 1288     		ldrh	r2, [r2]
 5497 012c 0132     		add	r2, r2, #1
 5498 012e 1A80     		strh	r2, [r3]
 5499              	.L418:
1348:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 5500              		.loc 1 1348 0 is_stmt 0
 5501 0130 3B1C     		mov	r3, r7
 5502 0132 0E33     		add	r3, r3, #14
 5503 0134 0021     		mov	r1, #0
 5504 0136 5A5E     		ldrsh	r2, [r3, r1]
 5505 0138 414B     		ldr	r3, .L437+20
 5506 013a 9A42     		cmp	r2, r3
 5507 013c EADD     		ble	.L421
 5508 013e 00E0     		b	.L420
 5509              	.L434:
 5510              		.loc 1 1350 0 is_stmt 1
 5511 0140 C046     		mov	r8, r8
 5512              	.L420:
1351:../Sources/TFC/TFC_CrystalClock.c ****     }
1352:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 5513              		.loc 1 1352 0
 5514 0142 3A4B     		ldr	r3, .L437
 5515 0144 9B79     		ldrb	r3, [r3, #6]
 5516 0146 DBB2     		uxtb	r3, r3
 5517 0148 1A1C     		mov	r2, r3
 5518 014a 0123     		mov	r3, #1
 5519 014c 1340     		and	r3, r2
 5520 014e 01D1     		bne	.L417
 5521              		.loc 1 1352 0 is_stmt 0
 5522 0150 1423     		mov	r3, #20
 5523 0152 67E0     		b	.L405
 5524              	.L417:
1353:../Sources/TFC/TFC_CrystalClock.c ****   }
1354:../Sources/TFC/TFC_CrystalClock.c ****   
1355:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
1356:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5525              		.loc 1 1356 0 is_stmt 1
 5526 0154 3B1C     		mov	r3, r7
 5527 0156 0E33     		add	r3, r3, #14
 5528 0158 0022     		mov	r2, #0
 5529 015a 1A80     		strh	r2, [r3]
 5530 015c 0FE0     		b	.L422
 5531              	.L425:
1357:../Sources/TFC/TFC_CrystalClock.c ****   {
1358:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 5532              		.loc 1 1358 0
 5533 015e 334B     		ldr	r3, .L437
 5534 0160 9B79     		ldrb	r3, [r3, #6]
 5535 0162 DBB2     		uxtb	r3, r3
 5536 0164 1A1C     		mov	r2, r3
 5537 0166 0C23     		mov	r3, #12
 5538 0168 1340     		and	r3, r2
 5539 016a 9B08     		lsr	r3, r3, #2
 5540 016c 012B     		cmp	r3, #1
 5541 016e 0ED0     		beq	.L435
 5542              	.L423:
1356:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5543              		.loc 1 1356 0
 5544 0170 3B1C     		mov	r3, r7
 5545 0172 0E33     		add	r3, r3, #14
 5546 0174 3A1C     		mov	r2, r7
 5547 0176 0E32     		add	r2, r2, #14
 5548 0178 1288     		ldrh	r2, [r2]
 5549 017a 0132     		add	r2, r2, #1
 5550 017c 1A80     		strh	r2, [r3]
 5551              	.L422:
1356:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5552              		.loc 1 1356 0 is_stmt 0
 5553 017e 3B1C     		mov	r3, r7
 5554 0180 0E33     		add	r3, r3, #14
 5555 0182 0021     		mov	r1, #0
 5556 0184 5A5E     		ldrsh	r2, [r3, r1]
 5557 0186 2E4B     		ldr	r3, .L437+20
 5558 0188 9A42     		cmp	r2, r3
 5559 018a E8DD     		ble	.L425
 5560 018c 00E0     		b	.L424
 5561              	.L435:
 5562              		.loc 1 1358 0 is_stmt 1
 5563 018e C046     		mov	r8, r8
 5564              	.L424:
1359:../Sources/TFC/TFC_CrystalClock.c ****   }
1360:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 5565              		.loc 1 1360 0
 5566 0190 264B     		ldr	r3, .L437
 5567 0192 9B79     		ldrb	r3, [r3, #6]
 5568 0194 DBB2     		uxtb	r3, r3
 5569 0196 1A1C     		mov	r2, r3
 5570 0198 0C23     		mov	r3, #12
 5571 019a 1340     		and	r3, r2
 5572 019c 9B08     		lsr	r3, r3, #2
 5573 019e 012B     		cmp	r3, #1
 5574 01a0 01D0     		beq	.L426
 5575              		.loc 1 1360 0 is_stmt 0
 5576 01a2 1923     		mov	r3, #25
 5577 01a4 3EE0     		b	.L405
 5578              	.L426:
1361:../Sources/TFC/TFC_CrystalClock.c ****   
1362:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to set
1363:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5579              		.loc 1 1363 0 is_stmt 1
 5580 01a6 3B1C     		mov	r3, r7
 5581 01a8 0E33     		add	r3, r3, #14
 5582 01aa 0022     		mov	r2, #0
 5583 01ac 1A80     		strh	r2, [r3]
 5584 01ae 0DE0     		b	.L427
 5585              	.L430:
1364:../Sources/TFC/TFC_CrystalClock.c ****   {
1365:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 5586              		.loc 1 1365 0
 5587 01b0 1E4B     		ldr	r3, .L437
 5588 01b2 9B79     		ldrb	r3, [r3, #6]
 5589 01b4 DBB2     		uxtb	r3, r3
 5590 01b6 1A1C     		mov	r2, r3
 5591 01b8 1023     		mov	r3, #16
 5592 01ba 1340     		and	r3, r2
 5593 01bc 0ED1     		bne	.L436
 5594              	.L428:
1363:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5595              		.loc 1 1363 0
 5596 01be 3B1C     		mov	r3, r7
 5597 01c0 0E33     		add	r3, r3, #14
 5598 01c2 3A1C     		mov	r2, r7
 5599 01c4 0E32     		add	r2, r2, #14
 5600 01c6 1288     		ldrh	r2, [r2]
 5601 01c8 0132     		add	r2, r2, #1
 5602 01ca 1A80     		strh	r2, [r3]
 5603              	.L427:
1363:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5604              		.loc 1 1363 0 is_stmt 0
 5605 01cc 3B1C     		mov	r3, r7
 5606 01ce 0E33     		add	r3, r3, #14
 5607 01d0 0021     		mov	r1, #0
 5608 01d2 5A5E     		ldrsh	r2, [r3, r1]
 5609 01d4 1A4B     		ldr	r3, .L437+20
 5610 01d6 9A42     		cmp	r2, r3
 5611 01d8 EADD     		ble	.L430
 5612 01da 00E0     		b	.L429
 5613              	.L436:
 5614              		.loc 1 1365 0 is_stmt 1
 5615 01dc C046     		mov	r8, r8
 5616              	.L429:
1366:../Sources/TFC/TFC_CrystalClock.c ****   }
1367:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 5617              		.loc 1 1367 0
 5618 01de 134B     		ldr	r3, .L437
 5619 01e0 9B79     		ldrb	r3, [r3, #6]
 5620 01e2 DBB2     		uxtb	r3, r3
 5621 01e4 1A1C     		mov	r2, r3
 5622 01e6 1023     		mov	r3, #16
 5623 01e8 1340     		and	r3, r2
 5624 01ea 01D1     		bne	.L431
 5625              		.loc 1 1367 0 is_stmt 0
 5626 01ec 1223     		mov	r3, #18
 5627 01ee 19E0     		b	.L405
 5628              	.L431:
1368:../Sources/TFC/TFC_CrystalClock.c ****   
1369:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1370:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 5629              		.loc 1 1370 0 is_stmt 1
 5630 01f0 FB1C     		add	r3, r7, #3
 5631 01f2 1B78     		ldrb	r3, [r3]
 5632 01f4 002B     		cmp	r3, #0
 5633 01f6 14D0     		beq	.L432
1371:../Sources/TFC/TFC_CrystalClock.c ****   {
1372:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 5634              		.loc 1 1372 0
 5635 01f8 0C4B     		ldr	r3, .L437
 5636 01fa 1B7A     		ldrb	r3, [r3, #8]
 5637 01fc DBB2     		uxtb	r3, r3
 5638 01fe 1A1C     		mov	r2, r3
 5639 0200 0E23     		mov	r3, #14
 5640 0202 1340     		and	r3, r2
 5641 0204 5B08     		lsr	r3, r3, #1
 5642 0206 0122     		mov	r2, #1
 5643 0208 9A40     		lsl	r2, r2, r3
 5644 020a 3B1C     		mov	r3, r7
 5645 020c 0D33     		add	r3, r3, #13
 5646 020e 1A70     		strb	r2, [r3]
1373:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 5647              		.loc 1 1373 0
 5648 0210 3B1C     		mov	r3, r7
 5649 0212 0D33     		add	r3, r3, #13
 5650 0214 1B78     		ldrb	r3, [r3]
 5651 0216 7868     		ldr	r0, [r7, #4]
 5652 0218 191C     		mov	r1, r3
 5653 021a FFF7FEFF 		bl	__aeabi_idiv
 5654 021e 031C     		mov	r3, r0
 5655 0220 00E0     		b	.L405
 5656              	.L432:
1374:../Sources/TFC/TFC_CrystalClock.c ****   }
1375:../Sources/TFC/TFC_CrystalClock.c ****   else
1376:../Sources/TFC/TFC_CrystalClock.c ****   {
1377:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 5657              		.loc 1 1377 0
 5658 0222 7B68     		ldr	r3, [r7, #4]
 5659              	.L405:
1378:../Sources/TFC/TFC_CrystalClock.c ****   }
1379:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fbi 
 5660              		.loc 1 1379 0
 5661 0224 181C     		mov	r0, r3
 5662 0226 BD46     		mov	sp, r7
 5663 0228 04B0     		add	sp, sp, #16
 5664              		@ sp needed for prologue
 5665 022a 80BD     		pop	{r7, pc}
 5666              	.L438:
 5667              		.align	2
 5668              	.L437:
 5669 022c 00400640 		.word	1074151424
 5670 0230 117A0000 		.word	31249
 5671 0234 97980000 		.word	39063
 5672 0238 BFC62D00 		.word	2999999
 5673 023c 404B4C00 		.word	5000000
 5674 0240 CF070000 		.word	1999
 5675              		.cfi_endproc
 5676              	.LFE19:
 5678              		.section	.text.fbi_fei,"ax",%progbits
 5679              		.align	2
 5680              		.global	fbi_fei
 5681              		.code	16
 5682              		.thumb_func
 5684              	fbi_fei:
 5685              	.LFB20:
1380:../Sources/TFC/TFC_CrystalClock.c **** 
1381:../Sources/TFC/TFC_CrystalClock.c **** 
1382:../Sources/TFC/TFC_CrystalClock.c **** int fbi_fei(int slow_irc_freq)
1383:../Sources/TFC/TFC_CrystalClock.c **** {
 5686              		.loc 1 1383 0
 5687              		.cfi_startproc
 5688 0000 80B5     		push	{r7, lr}
 5689              	.LCFI60:
 5690              		.cfi_def_cfa_offset 8
 5691              		.cfi_offset 7, -8
 5692              		.cfi_offset 14, -4
 5693 0002 86B0     		sub	sp, sp, #24
 5694              	.LCFI61:
 5695              		.cfi_def_cfa_offset 32
 5696 0004 00AF     		add	r7, sp, #0
 5697              	.LCFI62:
 5698              		.cfi_def_cfa_register 7
 5699 0006 7860     		str	r0, [r7, #4]
1384:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1385:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1386:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
1387:../Sources/TFC/TFC_CrystalClock.c **** 
1388:../Sources/TFC/TFC_CrystalClock.c **** // check if in FBI mode
1389:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5700              		.loc 1 1389 0
 5701 0008 524B     		ldr	r3, .L458
 5702 000a 9B79     		ldrb	r3, [r3, #6]
 5703 000c DBB2     		uxtb	r3, r3
 5704 000e 1A1C     		mov	r2, r3
 5705 0010 0C23     		mov	r3, #12
 5706 0012 1340     		and	r3, r2
 5707 0014 9B08     		lsr	r3, r3, #2
 5708 0016 012B     		cmp	r3, #1
 5709 0018 14D1     		bne	.L440
1390:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5710              		.loc 1 1390 0
 5711 001a 4E4B     		ldr	r3, .L458
 5712 001c 9B79     		ldrb	r3, [r3, #6]
 5713 001e DBB2     		uxtb	r3, r3
 5714 0020 1A1C     		mov	r2, r3
 5715 0022 1023     		mov	r3, #16
 5716 0024 1340     		and	r3, r2
1389:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5717              		.loc 1 1389 0
 5718 0026 0DD0     		beq	.L440
1391:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)) &&                                // check PLLS mux has selecte
 5719              		.loc 1 1391 0
 5720 0028 4A4B     		ldr	r3, .L458
 5721 002a 9B79     		ldrb	r3, [r3, #6]
 5722 002c DBB2     		uxtb	r3, r3
 5723 002e 1A1C     		mov	r2, r3
 5724 0030 2023     		mov	r3, #32
 5725 0032 1340     		and	r3, r2
1390:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5726              		.loc 1 1390 0
 5727 0034 06D1     		bne	.L440
1392:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_C2 & MCG_C2_LP_MASK))))                                  // check LP bit is clear
 5728              		.loc 1 1392 0
 5729 0036 474B     		ldr	r3, .L458
 5730 0038 5B78     		ldrb	r3, [r3, #1]
 5731 003a DBB2     		uxtb	r3, r3
 5732 003c 1A1C     		mov	r2, r3
 5733 003e 0223     		mov	r3, #2
 5734 0040 1340     		and	r3, r2
1389:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selcted
 5735              		.loc 1 1389 0
 5736 0042 01D0     		beq	.L441
 5737              	.L440:
1393:../Sources/TFC/TFC_CrystalClock.c ****   {  
1394:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3;                                                       // MCG not in correct mode re
 5738              		.loc 1 1394 0
 5739 0044 0323     		mov	r3, #3
 5740 0046 81E0     		b	.L442
 5741              	.L441:
1395:../Sources/TFC/TFC_CrystalClock.c ****   }
1396:../Sources/TFC/TFC_CrystalClock.c **** 
1397:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
1398:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 5742              		.loc 1 1398 0
 5743 0048 7A68     		ldr	r2, [r7, #4]
 5744 004a 434B     		ldr	r3, .L458+4
 5745 004c 9A42     		cmp	r2, r3
 5746 004e 03DD     		ble	.L443
 5747              		.loc 1 1398 0 is_stmt 0
 5748 0050 7A68     		ldr	r2, [r7, #4]
 5749 0052 424B     		ldr	r3, .L458+8
 5750 0054 9A42     		cmp	r2, r3
 5751 0056 01DD     		ble	.L444
 5752              	.L443:
1399:../Sources/TFC/TFC_CrystalClock.c ****   {
1400:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 5753              		.loc 1 1400 0 is_stmt 1
 5754 0058 3123     		mov	r3, #49
 5755 005a 77E0     		b	.L442
 5756              	.L444:
1401:../Sources/TFC/TFC_CrystalClock.c ****   }
1402:../Sources/TFC/TFC_CrystalClock.c **** 
1403:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1404:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 5757              		.loc 1 1404 0
 5758 005c 7B68     		ldr	r3, [r7, #4]
 5759 005e 181C     		mov	r0, r3
 5760 0060 FFF7FEFF 		bl	fll_freq
 5761 0064 031C     		mov	r3, r0
 5762 0066 3B61     		str	r3, [r7, #16]
1405:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 5763              		.loc 1 1405 0
 5764 0068 3B69     		ldr	r3, [r7, #16]
 5765 006a 3B2B     		cmp	r3, #59
 5766 006c 01DC     		bgt	.L445
 5767              		.loc 1 1405 0 is_stmt 0
 5768 006e 3B69     		ldr	r3, [r7, #16]
 5769 0070 6CE0     		b	.L442
 5770              	.L445:
1406:../Sources/TFC/TFC_CrystalClock.c ****   
1407:../Sources/TFC/TFC_CrystalClock.c **** // Change the CLKS mux to select the FLL output as MCGOUT  
1408:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 5771              		.loc 1 1408 0 is_stmt 1
 5772 0072 384A     		ldr	r2, .L458
 5773 0074 3B1C     		mov	r3, r7
 5774 0076 0F33     		add	r3, r3, #15
 5775 0078 1278     		ldrb	r2, [r2]
 5776 007a 1A70     		strb	r2, [r3]
1409:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS field
 5777              		.loc 1 1409 0
 5778 007c 3B1C     		mov	r3, r7
 5779 007e 0F33     		add	r3, r3, #15
 5780 0080 3A1C     		mov	r2, r7
 5781 0082 0F32     		add	r2, r2, #15
 5782 0084 1178     		ldrb	r1, [r2]
 5783 0086 3F22     		mov	r2, #63
 5784 0088 0A40     		and	r2, r1
 5785 008a 1A70     		strb	r2, [r3]
1410:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_CLKS(0); // select FLL as MCGOUT
 5786              		.loc 1 1410 0
 5787 008c 3B1C     		mov	r3, r7
 5788 008e 0F33     		add	r3, r3, #15
 5789 0090 3A1C     		mov	r2, r7
 5790 0092 0F32     		add	r2, r2, #15
 5791 0094 1278     		ldrb	r2, [r2]
 5792 0096 1A70     		strb	r2, [r3]
1411:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_IREFS_MASK; // make sure IRC is FLL reference
 5793              		.loc 1 1411 0
 5794 0098 3B1C     		mov	r3, r7
 5795 009a 0F33     		add	r3, r3, #15
 5796 009c 3A1C     		mov	r2, r7
 5797 009e 0F32     		add	r2, r2, #15
 5798 00a0 1278     		ldrb	r2, [r2]
 5799 00a2 0421     		mov	r1, #4
 5800 00a4 0A43     		orr	r2, r1
 5801 00a6 1A70     		strb	r2, [r3]
1412:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg; // update MCG_C1
 5802              		.loc 1 1412 0
 5803 00a8 2A4B     		ldr	r3, .L458
 5804 00aa 3A1C     		mov	r2, r7
 5805 00ac 0F32     		add	r2, r2, #15
 5806 00ae 1278     		ldrb	r2, [r2]
 5807 00b0 1A70     		strb	r2, [r3]
1413:../Sources/TFC/TFC_CrystalClock.c ****   
1414:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1415:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5808              		.loc 1 1415 0
 5809 00b2 3B1C     		mov	r3, r7
 5810 00b4 1633     		add	r3, r3, #22
 5811 00b6 0022     		mov	r2, #0
 5812 00b8 1A80     		strh	r2, [r3]
 5813 00ba 0DE0     		b	.L446
 5814              	.L449:
1416:../Sources/TFC/TFC_CrystalClock.c ****   {
1417:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST clears before loop finishes
 5815              		.loc 1 1417 0
 5816 00bc 254B     		ldr	r3, .L458
 5817 00be 9B79     		ldrb	r3, [r3, #6]
 5818 00c0 DBB2     		uxtb	r3, r3
 5819 00c2 1A1C     		mov	r2, r3
 5820 00c4 1023     		mov	r3, #16
 5821 00c6 1340     		and	r3, r2
 5822 00c8 0ED1     		bne	.L456
 5823              	.L447:
1415:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5824              		.loc 1 1415 0
 5825 00ca 3B1C     		mov	r3, r7
 5826 00cc 1633     		add	r3, r3, #22
 5827 00ce 3A1C     		mov	r2, r7
 5828 00d0 1632     		add	r2, r2, #22
 5829 00d2 1288     		ldrh	r2, [r2]
 5830 00d4 0132     		add	r2, r2, #1
 5831 00d6 1A80     		strh	r2, [r3]
 5832              	.L446:
1415:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5833              		.loc 1 1415 0 is_stmt 0
 5834 00d8 3B1C     		mov	r3, r7
 5835 00da 1633     		add	r3, r3, #22
 5836 00dc 0021     		mov	r1, #0
 5837 00de 5A5E     		ldrsh	r2, [r3, r1]
 5838 00e0 1F4B     		ldr	r3, .L458+12
 5839 00e2 9A42     		cmp	r2, r3
 5840 00e4 EADD     		ble	.L449
 5841 00e6 00E0     		b	.L448
 5842              	.L456:
 5843              		.loc 1 1417 0 is_stmt 1
 5844 00e8 C046     		mov	r8, r8
 5845              	.L448:
1418:../Sources/TFC/TFC_CrystalClock.c ****   }
1419:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 5846              		.loc 1 1419 0
 5847 00ea 1A4B     		ldr	r3, .L458
 5848 00ec 9B79     		ldrb	r3, [r3, #6]
 5849 00ee DBB2     		uxtb	r3, r3
 5850 00f0 1A1C     		mov	r2, r3
 5851 00f2 1023     		mov	r3, #16
 5852 00f4 1340     		and	r3, r2
 5853 00f6 01D1     		bne	.L450
 5854              		.loc 1 1419 0 is_stmt 0
 5855 00f8 1223     		mov	r3, #18
 5856 00fa 27E0     		b	.L442
 5857              	.L450:
1420:../Sources/TFC/TFC_CrystalClock.c ****   
1421:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to show clock source is ext ref clk
1422:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5858              		.loc 1 1422 0 is_stmt 1
 5859 00fc 3B1C     		mov	r3, r7
 5860 00fe 1633     		add	r3, r3, #22
 5861 0100 0022     		mov	r2, #0
 5862 0102 1A80     		strh	r2, [r3]
 5863 0104 0EE0     		b	.L451
 5864              	.L454:
1423:../Sources/TFC/TFC_CrystalClock.c ****   {
1424:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) break; // jump out early if CLKST
 5865              		.loc 1 1424 0
 5866 0106 134B     		ldr	r3, .L458
 5867 0108 9B79     		ldrb	r3, [r3, #6]
 5868 010a DBB2     		uxtb	r3, r3
 5869 010c 1A1C     		mov	r2, r3
 5870 010e 0C23     		mov	r3, #12
 5871 0110 1340     		and	r3, r2
 5872 0112 9B08     		lsr	r3, r3, #2
 5873 0114 0ED0     		beq	.L457
 5874              	.L452:
1422:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5875              		.loc 1 1422 0
 5876 0116 3B1C     		mov	r3, r7
 5877 0118 1633     		add	r3, r3, #22
 5878 011a 3A1C     		mov	r2, r7
 5879 011c 1632     		add	r2, r2, #22
 5880 011e 1288     		ldrh	r2, [r2]
 5881 0120 0132     		add	r2, r2, #1
 5882 0122 1A80     		strh	r2, [r3]
 5883              	.L451:
1422:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 5884              		.loc 1 1422 0 is_stmt 0
 5885 0124 3B1C     		mov	r3, r7
 5886 0126 1633     		add	r3, r3, #22
 5887 0128 0021     		mov	r1, #0
 5888 012a 5A5E     		ldrsh	r2, [r3, r1]
 5889 012c 0C4B     		ldr	r3, .L458+12
 5890 012e 9A42     		cmp	r2, r3
 5891 0130 E9DD     		ble	.L454
 5892 0132 00E0     		b	.L453
 5893              	.L457:
 5894              		.loc 1 1424 0 is_stmt 1
 5895 0134 C046     		mov	r8, r8
 5896              	.L453:
1425:../Sources/TFC/TFC_CrystalClock.c ****   }
1426:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x0) return 0x18; // check FLL is really
 5897              		.loc 1 1426 0
 5898 0136 074B     		ldr	r3, .L458
 5899 0138 9B79     		ldrb	r3, [r3, #6]
 5900 013a DBB2     		uxtb	r3, r3
 5901 013c 1A1C     		mov	r2, r3
 5902 013e 0C23     		mov	r3, #12
 5903 0140 1340     		and	r3, r2
 5904 0142 9B08     		lsr	r3, r3, #2
 5905 0144 01D0     		beq	.L455
 5906              		.loc 1 1426 0 is_stmt 0
 5907 0146 1823     		mov	r3, #24
 5908 0148 00E0     		b	.L442
 5909              	.L455:
1427:../Sources/TFC/TFC_CrystalClock.c **** 
1428:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode
1429:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;  
 5910              		.loc 1 1429 0 is_stmt 1
 5911 014a 3B69     		ldr	r3, [r7, #16]
 5912              	.L442:
1430:../Sources/TFC/TFC_CrystalClock.c **** } // fbi_fei
 5913              		.loc 1 1430 0
 5914 014c 181C     		mov	r0, r3
 5915 014e BD46     		mov	sp, r7
 5916 0150 06B0     		add	sp, sp, #24
 5917              		@ sp needed for prologue
 5918 0152 80BD     		pop	{r7, pc}
 5919              	.L459:
 5920              		.align	2
 5921              	.L458:
 5922 0154 00400640 		.word	1074151424
 5923 0158 117A0000 		.word	31249
 5924 015c 97980000 		.word	39063
 5925 0160 CF070000 		.word	1999
 5926              		.cfi_endproc
 5927              	.LFE20:
 5929              		.section	.text.fei_fbi,"ax",%progbits
 5930              		.align	2
 5931              		.global	fei_fbi
 5932              		.code	16
 5933              		.thumb_func
 5935              	fei_fbi:
 5936              	.LFB21:
1431:../Sources/TFC/TFC_CrystalClock.c **** 
1432:../Sources/TFC/TFC_CrystalClock.c **** 
1433:../Sources/TFC/TFC_CrystalClock.c **** int fei_fbi(int irc_freq, unsigned char irc_select)
1434:../Sources/TFC/TFC_CrystalClock.c **** {
 5937              		.loc 1 1434 0
 5938              		.cfi_startproc
 5939 0000 80B5     		push	{r7, lr}
 5940              	.LCFI63:
 5941              		.cfi_def_cfa_offset 8
 5942              		.cfi_offset 7, -8
 5943              		.cfi_offset 14, -4
 5944 0002 84B0     		sub	sp, sp, #16
 5945              	.LCFI64:
 5946              		.cfi_def_cfa_offset 24
 5947 0004 00AF     		add	r7, sp, #0
 5948              	.LCFI65:
 5949              		.cfi_def_cfa_register 7
 5950 0006 7860     		str	r0, [r7, #4]
 5951 0008 0A1C     		mov	r2, r1
 5952 000a FB1C     		add	r3, r7, #3
 5953 000c 1A70     		strb	r2, [r3]
1435:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1436:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char fcrdiv_val;
1437:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1438:../Sources/TFC/TFC_CrystalClock.c ****   
1439:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEI mode
1440:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5954              		.loc 1 1440 0
 5955 000e 7A4B     		ldr	r3, .L489
 5956 0010 9B79     		ldrb	r3, [r3, #6]
 5957 0012 DBB2     		uxtb	r3, r3
 5958 0014 1A1C     		mov	r2, r3
 5959 0016 0C23     		mov	r3, #12
 5960 0018 1340     		and	r3, r2
 5961 001a 9B08     		lsr	r3, r3, #2
 5962 001c 0DD1     		bne	.L461
1441:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 5963              		.loc 1 1441 0
 5964 001e 764B     		ldr	r3, .L489
 5965 0020 9B79     		ldrb	r3, [r3, #6]
 5966 0022 DBB2     		uxtb	r3, r3
 5967 0024 1A1C     		mov	r2, r3
 5968 0026 1023     		mov	r3, #16
 5969 0028 1340     		and	r3, r2
1440:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5970              		.loc 1 1440 0
 5971 002a 06D0     		beq	.L461
1442:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 5972              		.loc 1 1442 0
 5973 002c 724B     		ldr	r3, .L489
 5974 002e 9B79     		ldrb	r3, [r3, #6]
 5975 0030 DBB2     		uxtb	r3, r3
 5976 0032 1A1C     		mov	r2, r3
 5977 0034 2023     		mov	r3, #32
 5978 0036 1340     		and	r3, r2
1440:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 5979              		.loc 1 1440 0
 5980 0038 01D0     		beq	.L462
 5981              	.L461:
1443:../Sources/TFC/TFC_CrystalClock.c ****   {
1444:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                       // return error code
 5982              		.loc 1 1444 0
 5983 003a 0123     		mov	r3, #1
 5984 003c D7E0     		b	.L463
 5985              	.L462:
1445:../Sources/TFC/TFC_CrystalClock.c ****   } 
1446:../Sources/TFC/TFC_CrystalClock.c **** 
1447:../Sources/TFC/TFC_CrystalClock.c **** // Check that the irc frequency matches the selected IRC 
1448:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 5986              		.loc 1 1448 0
 5987 003e FB1C     		add	r3, r7, #3
 5988 0040 1B78     		ldrb	r3, [r3]
 5989 0042 002B     		cmp	r3, #0
 5990 0044 09D1     		bne	.L464
1449:../Sources/TFC/TFC_CrystalClock.c ****   {    
1450:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 31250) || (irc_freq > 39063)) {return 0x31;}
 5991              		.loc 1 1450 0
 5992 0046 7A68     		ldr	r2, [r7, #4]
 5993 0048 6C4B     		ldr	r3, .L489+4
 5994 004a 9A42     		cmp	r2, r3
 5995 004c 03DD     		ble	.L465
 5996              		.loc 1 1450 0 is_stmt 0
 5997 004e 7A68     		ldr	r2, [r7, #4]
 5998 0050 6B4B     		ldr	r3, .L489+8
 5999 0052 9A42     		cmp	r2, r3
 6000 0054 0BDD     		ble	.L466
 6001              	.L465:
 6002              		.loc 1 1450 0
 6003 0056 3123     		mov	r3, #49
 6004 0058 C9E0     		b	.L463
 6005              	.L464:
1451:../Sources/TFC/TFC_CrystalClock.c ****   }
1452:../Sources/TFC/TFC_CrystalClock.c ****   else
1453:../Sources/TFC/TFC_CrystalClock.c ****   {
1454:../Sources/TFC/TFC_CrystalClock.c ****     if ((irc_freq < 3000000) || (irc_freq > 5000000)) {return 0x32;} // Fast IRC freq
 6006              		.loc 1 1454 0 is_stmt 1
 6007 005a 7A68     		ldr	r2, [r7, #4]
 6008 005c 694B     		ldr	r3, .L489+12
 6009 005e 9A42     		cmp	r2, r3
 6010 0060 03DD     		ble	.L467
 6011              		.loc 1 1454 0 is_stmt 0
 6012 0062 7A68     		ldr	r2, [r7, #4]
 6013 0064 684B     		ldr	r3, .L489+16
 6014 0066 9A42     		cmp	r2, r3
 6015 0068 01DD     		ble	.L466
 6016              	.L467:
 6017              		.loc 1 1454 0
 6018 006a 3223     		mov	r3, #50
 6019 006c BFE0     		b	.L463
 6020              	.L466:
1455:../Sources/TFC/TFC_CrystalClock.c ****   }
1456:../Sources/TFC/TFC_CrystalClock.c ****   
1457:../Sources/TFC/TFC_CrystalClock.c **** // Select the desired IRC
1458:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 6021              		.loc 1 1458 0 is_stmt 1
 6022 006e FB1C     		add	r3, r7, #3
 6023 0070 1B78     		ldrb	r3, [r3]
 6024 0072 002B     		cmp	r3, #0
 6025 0074 08D0     		beq	.L468
1459:../Sources/TFC/TFC_CrystalClock.c ****   {
1460:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 |= MCG_C2_IRCS_MASK; // select fast IRCS
 6026              		.loc 1 1460 0
 6027 0076 604B     		ldr	r3, .L489
 6028 0078 5F4A     		ldr	r2, .L489
 6029 007a 5278     		ldrb	r2, [r2, #1]
 6030 007c D2B2     		uxtb	r2, r2
 6031 007e 0121     		mov	r1, #1
 6032 0080 0A43     		orr	r2, r1
 6033 0082 D2B2     		uxtb	r2, r2
 6034 0084 5A70     		strb	r2, [r3, #1]
 6035 0086 07E0     		b	.L469
 6036              	.L468:
1461:../Sources/TFC/TFC_CrystalClock.c ****   }
1462:../Sources/TFC/TFC_CrystalClock.c ****   else
1463:../Sources/TFC/TFC_CrystalClock.c ****   {
1464:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C2 &= ~MCG_C2_IRCS_MASK; // select slow IRCS
 6037              		.loc 1 1464 0
 6038 0088 5B4B     		ldr	r3, .L489
 6039 008a 5B4A     		ldr	r2, .L489
 6040 008c 5278     		ldrb	r2, [r2, #1]
 6041 008e D2B2     		uxtb	r2, r2
 6042 0090 0121     		mov	r1, #1
 6043 0092 8A43     		bic	r2, r1
 6044 0094 D2B2     		uxtb	r2, r2
 6045 0096 5A70     		strb	r2, [r3, #1]
 6046              	.L469:
1465:../Sources/TFC/TFC_CrystalClock.c ****   }
1466:../Sources/TFC/TFC_CrystalClock.c ****   
1467:../Sources/TFC/TFC_CrystalClock.c **** // Change the CLKS mux to select the IRC as the MCGOUT
1468:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 6047              		.loc 1 1468 0
 6048 0098 574A     		ldr	r2, .L489
 6049 009a 3B1C     		mov	r3, r7
 6050 009c 0D33     		add	r3, r3, #13
 6051 009e 1278     		ldrb	r2, [r2]
 6052 00a0 1A70     		strb	r2, [r3]
1469:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~MCG_C1_CLKS_MASK; // clear CLKS
 6053              		.loc 1 1469 0
 6054 00a2 3B1C     		mov	r3, r7
 6055 00a4 0D33     		add	r3, r3, #13
 6056 00a6 3A1C     		mov	r2, r7
 6057 00a8 0D32     		add	r2, r2, #13
 6058 00aa 1178     		ldrb	r1, [r2]
 6059 00ac 3F22     		mov	r2, #63
 6060 00ae 0A40     		and	r2, r1
 6061 00b0 1A70     		strb	r2, [r3]
1470:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= MCG_C1_CLKS(1); // select IRC as the MCG clock sourse
 6062              		.loc 1 1470 0
 6063 00b2 3B1C     		mov	r3, r7
 6064 00b4 0D33     		add	r3, r3, #13
 6065 00b6 3A1C     		mov	r2, r7
 6066 00b8 0D32     		add	r2, r2, #13
 6067 00ba 1278     		ldrb	r2, [r2]
 6068 00bc 4021     		mov	r1, #64
 6069 00be 0A43     		orr	r2, r1
 6070 00c0 1A70     		strb	r2, [r3]
1471:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 6071              		.loc 1 1471 0
 6072 00c2 4D4B     		ldr	r3, .L489
 6073 00c4 3A1C     		mov	r2, r7
 6074 00c6 0D32     		add	r2, r2, #13
 6075 00c8 1278     		ldrb	r2, [r2]
 6076 00ca 1A70     		strb	r2, [r3]
1472:../Sources/TFC/TFC_CrystalClock.c **** 
1473:../Sources/TFC/TFC_CrystalClock.c **** // wait until internal reference switches to requested irc.
1474:../Sources/TFC/TFC_CrystalClock.c ****   if (!(irc_select))
 6077              		.loc 1 1474 0
 6078 00cc FB1C     		add	r3, r7, #3
 6079 00ce 1B78     		ldrb	r3, [r3]
 6080 00d0 002B     		cmp	r3, #0
 6081 00d2 24D1     		bne	.L470
1475:../Sources/TFC/TFC_CrystalClock.c ****   {
1476:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6082              		.loc 1 1476 0
 6083 00d4 3B1C     		mov	r3, r7
 6084 00d6 0E33     		add	r3, r3, #14
 6085 00d8 0022     		mov	r2, #0
 6086 00da 1A80     		strh	r2, [r3]
 6087 00dc 0DE0     		b	.L471
 6088              	.L474:
1477:../Sources/TFC/TFC_CrystalClock.c ****     {
1478:../Sources/TFC/TFC_CrystalClock.c ****       if (!(MCG_S & MCG_S_IRCST_MASK)) break; // jump out early if IRCST clears before loop finishe
 6089              		.loc 1 1478 0
 6090 00de 464B     		ldr	r3, .L489
 6091 00e0 9B79     		ldrb	r3, [r3, #6]
 6092 00e2 DBB2     		uxtb	r3, r3
 6093 00e4 1A1C     		mov	r2, r3
 6094 00e6 0123     		mov	r3, #1
 6095 00e8 1340     		and	r3, r2
 6096 00ea 0ED0     		beq	.L486
 6097              	.L472:
1476:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6098              		.loc 1 1476 0
 6099 00ec 3B1C     		mov	r3, r7
 6100 00ee 0E33     		add	r3, r3, #14
 6101 00f0 3A1C     		mov	r2, r7
 6102 00f2 0E32     		add	r2, r2, #14
 6103 00f4 1288     		ldrh	r2, [r2]
 6104 00f6 0132     		add	r2, r2, #1
 6105 00f8 1A80     		strh	r2, [r3]
 6106              	.L471:
1476:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6107              		.loc 1 1476 0 is_stmt 0
 6108 00fa 3B1C     		mov	r3, r7
 6109 00fc 0E33     		add	r3, r3, #14
 6110 00fe 0021     		mov	r1, #0
 6111 0100 5A5E     		ldrsh	r2, [r3, r1]
 6112 0102 424B     		ldr	r3, .L489+20
 6113 0104 9A42     		cmp	r2, r3
 6114 0106 EADD     		ble	.L474
 6115 0108 00E0     		b	.L473
 6116              	.L486:
 6117              		.loc 1 1478 0 is_stmt 1
 6118 010a C046     		mov	r8, r8
 6119              	.L473:
1479:../Sources/TFC/TFC_CrystalClock.c ****     }
1480:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IRCST_MASK) return 0x13; // check bit is really clear and return with error i
 6120              		.loc 1 1480 0
 6121 010c 3A4B     		ldr	r3, .L489
 6122 010e 9B79     		ldrb	r3, [r3, #6]
 6123 0110 DBB2     		uxtb	r3, r3
 6124 0112 1A1C     		mov	r2, r3
 6125 0114 0123     		mov	r3, #1
 6126 0116 1340     		and	r3, r2
 6127 0118 26D0     		beq	.L475
 6128              		.loc 1 1480 0 is_stmt 0
 6129 011a 1323     		mov	r3, #19
 6130 011c 67E0     		b	.L463
 6131              	.L470:
1481:../Sources/TFC/TFC_CrystalClock.c ****   }
1482:../Sources/TFC/TFC_CrystalClock.c ****   else
1483:../Sources/TFC/TFC_CrystalClock.c ****   {
1484:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6132              		.loc 1 1484 0 is_stmt 1
 6133 011e 3B1C     		mov	r3, r7
 6134 0120 0E33     		add	r3, r3, #14
 6135 0122 0022     		mov	r2, #0
 6136 0124 1A80     		strh	r2, [r3]
 6137 0126 0DE0     		b	.L476
 6138              	.L479:
1485:../Sources/TFC/TFC_CrystalClock.c ****     {
1486:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_IRCST_MASK) break; // jump out early if IRCST sets before loop finishes
 6139              		.loc 1 1486 0
 6140 0128 334B     		ldr	r3, .L489
 6141 012a 9B79     		ldrb	r3, [r3, #6]
 6142 012c DBB2     		uxtb	r3, r3
 6143 012e 1A1C     		mov	r2, r3
 6144 0130 0123     		mov	r3, #1
 6145 0132 1340     		and	r3, r2
 6146 0134 0ED1     		bne	.L487
 6147              	.L477:
1484:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6148              		.loc 1 1484 0
 6149 0136 3B1C     		mov	r3, r7
 6150 0138 0E33     		add	r3, r3, #14
 6151 013a 3A1C     		mov	r2, r7
 6152 013c 0E32     		add	r2, r2, #14
 6153 013e 1288     		ldrh	r2, [r2]
 6154 0140 0132     		add	r2, r2, #1
 6155 0142 1A80     		strh	r2, [r3]
 6156              	.L476:
1484:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 2000 ; i++)
 6157              		.loc 1 1484 0 is_stmt 0
 6158 0144 3B1C     		mov	r3, r7
 6159 0146 0E33     		add	r3, r3, #14
 6160 0148 0021     		mov	r1, #0
 6161 014a 5A5E     		ldrsh	r2, [r3, r1]
 6162 014c 2F4B     		ldr	r3, .L489+20
 6163 014e 9A42     		cmp	r2, r3
 6164 0150 EADD     		ble	.L479
 6165 0152 00E0     		b	.L478
 6166              	.L487:
 6167              		.loc 1 1486 0 is_stmt 1
 6168 0154 C046     		mov	r8, r8
 6169              	.L478:
1487:../Sources/TFC/TFC_CrystalClock.c ****     }
1488:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IRCST_MASK)) return 0x14; // check bit is really set and return with error 
 6170              		.loc 1 1488 0
 6171 0156 284B     		ldr	r3, .L489
 6172 0158 9B79     		ldrb	r3, [r3, #6]
 6173 015a DBB2     		uxtb	r3, r3
 6174 015c 1A1C     		mov	r2, r3
 6175 015e 0123     		mov	r3, #1
 6176 0160 1340     		and	r3, r2
 6177 0162 01D1     		bne	.L475
 6178              		.loc 1 1488 0 is_stmt 0
 6179 0164 1423     		mov	r3, #20
 6180 0166 42E0     		b	.L463
 6181              	.L475:
1489:../Sources/TFC/TFC_CrystalClock.c ****   }
1490:../Sources/TFC/TFC_CrystalClock.c ****   
1491:../Sources/TFC/TFC_CrystalClock.c **** // Wait for clock status bits to update
1492:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6182              		.loc 1 1492 0 is_stmt 1
 6183 0168 3B1C     		mov	r3, r7
 6184 016a 0E33     		add	r3, r3, #14
 6185 016c 0022     		mov	r2, #0
 6186 016e 1A80     		strh	r2, [r3]
 6187 0170 0FE0     		b	.L480
 6188              	.L483:
1493:../Sources/TFC/TFC_CrystalClock.c ****   {
1494:../Sources/TFC/TFC_CrystalClock.c ****     if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) break; // jump out early if CLKST
 6189              		.loc 1 1494 0
 6190 0172 214B     		ldr	r3, .L489
 6191 0174 9B79     		ldrb	r3, [r3, #6]
 6192 0176 DBB2     		uxtb	r3, r3
 6193 0178 1A1C     		mov	r2, r3
 6194 017a 0C23     		mov	r3, #12
 6195 017c 1340     		and	r3, r2
 6196 017e 9B08     		lsr	r3, r3, #2
 6197 0180 012B     		cmp	r3, #1
 6198 0182 0ED0     		beq	.L488
 6199              	.L481:
1492:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6200              		.loc 1 1492 0
 6201 0184 3B1C     		mov	r3, r7
 6202 0186 0E33     		add	r3, r3, #14
 6203 0188 3A1C     		mov	r2, r7
 6204 018a 0E32     		add	r2, r2, #14
 6205 018c 1288     		ldrh	r2, [r2]
 6206 018e 0132     		add	r2, r2, #1
 6207 0190 1A80     		strh	r2, [r3]
 6208              	.L480:
1492:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6209              		.loc 1 1492 0 is_stmt 0
 6210 0192 3B1C     		mov	r3, r7
 6211 0194 0E33     		add	r3, r3, #14
 6212 0196 0021     		mov	r1, #0
 6213 0198 5A5E     		ldrsh	r2, [r3, r1]
 6214 019a 1C4B     		ldr	r3, .L489+20
 6215 019c 9A42     		cmp	r2, r3
 6216 019e E8DD     		ble	.L483
 6217 01a0 00E0     		b	.L482
 6218              	.L488:
 6219              		.loc 1 1494 0 is_stmt 1
 6220 01a2 C046     		mov	r8, r8
 6221              	.L482:
1495:../Sources/TFC/TFC_CrystalClock.c ****   }
1496:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x1) return 0x19; // check IRC is really
 6222              		.loc 1 1496 0
 6223 01a4 144B     		ldr	r3, .L489
 6224 01a6 9B79     		ldrb	r3, [r3, #6]
 6225 01a8 DBB2     		uxtb	r3, r3
 6226 01aa 1A1C     		mov	r2, r3
 6227 01ac 0C23     		mov	r3, #12
 6228 01ae 1340     		and	r3, r2
 6229 01b0 9B08     		lsr	r3, r3, #2
 6230 01b2 012B     		cmp	r3, #1
 6231 01b4 01D0     		beq	.L484
 6232              		.loc 1 1496 0 is_stmt 0
 6233 01b6 1923     		mov	r3, #25
 6234 01b8 19E0     		b	.L463
 6235              	.L484:
1497:../Sources/TFC/TFC_CrystalClock.c ****   
1498:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBI mode
1499:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select)
 6236              		.loc 1 1499 0 is_stmt 1
 6237 01ba FB1C     		add	r3, r7, #3
 6238 01bc 1B78     		ldrb	r3, [r3]
 6239 01be 002B     		cmp	r3, #0
 6240 01c0 14D0     		beq	.L485
1500:../Sources/TFC/TFC_CrystalClock.c ****   {
1501:../Sources/TFC/TFC_CrystalClock.c ****     fcrdiv_val = (1 << ((MCG_SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT)); // calculate the fa
 6241              		.loc 1 1501 0
 6242 01c2 0D4B     		ldr	r3, .L489
 6243 01c4 1B7A     		ldrb	r3, [r3, #8]
 6244 01c6 DBB2     		uxtb	r3, r3
 6245 01c8 1A1C     		mov	r2, r3
 6246 01ca 0E23     		mov	r3, #14
 6247 01cc 1340     		and	r3, r2
 6248 01ce 5B08     		lsr	r3, r3, #1
 6249 01d0 0122     		mov	r2, #1
 6250 01d2 9A40     		lsl	r2, r2, r3
 6251 01d4 3B1C     		mov	r3, r7
 6252 01d6 0C33     		add	r3, r3, #12
 6253 01d8 1A70     		strb	r2, [r3]
1502:../Sources/TFC/TFC_CrystalClock.c ****     return (irc_freq / fcrdiv_val); // MCGOUT frequency equals fast IRC frequency divided by 2
 6254              		.loc 1 1502 0
 6255 01da 3B1C     		mov	r3, r7
 6256 01dc 0C33     		add	r3, r3, #12
 6257 01de 1B78     		ldrb	r3, [r3]
 6258 01e0 7868     		ldr	r0, [r7, #4]
 6259 01e2 191C     		mov	r1, r3
 6260 01e4 FFF7FEFF 		bl	__aeabi_idiv
 6261 01e8 031C     		mov	r3, r0
 6262 01ea 00E0     		b	.L463
 6263              	.L485:
1503:../Sources/TFC/TFC_CrystalClock.c ****   }
1504:../Sources/TFC/TFC_CrystalClock.c ****   else
1505:../Sources/TFC/TFC_CrystalClock.c ****   {
1506:../Sources/TFC/TFC_CrystalClock.c ****     return irc_freq; // MCGOUT frequency equals slow IRC frequency
 6264              		.loc 1 1506 0
 6265 01ec 7B68     		ldr	r3, [r7, #4]
 6266              	.L463:
1507:../Sources/TFC/TFC_CrystalClock.c ****   }   
1508:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fbi
 6267              		.loc 1 1508 0
 6268 01ee 181C     		mov	r0, r3
 6269 01f0 BD46     		mov	sp, r7
 6270 01f2 04B0     		add	sp, sp, #16
 6271              		@ sp needed for prologue
 6272 01f4 80BD     		pop	{r7, pc}
 6273              	.L490:
 6274 01f6 C046     		.align	2
 6275              	.L489:
 6276 01f8 00400640 		.word	1074151424
 6277 01fc 117A0000 		.word	31249
 6278 0200 97980000 		.word	39063
 6279 0204 BFC62D00 		.word	2999999
 6280 0208 404B4C00 		.word	5000000
 6281 020c CF070000 		.word	1999
 6282              		.cfi_endproc
 6283              	.LFE21:
 6285              		.section	.text.fei_fee,"ax",%progbits
 6286              		.align	2
 6287              		.global	fei_fee
 6288              		.code	16
 6289              		.thumb_func
 6291              	fei_fee:
 6292              	.LFB22:
1509:../Sources/TFC/TFC_CrystalClock.c **** 
1510:../Sources/TFC/TFC_CrystalClock.c **** 
1511:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1512:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : fei_fee
1513:../Sources/TFC/TFC_CrystalClock.c ****  *
1514:../Sources/TFC/TFC_CrystalClock.c ****  * Mode transition: FEI to FEE mode
1515:../Sources/TFC/TFC_CrystalClock.c ****  *
1516:../Sources/TFC/TFC_CrystalClock.c ****  * This function transitions the MCG from FEI mode to FEE mode. This is
1517:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting the MCG_C2[LP] bit. There is no status bit to 
1518:../Sources/TFC/TFC_CrystalClock.c ****  * check so 0 is always returned if the function was called with the MCG
1519:../Sources/TFC/TFC_CrystalClock.c ****  * in FBI mode. The MCGCLKOUT frequency does not change
1520:../Sources/TFC/TFC_CrystalClock.c ****  *
1521:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: crystal_val - external clock frequency in Hz
1522:../Sources/TFC/TFC_CrystalClock.c ****  *             hgo_val     - selects whether low power or high gain mode is selected
1523:../Sources/TFC/TFC_CrystalClock.c ****  *                           for the crystal oscillator. This has no meaning if an 
1524:../Sources/TFC/TFC_CrystalClock.c ****  *                           external clock is used.
1525:../Sources/TFC/TFC_CrystalClock.c ****  *             erefs_val   - selects external clock (=0) or crystal osc (=1)
1526:../Sources/TFC/TFC_CrystalClock.c ****  *
1527:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : MCGCLKOUT frequency (Hz) or error code
1528:../Sources/TFC/TFC_CrystalClock.c ****  */
1529:../Sources/TFC/TFC_CrystalClock.c **** int fei_fee(int crystal_val, unsigned char hgo_val, unsigned char erefs_val)
1530:../Sources/TFC/TFC_CrystalClock.c **** {
 6293              		.loc 1 1530 0
 6294              		.cfi_startproc
 6295 0000 80B5     		push	{r7, lr}
 6296              	.LCFI66:
 6297              		.cfi_def_cfa_offset 8
 6298              		.cfi_offset 7, -8
 6299              		.cfi_offset 14, -4
 6300 0002 86B0     		sub	sp, sp, #24
 6301              	.LCFI67:
 6302              		.cfi_def_cfa_offset 32
 6303 0004 00AF     		add	r7, sp, #0
 6304              	.LCFI68:
 6305              		.cfi_def_cfa_register 7
 6306 0006 7860     		str	r0, [r7, #4]
 6307 0008 FB1C     		add	r3, r7, #3
 6308 000a 1970     		strb	r1, [r3]
 6309 000c BB1C     		add	r3, r7, #2
 6310 000e 1A70     		strb	r2, [r3]
1531:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char frdiv_val;
1532:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char temp_reg;
1533:../Sources/TFC/TFC_CrystalClock.c ****  // short i;
1534:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out, fll_ref_freq, i;
1535:../Sources/TFC/TFC_CrystalClock.c ****   
1536:../Sources/TFC/TFC_CrystalClock.c **** // check if in FEI mode
1537:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6311              		.loc 1 1537 0
 6312 0010 AC4B     		ldr	r3, .L524
 6313 0012 9B79     		ldrb	r3, [r3, #6]
 6314 0014 DBB2     		uxtb	r3, r3
 6315 0016 1A1C     		mov	r2, r3
 6316 0018 0C23     		mov	r3, #12
 6317 001a 1340     		and	r3, r2
 6318 001c 9B08     		lsr	r3, r3, #2
 6319 001e 0DD1     		bne	.L492
1538:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                  // check FLL ref is internal 
 6320              		.loc 1 1538 0
 6321 0020 A84B     		ldr	r3, .L524
 6322 0022 9B79     		ldrb	r3, [r3, #6]
 6323 0024 DBB2     		uxtb	r3, r3
 6324 0026 1A1C     		mov	r2, r3
 6325 0028 1023     		mov	r3, #16
 6326 002a 1340     		and	r3, r2
1537:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6327              		.loc 1 1537 0
 6328 002c 06D0     		beq	.L492
1539:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                                 // check PLLS mux has selecte
 6329              		.loc 1 1539 0
 6330 002e A54B     		ldr	r3, .L524
 6331 0030 9B79     		ldrb	r3, [r3, #6]
 6332 0032 DBB2     		uxtb	r3, r3
 6333 0034 1A1C     		mov	r2, r3
 6334 0036 2023     		mov	r3, #32
 6335 0038 1340     		and	r3, r2
1537:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6336              		.loc 1 1537 0
 6337 003a 01D0     		beq	.L493
 6338              	.L492:
1540:../Sources/TFC/TFC_CrystalClock.c ****   {
1541:../Sources/TFC/TFC_CrystalClock.c ****     return 0x1;                                                     // return error code
 6339              		.loc 1 1541 0
 6340 003c 0123     		mov	r3, #1
 6341 003e 3CE1     		b	.L494
 6342              	.L493:
1542:../Sources/TFC/TFC_CrystalClock.c ****   }
1543:../Sources/TFC/TFC_CrystalClock.c **** 
1544:../Sources/TFC/TFC_CrystalClock.c **** // check external frequency is less than the maximum frequency
1545:../Sources/TFC/TFC_CrystalClock.c ****   if  (crystal_val > 50000000) {return 0x21;}
 6343              		.loc 1 1545 0
 6344 0040 7A68     		ldr	r2, [r7, #4]
 6345 0042 A14B     		ldr	r3, .L524+4
 6346 0044 9A42     		cmp	r2, r3
 6347 0046 01DD     		ble	.L495
 6348              		.loc 1 1545 0 is_stmt 0
 6349 0048 2123     		mov	r3, #33
 6350 004a 36E1     		b	.L494
 6351              	.L495:
1546:../Sources/TFC/TFC_CrystalClock.c ****   
1547:../Sources/TFC/TFC_CrystalClock.c **** // check crystal frequency is within spec. if crystal osc is being used
1548:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 6352              		.loc 1 1548 0 is_stmt 1
 6353 004c BB1C     		add	r3, r7, #2
 6354 004e 1B78     		ldrb	r3, [r3]
 6355 0050 002B     		cmp	r3, #0
 6356 0052 11D0     		beq	.L496
1549:../Sources/TFC/TFC_CrystalClock.c ****   {
1550:../Sources/TFC/TFC_CrystalClock.c ****     if ((crystal_val < 30000) ||
 6357              		.loc 1 1550 0
 6358 0054 7A68     		ldr	r2, [r7, #4]
 6359 0056 9D4B     		ldr	r3, .L524+8
 6360 0058 9A42     		cmp	r2, r3
 6361 005a 0BDD     		ble	.L497
 6362              		.loc 1 1550 0 is_stmt 0
 6363 005c 7A68     		ldr	r2, [r7, #4]
 6364 005e 9C4B     		ldr	r3, .L524+12
 6365 0060 9A42     		cmp	r2, r3
 6366 0062 03DD     		ble	.L498
1551:../Sources/TFC/TFC_CrystalClock.c ****         ((crystal_val > 40000) && (crystal_val < 3000000)) ||
 6367              		.loc 1 1551 0 is_stmt 1
 6368 0064 7A68     		ldr	r2, [r7, #4]
 6369 0066 9B4B     		ldr	r3, .L524+16
 6370 0068 9A42     		cmp	r2, r3
 6371 006a 03DD     		ble	.L497
 6372              	.L498:
 6373              		.loc 1 1551 0 is_stmt 0
 6374 006c 7A68     		ldr	r2, [r7, #4]
 6375 006e 9A4B     		ldr	r3, .L524+20
 6376 0070 9A42     		cmp	r2, r3
 6377 0072 01DD     		ble	.L496
 6378              	.L497:
1552:../Sources/TFC/TFC_CrystalClock.c ****         (crystal_val > 32000000)) {return 0x22;} // return error if one of the available crystal op
 6379              		.loc 1 1552 0 is_stmt 1
 6380 0074 2223     		mov	r3, #34
 6381 0076 20E1     		b	.L494
 6382              	.L496:
1553:../Sources/TFC/TFC_CrystalClock.c ****   }
1554:../Sources/TFC/TFC_CrystalClock.c **** 
1555:../Sources/TFC/TFC_CrystalClock.c **** // make sure HGO will never be greater than 1. Could return an error instead if desired.  
1556:../Sources/TFC/TFC_CrystalClock.c ****   if (hgo_val > 0)
 6383              		.loc 1 1556 0
 6384 0078 FB1C     		add	r3, r7, #3
 6385 007a 1B78     		ldrb	r3, [r3]
 6386 007c 002B     		cmp	r3, #0
 6387 007e 02D0     		beq	.L499
1557:../Sources/TFC/TFC_CrystalClock.c ****   {
1558:../Sources/TFC/TFC_CrystalClock.c ****     hgo_val = 1; // force hgo_val to 1 if > 0
 6388              		.loc 1 1558 0
 6389 0080 FB1C     		add	r3, r7, #3
 6390 0082 0122     		mov	r2, #1
 6391 0084 1A70     		strb	r2, [r3]
 6392              	.L499:
1559:../Sources/TFC/TFC_CrystalClock.c ****   }
1560:../Sources/TFC/TFC_CrystalClock.c **** 
1561:../Sources/TFC/TFC_CrystalClock.c **** // configure the MCG_C2 register
1562:../Sources/TFC/TFC_CrystalClock.c **** // the RANGE value is determined by the external frequency. Since the RANGE parameter affects the F
1563:../Sources/TFC/TFC_CrystalClock.c **** // it still needs to be set correctly even if the oscillator is not being used
1564:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C2;
 6393              		.loc 1 1564 0
 6394 0086 8F4A     		ldr	r2, .L524
 6395 0088 3B1C     		mov	r3, r7
 6396 008a 1633     		add	r3, r3, #22
 6397 008c 5278     		ldrb	r2, [r2, #1]
 6398 008e 1A70     		strb	r2, [r3]
1565:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C2_RANGE0_MASK | MCG_C2_HGO0_MASK | MCG_C2_EREFS0_MASK); // clear fields before
 6399              		.loc 1 1565 0
 6400 0090 3B1C     		mov	r3, r7
 6401 0092 1633     		add	r3, r3, #22
 6402 0094 3A1C     		mov	r2, r7
 6403 0096 1632     		add	r2, r2, #22
 6404 0098 1278     		ldrb	r2, [r2]
 6405 009a 3C21     		mov	r1, #60
 6406 009c 8A43     		bic	r2, r1
 6407 009e 1A70     		strb	r2, [r3]
1566:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 40000)
 6408              		.loc 1 1566 0
 6409 00a0 7A68     		ldr	r2, [r7, #4]
 6410 00a2 8B4B     		ldr	r3, .L524+12
 6411 00a4 9A42     		cmp	r2, r3
 6412 00a6 11DC     		bgt	.L500
1567:../Sources/TFC/TFC_CrystalClock.c ****   {
1568:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(0) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6413              		.loc 1 1568 0
 6414 00a8 FB1C     		add	r3, r7, #3
 6415 00aa 1B78     		ldrb	r3, [r3]
 6416 00ac DB00     		lsl	r3, r3, #3
 6417 00ae DAB2     		uxtb	r2, r3
 6418 00b0 BB1C     		add	r3, r7, #2
 6419 00b2 1B78     		ldrb	r3, [r3]
 6420 00b4 9B00     		lsl	r3, r3, #2
 6421 00b6 DBB2     		uxtb	r3, r3
 6422 00b8 1343     		orr	r3, r2
 6423 00ba D9B2     		uxtb	r1, r3
 6424 00bc 3B1C     		mov	r3, r7
 6425 00be 1633     		add	r3, r3, #22
 6426 00c0 3A1C     		mov	r2, r7
 6427 00c2 1632     		add	r2, r2, #22
 6428 00c4 1278     		ldrb	r2, [r2]
 6429 00c6 0A43     		orr	r2, r1
 6430 00c8 1A70     		strb	r2, [r3]
 6431 00ca 2CE0     		b	.L501
 6432              	.L500:
1569:../Sources/TFC/TFC_CrystalClock.c ****   }
1570:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 8000000)
 6433              		.loc 1 1570 0
 6434 00cc 7A68     		ldr	r2, [r7, #4]
 6435 00ce 834B     		ldr	r3, .L524+24
 6436 00d0 9A42     		cmp	r2, r3
 6437 00d2 14DC     		bgt	.L502
1571:../Sources/TFC/TFC_CrystalClock.c ****   {
1572:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(1) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6438              		.loc 1 1572 0
 6439 00d4 FB1C     		add	r3, r7, #3
 6440 00d6 1B78     		ldrb	r3, [r3]
 6441 00d8 DB00     		lsl	r3, r3, #3
 6442 00da DAB2     		uxtb	r2, r3
 6443 00dc BB1C     		add	r3, r7, #2
 6444 00de 1B78     		ldrb	r3, [r3]
 6445 00e0 9B00     		lsl	r3, r3, #2
 6446 00e2 DBB2     		uxtb	r3, r3
 6447 00e4 1343     		orr	r3, r2
 6448 00e6 DAB2     		uxtb	r2, r3
 6449 00e8 3B1C     		mov	r3, r7
 6450 00ea 1633     		add	r3, r3, #22
 6451 00ec 1B78     		ldrb	r3, [r3]
 6452 00ee 1343     		orr	r3, r2
 6453 00f0 DAB2     		uxtb	r2, r3
 6454 00f2 3B1C     		mov	r3, r7
 6455 00f4 1633     		add	r3, r3, #22
 6456 00f6 1021     		mov	r1, #16
 6457 00f8 0A43     		orr	r2, r1
 6458 00fa 1A70     		strb	r2, [r3]
 6459 00fc 13E0     		b	.L501
 6460              	.L502:
1573:../Sources/TFC/TFC_CrystalClock.c ****   }
1574:../Sources/TFC/TFC_CrystalClock.c ****   else
1575:../Sources/TFC/TFC_CrystalClock.c ****   {
1576:../Sources/TFC/TFC_CrystalClock.c ****     temp_reg |= (MCG_C2_RANGE0(2) | (hgo_val << MCG_C2_HGO0_SHIFT) | (erefs_val << MCG_C2_EREFS0_SH
 6461              		.loc 1 1576 0
 6462 00fe FB1C     		add	r3, r7, #3
 6463 0100 1B78     		ldrb	r3, [r3]
 6464 0102 DB00     		lsl	r3, r3, #3
 6465 0104 DAB2     		uxtb	r2, r3
 6466 0106 BB1C     		add	r3, r7, #2
 6467 0108 1B78     		ldrb	r3, [r3]
 6468 010a 9B00     		lsl	r3, r3, #2
 6469 010c DBB2     		uxtb	r3, r3
 6470 010e 1343     		orr	r3, r2
 6471 0110 DAB2     		uxtb	r2, r3
 6472 0112 3B1C     		mov	r3, r7
 6473 0114 1633     		add	r3, r3, #22
 6474 0116 1B78     		ldrb	r3, [r3]
 6475 0118 1343     		orr	r3, r2
 6476 011a DAB2     		uxtb	r2, r3
 6477 011c 3B1C     		mov	r3, r7
 6478 011e 1633     		add	r3, r3, #22
 6479 0120 2021     		mov	r1, #32
 6480 0122 0A43     		orr	r2, r1
 6481 0124 1A70     		strb	r2, [r3]
 6482              	.L501:
1577:../Sources/TFC/TFC_CrystalClock.c ****   }
1578:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C2 = temp_reg;
 6483              		.loc 1 1578 0
 6484 0126 674B     		ldr	r3, .L524
 6485 0128 3A1C     		mov	r2, r7
 6486 012a 1632     		add	r2, r2, #22
 6487 012c 1278     		ldrb	r2, [r2]
 6488 012e 5A70     		strb	r2, [r3, #1]
1579:../Sources/TFC/TFC_CrystalClock.c **** 
1580:../Sources/TFC/TFC_CrystalClock.c **** // determine FRDIV based on reference clock frequency
1581:../Sources/TFC/TFC_CrystalClock.c **** // since the external frequency has already been checked only the maximum frequency for each FRDIV 
1582:../Sources/TFC/TFC_CrystalClock.c ****   if (crystal_val <= 1250000) {frdiv_val = 0;}
 6489              		.loc 1 1582 0
 6490 0130 7A68     		ldr	r2, [r7, #4]
 6491 0132 6B4B     		ldr	r3, .L524+28
 6492 0134 9A42     		cmp	r2, r3
 6493 0136 04DC     		bgt	.L503
 6494              		.loc 1 1582 0 is_stmt 0
 6495 0138 3B1C     		mov	r3, r7
 6496 013a 1733     		add	r3, r3, #23
 6497 013c 0022     		mov	r2, #0
 6498 013e 1A70     		strb	r2, [r3]
 6499 0140 27E0     		b	.L504
 6500              	.L503:
1583:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 2500000) {frdiv_val = 1;}
 6501              		.loc 1 1583 0 is_stmt 1
 6502 0142 7A68     		ldr	r2, [r7, #4]
 6503 0144 674B     		ldr	r3, .L524+32
 6504 0146 9A42     		cmp	r2, r3
 6505 0148 04DC     		bgt	.L505
 6506              		.loc 1 1583 0 is_stmt 0
 6507 014a 3B1C     		mov	r3, r7
 6508 014c 1733     		add	r3, r3, #23
 6509 014e 0122     		mov	r2, #1
 6510 0150 1A70     		strb	r2, [r3]
 6511 0152 1EE0     		b	.L504
 6512              	.L505:
1584:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 5000000) {frdiv_val = 2;}
 6513              		.loc 1 1584 0 is_stmt 1
 6514 0154 7A68     		ldr	r2, [r7, #4]
 6515 0156 644B     		ldr	r3, .L524+36
 6516 0158 9A42     		cmp	r2, r3
 6517 015a 04DC     		bgt	.L506
 6518              		.loc 1 1584 0 is_stmt 0
 6519 015c 3B1C     		mov	r3, r7
 6520 015e 1733     		add	r3, r3, #23
 6521 0160 0222     		mov	r2, #2
 6522 0162 1A70     		strb	r2, [r3]
 6523 0164 15E0     		b	.L504
 6524              	.L506:
1585:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 10000000) {frdiv_val = 3;}
 6525              		.loc 1 1585 0 is_stmt 1
 6526 0166 7A68     		ldr	r2, [r7, #4]
 6527 0168 604B     		ldr	r3, .L524+40
 6528 016a 9A42     		cmp	r2, r3
 6529 016c 04DC     		bgt	.L507
 6530              		.loc 1 1585 0 is_stmt 0
 6531 016e 3B1C     		mov	r3, r7
 6532 0170 1733     		add	r3, r3, #23
 6533 0172 0322     		mov	r2, #3
 6534 0174 1A70     		strb	r2, [r3]
 6535 0176 0CE0     		b	.L504
 6536              	.L507:
1586:../Sources/TFC/TFC_CrystalClock.c ****   else if (crystal_val <= 20000000) {frdiv_val = 4;}
 6537              		.loc 1 1586 0 is_stmt 1
 6538 0178 7A68     		ldr	r2, [r7, #4]
 6539 017a 5D4B     		ldr	r3, .L524+44
 6540 017c 9A42     		cmp	r2, r3
 6541 017e 04DC     		bgt	.L508
 6542              		.loc 1 1586 0 is_stmt 0
 6543 0180 3B1C     		mov	r3, r7
 6544 0182 1733     		add	r3, r3, #23
 6545 0184 0422     		mov	r2, #4
 6546 0186 1A70     		strb	r2, [r3]
 6547 0188 03E0     		b	.L504
 6548              	.L508:
1587:../Sources/TFC/TFC_CrystalClock.c ****   else {frdiv_val = 5;}
 6549              		.loc 1 1587 0 is_stmt 1
 6550 018a 3B1C     		mov	r3, r7
 6551 018c 1733     		add	r3, r3, #23
 6552 018e 0522     		mov	r2, #5
 6553 0190 1A70     		strb	r2, [r3]
 6554              	.L504:
1588:../Sources/TFC/TFC_CrystalClock.c ****    
1589:../Sources/TFC/TFC_CrystalClock.c ****   // The FLL ref clk divide value depends on FRDIV and the RANGE value
1590:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C2 & MCG_C2_RANGE0_MASK) >> MCG_C2_RANGE0_SHIFT) > 0)
 6555              		.loc 1 1590 0
 6556 0192 4C4B     		ldr	r3, .L524
 6557 0194 5B78     		ldrb	r3, [r3, #1]
 6558 0196 DBB2     		uxtb	r3, r3
 6559 0198 1A1C     		mov	r2, r3
 6560 019a 3023     		mov	r3, #48
 6561 019c 1340     		and	r3, r2
 6562 019e 1B09     		lsr	r3, r3, #4
 6563 01a0 0DD0     		beq	.L509
1591:../Sources/TFC/TFC_CrystalClock.c ****   {
1592:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (32 << frdiv_val));
 6564              		.loc 1 1592 0
 6565 01a2 3B1C     		mov	r3, r7
 6566 01a4 1733     		add	r3, r3, #23
 6567 01a6 1B78     		ldrb	r3, [r3]
 6568 01a8 2022     		mov	r2, #32
 6569 01aa 111C     		mov	r1, r2
 6570 01ac 9940     		lsl	r1, r1, r3
 6571 01ae 0B1C     		mov	r3, r1
 6572 01b0 7868     		ldr	r0, [r7, #4]
 6573 01b2 191C     		mov	r1, r3
 6574 01b4 FFF7FEFF 		bl	__aeabi_idiv
 6575 01b8 031C     		mov	r3, r0
 6576 01ba 3B61     		str	r3, [r7, #16]
 6577 01bc 0CE0     		b	.L510
 6578              	.L509:
1593:../Sources/TFC/TFC_CrystalClock.c ****   }
1594:../Sources/TFC/TFC_CrystalClock.c ****   else
1595:../Sources/TFC/TFC_CrystalClock.c ****   {
1596:../Sources/TFC/TFC_CrystalClock.c ****     fll_ref_freq = ((crystal_val) / (1 << frdiv_val));
 6579              		.loc 1 1596 0
 6580 01be 3B1C     		mov	r3, r7
 6581 01c0 1733     		add	r3, r3, #23
 6582 01c2 1B78     		ldrb	r3, [r3]
 6583 01c4 0122     		mov	r2, #1
 6584 01c6 111C     		mov	r1, r2
 6585 01c8 9940     		lsl	r1, r1, r3
 6586 01ca 0B1C     		mov	r3, r1
 6587 01cc 7868     		ldr	r0, [r7, #4]
 6588 01ce 191C     		mov	r1, r3
 6589 01d0 FFF7FEFF 		bl	__aeabi_idiv
 6590 01d4 031C     		mov	r3, r0
 6591 01d6 3B61     		str	r3, [r7, #16]
 6592              	.L510:
1597:../Sources/TFC/TFC_CrystalClock.c ****   }
1598:../Sources/TFC/TFC_CrystalClock.c ****   
1599:../Sources/TFC/TFC_CrystalClock.c **** // Check resulting FLL frequency 
1600:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(fll_ref_freq); // FLL reference frequency calculated from ext ref freq and FRD
 6593              		.loc 1 1600 0
 6594 01d8 3B69     		ldr	r3, [r7, #16]
 6595 01da 181C     		mov	r0, r3
 6596 01dc FFF7FEFF 		bl	fll_freq
 6597 01e0 031C     		mov	r3, r0
 6598 01e2 BB60     		str	r3, [r7, #8]
1601:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 6599              		.loc 1 1601 0
 6600 01e4 BB68     		ldr	r3, [r7, #8]
 6601 01e6 3B2B     		cmp	r3, #59
 6602 01e8 01DC     		bgt	.L511
 6603              		.loc 1 1601 0 is_stmt 0
 6604 01ea BB68     		ldr	r3, [r7, #8]
 6605 01ec 65E0     		b	.L494
 6606              	.L511:
1602:../Sources/TFC/TFC_CrystalClock.c ****   
1603:../Sources/TFC/TFC_CrystalClock.c **** // Select external oscilator and Reference Divider and clear IREFS to start ext osc
1604:../Sources/TFC/TFC_CrystalClock.c **** // If IRCLK is required it must be enabled outside of this driver, existing state will be maintaine
1605:../Sources/TFC/TFC_CrystalClock.c **** // CLKS=0, FRDIV=frdiv_val, IREFS=0, IRCLKEN=0, IREFSTEN=0
1606:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = MCG_C1;
 6607              		.loc 1 1606 0 is_stmt 1
 6608 01ee 354A     		ldr	r2, .L524
 6609 01f0 3B1C     		mov	r3, r7
 6610 01f2 1633     		add	r3, r3, #22
 6611 01f4 1278     		ldrb	r2, [r2]
 6612 01f6 1A70     		strb	r2, [r3]
1607:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~(MCG_C1_CLKS_MASK | MCG_C1_FRDIV_MASK | MCG_C1_IREFS_MASK); // Clear values in these
 6613              		.loc 1 1607 0
 6614 01f8 3B1C     		mov	r3, r7
 6615 01fa 1633     		add	r3, r3, #22
 6616 01fc 3A1C     		mov	r2, r7
 6617 01fe 1632     		add	r2, r2, #22
 6618 0200 1178     		ldrb	r1, [r2]
 6619 0202 0322     		mov	r2, #3
 6620 0204 0A40     		and	r2, r1
 6621 0206 1A70     		strb	r2, [r3]
1608:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= (MCG_C1_CLKS(0) | MCG_C1_FRDIV(frdiv_val)); // Set the required CLKS and FRDIV values
 6622              		.loc 1 1608 0
 6623 0208 3B1C     		mov	r3, r7
 6624 020a 1733     		add	r3, r3, #23
 6625 020c 1B78     		ldrb	r3, [r3]
 6626 020e DB00     		lsl	r3, r3, #3
 6627 0210 DAB2     		uxtb	r2, r3
 6628 0212 3823     		mov	r3, #56
 6629 0214 1340     		and	r3, r2
 6630 0216 D9B2     		uxtb	r1, r3
 6631 0218 3B1C     		mov	r3, r7
 6632 021a 1633     		add	r3, r3, #22
 6633 021c 3A1C     		mov	r2, r7
 6634 021e 1632     		add	r2, r2, #22
 6635 0220 1278     		ldrb	r2, [r2]
 6636 0222 0A43     		orr	r2, r1
 6637 0224 1A70     		strb	r2, [r3]
1609:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 = temp_reg;
 6638              		.loc 1 1609 0
 6639 0226 274B     		ldr	r3, .L524
 6640 0228 3A1C     		mov	r2, r7
 6641 022a 1632     		add	r2, r2, #22
 6642 022c 1278     		ldrb	r2, [r2]
 6643 022e 1A70     		strb	r2, [r3]
1610:../Sources/TFC/TFC_CrystalClock.c **** 
1611:../Sources/TFC/TFC_CrystalClock.c **** // if the external oscillator is used need to wait for OSCINIT to set
1612:../Sources/TFC/TFC_CrystalClock.c ****   if (erefs_val)
 6644              		.loc 1 1612 0
 6645 0230 BB1C     		add	r3, r7, #2
 6646 0232 1B78     		ldrb	r3, [r3]
 6647 0234 002B     		cmp	r3, #0
 6648 0236 1BD0     		beq	.L512
1613:../Sources/TFC/TFC_CrystalClock.c ****   {
1614:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6649              		.loc 1 1614 0
 6650 0238 0023     		mov	r3, #0
 6651 023a FB60     		str	r3, [r7, #12]
 6652 023c 09E0     		b	.L513
 6653              	.L516:
1615:../Sources/TFC/TFC_CrystalClock.c ****     {
1616:../Sources/TFC/TFC_CrystalClock.c ****       if (MCG_S & MCG_S_OSCINIT0_MASK) break; // jump out early if OSCINIT sets before loop finishe
 6654              		.loc 1 1616 0
 6655 023e 214B     		ldr	r3, .L524
 6656 0240 9B79     		ldrb	r3, [r3, #6]
 6657 0242 DBB2     		uxtb	r3, r3
 6658 0244 1A1C     		mov	r2, r3
 6659 0246 0223     		mov	r3, #2
 6660 0248 1340     		and	r3, r2
 6661 024a 07D1     		bne	.L522
 6662              	.L514:
1614:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6663              		.loc 1 1614 0
 6664 024c FB68     		ldr	r3, [r7, #12]
 6665 024e 0133     		add	r3, r3, #1
 6666 0250 FB60     		str	r3, [r7, #12]
 6667              	.L513:
1614:../Sources/TFC/TFC_CrystalClock.c ****     for (i = 0 ; i < 20000000 ; i++)
 6668              		.loc 1 1614 0 is_stmt 0
 6669 0252 FA68     		ldr	r2, [r7, #12]
 6670 0254 274B     		ldr	r3, .L524+48
 6671 0256 9A42     		cmp	r2, r3
 6672 0258 F1DD     		ble	.L516
 6673 025a 00E0     		b	.L515
 6674              	.L522:
 6675              		.loc 1 1616 0 is_stmt 1
 6676 025c C046     		mov	r8, r8
 6677              	.L515:
1617:../Sources/TFC/TFC_CrystalClock.c ****     }
1618:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_OSCINIT0_MASK)) return 0x23; // check bit is really set and return with err
 6678              		.loc 1 1618 0
 6679 025e 194B     		ldr	r3, .L524
 6680 0260 9B79     		ldrb	r3, [r3, #6]
 6681 0262 DBB2     		uxtb	r3, r3
 6682 0264 1A1C     		mov	r2, r3
 6683 0266 0223     		mov	r3, #2
 6684 0268 1340     		and	r3, r2
 6685 026a 01D1     		bne	.L512
 6686              		.loc 1 1618 0 is_stmt 0
 6687 026c 2323     		mov	r3, #35
 6688 026e 24E0     		b	.L494
 6689              	.L512:
1619:../Sources/TFC/TFC_CrystalClock.c ****   }
1620:../Sources/TFC/TFC_CrystalClock.c **** 
1621:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock Status bit to clear
1622:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6690              		.loc 1 1622 0 is_stmt 1
 6691 0270 0023     		mov	r3, #0
 6692 0272 FB60     		str	r3, [r7, #12]
 6693 0274 09E0     		b	.L517
 6694              	.L520:
1623:../Sources/TFC/TFC_CrystalClock.c ****   {
1624:../Sources/TFC/TFC_CrystalClock.c ****     if (!(MCG_S & MCG_S_IREFST_MASK)) break; // jump out early if IREFST clears before loop finishe
 6695              		.loc 1 1624 0
 6696 0276 134B     		ldr	r3, .L524
 6697 0278 9B79     		ldrb	r3, [r3, #6]
 6698 027a DBB2     		uxtb	r3, r3
 6699 027c 1A1C     		mov	r2, r3
 6700 027e 1023     		mov	r3, #16
 6701 0280 1340     		and	r3, r2
 6702 0282 07D0     		beq	.L523
 6703              	.L518:
1622:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6704              		.loc 1 1622 0
 6705 0284 FB68     		ldr	r3, [r7, #12]
 6706 0286 0133     		add	r3, r3, #1
 6707 0288 FB60     		str	r3, [r7, #12]
 6708              	.L517:
1622:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6709              		.loc 1 1622 0 is_stmt 0
 6710 028a FA68     		ldr	r2, [r7, #12]
 6711 028c 1A4B     		ldr	r3, .L524+52
 6712 028e 9A42     		cmp	r2, r3
 6713 0290 F1DD     		ble	.L520
 6714 0292 00E0     		b	.L519
 6715              	.L523:
 6716              		.loc 1 1624 0 is_stmt 1
 6717 0294 C046     		mov	r8, r8
 6718              	.L519:
1625:../Sources/TFC/TFC_CrystalClock.c ****   }
1626:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_S & MCG_S_IREFST_MASK) return 0x11; // check bit is really clear and return with error if
 6719              		.loc 1 1626 0
 6720 0296 0B4B     		ldr	r3, .L524
 6721 0298 9B79     		ldrb	r3, [r3, #6]
 6722 029a DBB2     		uxtb	r3, r3
 6723 029c 1A1C     		mov	r2, r3
 6724 029e 1023     		mov	r3, #16
 6725 02a0 1340     		and	r3, r2
 6726 02a2 01D0     		beq	.L521
 6727              		.loc 1 1626 0 is_stmt 0
 6728 02a4 1123     		mov	r3, #17
 6729 02a6 08E0     		b	.L494
 6730              	.L521:
1627:../Sources/TFC/TFC_CrystalClock.c ****   
1628:../Sources/TFC/TFC_CrystalClock.c **** // Now in FBE  
1629:../Sources/TFC/TFC_CrystalClock.c **** // It is recommended that the clock monitor is enabled when using an external clock as the clock so
1630:../Sources/TFC/TFC_CrystalClock.c **** // It is enabled here but can be removed if this is not required.
1631:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 |= MCG_C6_CME0_MASK;
 6731              		.loc 1 1631 0 is_stmt 1
 6732 02a8 064B     		ldr	r3, .L524
 6733 02aa 064A     		ldr	r2, .L524
 6734 02ac 5279     		ldrb	r2, [r2, #5]
 6735 02ae D2B2     		uxtb	r2, r2
 6736 02b0 2021     		mov	r1, #32
 6737 02b2 0A43     		orr	r2, r1
 6738 02b4 D2B2     		uxtb	r2, r2
 6739 02b6 5A71     		strb	r2, [r3, #5]
1632:../Sources/TFC/TFC_CrystalClock.c ****   
1633:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out; // MCGOUT frequency equals FLL frequency
 6740              		.loc 1 1633 0
 6741 02b8 BB68     		ldr	r3, [r7, #8]
 6742              	.L494:
1634:../Sources/TFC/TFC_CrystalClock.c **** } // fei_fee
 6743              		.loc 1 1634 0
 6744 02ba 181C     		mov	r0, r3
 6745 02bc BD46     		mov	sp, r7
 6746 02be 06B0     		add	sp, sp, #24
 6747              		@ sp needed for prologue
 6748 02c0 80BD     		pop	{r7, pc}
 6749              	.L525:
 6750 02c2 C046     		.align	2
 6751              	.L524:
 6752 02c4 00400640 		.word	1074151424
 6753 02c8 80F0FA02 		.word	50000000
 6754 02cc 2F750000 		.word	29999
 6755 02d0 409C0000 		.word	40000
 6756 02d4 BFC62D00 		.word	2999999
 6757 02d8 0048E801 		.word	32000000
 6758 02dc 00127A00 		.word	8000000
 6759 02e0 D0121300 		.word	1250000
 6760 02e4 A0252600 		.word	2500000
 6761 02e8 404B4C00 		.word	5000000
 6762 02ec 80969800 		.word	10000000
 6763 02f0 002D3101 		.word	20000000
 6764 02f4 FF2C3101 		.word	19999999
 6765 02f8 CF070000 		.word	1999
 6766              		.cfi_endproc
 6767              	.LFE22:
 6769              		.section	.text.fee_fei,"ax",%progbits
 6770              		.align	2
 6771              		.global	fee_fei
 6772              		.code	16
 6773              		.thumb_func
 6775              	fee_fei:
 6776              	.LFB23:
1635:../Sources/TFC/TFC_CrystalClock.c **** 
1636:../Sources/TFC/TFC_CrystalClock.c **** 
1637:../Sources/TFC/TFC_CrystalClock.c **** int fee_fei(int slow_irc_freq)
1638:../Sources/TFC/TFC_CrystalClock.c **** {
 6777              		.loc 1 1638 0
 6778              		.cfi_startproc
 6779 0000 80B5     		push	{r7, lr}
 6780              	.LCFI69:
 6781              		.cfi_def_cfa_offset 8
 6782              		.cfi_offset 7, -8
 6783              		.cfi_offset 14, -4
 6784 0002 84B0     		sub	sp, sp, #16
 6785              	.LCFI70:
 6786              		.cfi_def_cfa_offset 24
 6787 0004 00AF     		add	r7, sp, #0
 6788              	.LCFI71:
 6789              		.cfi_def_cfa_register 7
 6790 0006 7860     		str	r0, [r7, #4]
1639:../Sources/TFC/TFC_CrystalClock.c ****   short i;
1640:../Sources/TFC/TFC_CrystalClock.c ****   int mcg_out;
1641:../Sources/TFC/TFC_CrystalClock.c **** 
1642:../Sources/TFC/TFC_CrystalClock.c **** // Check MCG is in FEE mode
1643:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6791              		.loc 1 1643 0
 6792 0008 334B     		ldr	r3, .L539
 6793 000a 9B79     		ldrb	r3, [r3, #6]
 6794 000c DBB2     		uxtb	r3, r3
 6795 000e 1A1C     		mov	r2, r3
 6796 0010 0C23     		mov	r3, #12
 6797 0012 1340     		and	r3, r2
 6798 0014 9B08     		lsr	r3, r3, #2
 6799 0016 0DD1     		bne	.L527
1644:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_IREFST_MASK)) &&                             // check FLL ref is external re
 6800              		.loc 1 1644 0
 6801 0018 2F4B     		ldr	r3, .L539
 6802 001a 9B79     		ldrb	r3, [r3, #6]
 6803 001c DBB2     		uxtb	r3, r3
 6804 001e 1A1C     		mov	r2, r3
 6805 0020 1023     		mov	r3, #16
 6806 0022 1340     		and	r3, r2
1643:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6807              		.loc 1 1643 0
 6808 0024 06D1     		bne	.L527
1645:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK))))                               // check PLLS mux has selected 
 6809              		.loc 1 1645 0
 6810 0026 2C4B     		ldr	r3, .L539
 6811 0028 9B79     		ldrb	r3, [r3, #6]
 6812 002a DBB2     		uxtb	r3, r3
 6813 002c 1A1C     		mov	r2, r3
 6814 002e 2023     		mov	r3, #32
 6815 0030 1340     		and	r3, r2
1643:../Sources/TFC/TFC_CrystalClock.c ****   if (!((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selcted
 6816              		.loc 1 1643 0
 6817 0032 01D0     		beq	.L528
 6818              	.L527:
1646:../Sources/TFC/TFC_CrystalClock.c ****   {
1647:../Sources/TFC/TFC_CrystalClock.c ****     return 0x2;                                                     // return error code
 6819              		.loc 1 1647 0
 6820 0034 0223     		mov	r3, #2
 6821 0036 4AE0     		b	.L529
 6822              	.L528:
1648:../Sources/TFC/TFC_CrystalClock.c ****   } 
1649:../Sources/TFC/TFC_CrystalClock.c ****       
1650:../Sources/TFC/TFC_CrystalClock.c **** // Check IRC frequency is within spec.
1651:../Sources/TFC/TFC_CrystalClock.c ****   if ((slow_irc_freq < 31250) || (slow_irc_freq > 39063))
 6823              		.loc 1 1651 0
 6824 0038 7A68     		ldr	r2, [r7, #4]
 6825 003a 284B     		ldr	r3, .L539+4
 6826 003c 9A42     		cmp	r2, r3
 6827 003e 03DD     		ble	.L530
 6828              		.loc 1 1651 0 is_stmt 0
 6829 0040 7A68     		ldr	r2, [r7, #4]
 6830 0042 274B     		ldr	r3, .L539+8
 6831 0044 9A42     		cmp	r2, r3
 6832 0046 01DD     		ble	.L531
 6833              	.L530:
1652:../Sources/TFC/TFC_CrystalClock.c ****   {
1653:../Sources/TFC/TFC_CrystalClock.c ****     return 0x31;
 6834              		.loc 1 1653 0 is_stmt 1
 6835 0048 3123     		mov	r3, #49
 6836 004a 40E0     		b	.L529
 6837              	.L531:
1654:../Sources/TFC/TFC_CrystalClock.c ****   }
1655:../Sources/TFC/TFC_CrystalClock.c **** 
1656:../Sources/TFC/TFC_CrystalClock.c ****   // Check resulting FLL frequency 
1657:../Sources/TFC/TFC_CrystalClock.c ****   mcg_out = fll_freq(slow_irc_freq); 
 6838              		.loc 1 1657 0
 6839 004c 7B68     		ldr	r3, [r7, #4]
 6840 004e 181C     		mov	r0, r3
 6841 0050 FFF7FEFF 		bl	fll_freq
 6842 0054 031C     		mov	r3, r0
 6843 0056 BB60     		str	r3, [r7, #8]
1658:../Sources/TFC/TFC_CrystalClock.c ****   if (mcg_out < 0x3C) {return mcg_out;} // If error code returned, return the code to calling funct
 6844              		.loc 1 1658 0
 6845 0058 BB68     		ldr	r3, [r7, #8]
 6846 005a 3B2B     		cmp	r3, #59
 6847 005c 01DC     		bgt	.L532
 6848              		.loc 1 1658 0 is_stmt 0
 6849 005e BB68     		ldr	r3, [r7, #8]
 6850 0060 35E0     		b	.L529
 6851              	.L532:
1659:../Sources/TFC/TFC_CrystalClock.c ****   
1660:../Sources/TFC/TFC_CrystalClock.c **** // Ensure clock monitor is disabled before switching to FEI otherwise a loss of clock will trigger
1661:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C6 &= ~MCG_C6_CME0_MASK;
 6852              		.loc 1 1661 0 is_stmt 1
 6853 0062 1D4B     		ldr	r3, .L539
 6854 0064 1C4A     		ldr	r2, .L539
 6855 0066 5279     		ldrb	r2, [r2, #5]
 6856 0068 D2B2     		uxtb	r2, r2
 6857 006a 2021     		mov	r1, #32
 6858 006c 8A43     		bic	r2, r1
 6859 006e D2B2     		uxtb	r2, r2
 6860 0070 5A71     		strb	r2, [r3, #5]
1662:../Sources/TFC/TFC_CrystalClock.c **** 
1663:../Sources/TFC/TFC_CrystalClock.c **** // Change FLL reference clock from external to internal by setting IREFS bit
1664:../Sources/TFC/TFC_CrystalClock.c ****   MCG_C1 |= MCG_C1_IREFS_MASK; // select internal reference
 6861              		.loc 1 1664 0
 6862 0072 194B     		ldr	r3, .L539
 6863 0074 184A     		ldr	r2, .L539
 6864 0076 1278     		ldrb	r2, [r2]
 6865 0078 D2B2     		uxtb	r2, r2
 6866 007a 0421     		mov	r1, #4
 6867 007c 0A43     		orr	r2, r1
 6868 007e D2B2     		uxtb	r2, r2
 6869 0080 1A70     		strb	r2, [r3]
1665:../Sources/TFC/TFC_CrystalClock.c ****   
1666:../Sources/TFC/TFC_CrystalClock.c **** // wait for Reference clock to switch to internal reference 
1667:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6870              		.loc 1 1667 0
 6871 0082 3B1C     		mov	r3, r7
 6872 0084 0E33     		add	r3, r3, #14
 6873 0086 0022     		mov	r2, #0
 6874 0088 1A80     		strh	r2, [r3]
 6875 008a 0DE0     		b	.L533
 6876              	.L536:
1668:../Sources/TFC/TFC_CrystalClock.c ****   {
1669:../Sources/TFC/TFC_CrystalClock.c ****     if (MCG_S & MCG_S_IREFST_MASK) break; // jump out early if IREFST sets before loop finishes
 6877              		.loc 1 1669 0
 6878 008c 124B     		ldr	r3, .L539
 6879 008e 9B79     		ldrb	r3, [r3, #6]
 6880 0090 DBB2     		uxtb	r3, r3
 6881 0092 1A1C     		mov	r2, r3
 6882 0094 1023     		mov	r3, #16
 6883 0096 1340     		and	r3, r2
 6884 0098 0ED1     		bne	.L538
 6885              	.L534:
1667:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6886              		.loc 1 1667 0
 6887 009a 3B1C     		mov	r3, r7
 6888 009c 0E33     		add	r3, r3, #14
 6889 009e 3A1C     		mov	r2, r7
 6890 00a0 0E32     		add	r2, r2, #14
 6891 00a2 1288     		ldrh	r2, [r2]
 6892 00a4 0132     		add	r2, r2, #1
 6893 00a6 1A80     		strh	r2, [r3]
 6894              	.L533:
1667:../Sources/TFC/TFC_CrystalClock.c ****   for (i = 0 ; i < 2000 ; i++)
 6895              		.loc 1 1667 0 is_stmt 0
 6896 00a8 3B1C     		mov	r3, r7
 6897 00aa 0E33     		add	r3, r3, #14
 6898 00ac 0021     		mov	r1, #0
 6899 00ae 5A5E     		ldrsh	r2, [r3, r1]
 6900 00b0 0C4B     		ldr	r3, .L539+12
 6901 00b2 9A42     		cmp	r2, r3
 6902 00b4 EADD     		ble	.L536
 6903 00b6 00E0     		b	.L535
 6904              	.L538:
 6905              		.loc 1 1669 0 is_stmt 1
 6906 00b8 C046     		mov	r8, r8
 6907              	.L535:
1670:../Sources/TFC/TFC_CrystalClock.c ****   }
1671:../Sources/TFC/TFC_CrystalClock.c ****   if (!(MCG_S & MCG_S_IREFST_MASK)) return 0x12; // check bit is really set and return with error i
 6908              		.loc 1 1671 0
 6909 00ba 074B     		ldr	r3, .L539
 6910 00bc 9B79     		ldrb	r3, [r3, #6]
 6911 00be DBB2     		uxtb	r3, r3
 6912 00c0 1A1C     		mov	r2, r3
 6913 00c2 1023     		mov	r3, #16
 6914 00c4 1340     		and	r3, r2
 6915 00c6 01D1     		bne	.L537
 6916              		.loc 1 1671 0 is_stmt 0
 6917 00c8 1223     		mov	r3, #18
 6918 00ca 00E0     		b	.L529
 6919              	.L537:
1672:../Sources/TFC/TFC_CrystalClock.c ****   
1673:../Sources/TFC/TFC_CrystalClock.c **** // Now in FEI mode  
1674:../Sources/TFC/TFC_CrystalClock.c ****   return mcg_out;  
 6920              		.loc 1 1674 0 is_stmt 1
 6921 00cc BB68     		ldr	r3, [r7, #8]
 6922              	.L529:
1675:../Sources/TFC/TFC_CrystalClock.c **** } // fee_fei
 6923              		.loc 1 1675 0
 6924 00ce 181C     		mov	r0, r3
 6925 00d0 BD46     		mov	sp, r7
 6926 00d2 04B0     		add	sp, sp, #16
 6927              		@ sp needed for prologue
 6928 00d4 80BD     		pop	{r7, pc}
 6929              	.L540:
 6930 00d6 C046     		.align	2
 6931              	.L539:
 6932 00d8 00400640 		.word	1074151424
 6933 00dc 117A0000 		.word	31249
 6934 00e0 97980000 		.word	39063
 6935 00e4 CF070000 		.word	1999
 6936              		.cfi_endproc
 6937              	.LFE23:
 6939              		.global	__aeabi_uidiv
 6940              		.global	__aeabi_i2f
 6941              		.global	__aeabi_fdiv
 6942              		.global	__aeabi_fmul
 6943              		.global	__aeabi_f2uiz
 6944              		.section	.text.atc,"ax",%progbits
 6945              		.align	2
 6946              		.global	atc
 6947              		.code	16
 6948              		.thumb_func
 6950              	atc:
 6951              	.LFB24:
1676:../Sources/TFC/TFC_CrystalClock.c **** 
1677:../Sources/TFC/TFC_CrystalClock.c **** 
1678:../Sources/TFC/TFC_CrystalClock.c **** 
1679:../Sources/TFC/TFC_CrystalClock.c **** unsigned char atc(unsigned char irc_select, int irc_freq, int mcg_out_freq)
1680:../Sources/TFC/TFC_CrystalClock.c **** {
 6952              		.loc 1 1680 0
 6953              		.cfi_startproc
 6954 0000 90B5     		push	{r4, r7, lr}
 6955              	.LCFI72:
 6956              		.cfi_def_cfa_offset 12
 6957              		.cfi_offset 4, -12
 6958              		.cfi_offset 7, -8
 6959              		.cfi_offset 14, -4
 6960 0002 8BB0     		sub	sp, sp, #44
 6961              	.LCFI73:
 6962              		.cfi_def_cfa_offset 56
 6963 0004 00AF     		add	r7, sp, #0
 6964              	.LCFI74:
 6965              		.cfi_def_cfa_register 7
 6966 0006 B960     		str	r1, [r7, #8]
 6967 0008 7A60     		str	r2, [r7, #4]
 6968 000a 3B1C     		mov	r3, r7
 6969 000c 0F33     		add	r3, r3, #15
 6970 000e 021C     		add	r2, r0, #0
 6971 0010 1A70     		strb	r2, [r3]
1681:../Sources/TFC/TFC_CrystalClock.c ****   unsigned char mcg_mode;
1682:../Sources/TFC/TFC_CrystalClock.c ****   unsigned short atcv;
1683:../Sources/TFC/TFC_CrystalClock.c ****   int bus_clock_freq;
1684:../Sources/TFC/TFC_CrystalClock.c ****   int  bus_clk_div_val;
1685:../Sources/TFC/TFC_CrystalClock.c ****   int orig_div;
1686:../Sources/TFC/TFC_CrystalClock.c ****   int temp_reg;
1687:../Sources/TFC/TFC_CrystalClock.c ****   
1688:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select > 0) // force irc to 1 if greater than 0
 6972              		.loc 1 1688 0
 6973 0012 3B1C     		mov	r3, r7
 6974 0014 0F33     		add	r3, r3, #15
 6975 0016 1B78     		ldrb	r3, [r3]
 6976 0018 002B     		cmp	r3, #0
 6977 001a 03D0     		beq	.L542
1689:../Sources/TFC/TFC_CrystalClock.c ****   {
1690:../Sources/TFC/TFC_CrystalClock.c ****     irc_select = 1;
 6978              		.loc 1 1690 0
 6979 001c 3B1C     		mov	r3, r7
 6980 001e 0F33     		add	r3, r3, #15
 6981 0020 0122     		mov	r2, #1
 6982 0022 1A70     		strb	r2, [r3]
 6983              	.L542:
1691:../Sources/TFC/TFC_CrystalClock.c ****   }
1692:../Sources/TFC/TFC_CrystalClock.c ****   
1693:../Sources/TFC/TFC_CrystalClock.c ****   mcg_mode = what_mcg_mode(); // get present MCG mode
 6984              		.loc 1 1693 0
 6985 0024 3C1C     		mov	r4, r7
 6986 0026 2534     		add	r4, r4, #37
 6987 0028 FFF7FEFF 		bl	what_mcg_mode
 6988 002c 031C     		mov	r3, r0
 6989 002e 2370     		strb	r3, [r4]
1694:../Sources/TFC/TFC_CrystalClock.c ****   if ((mcg_mode != PEE) && (mcg_mode != PBE) && (mcg_mode != FBE))
 6990              		.loc 1 1694 0
 6991 0030 3B1C     		mov	r3, r7
 6992 0032 2533     		add	r3, r3, #37
 6993 0034 1B78     		ldrb	r3, [r3]
 6994 0036 082B     		cmp	r3, #8
 6995 0038 0BD0     		beq	.L543
 6996              		.loc 1 1694 0 is_stmt 0
 6997 003a 3B1C     		mov	r3, r7
 6998 003c 2533     		add	r3, r3, #37
 6999 003e 1B78     		ldrb	r3, [r3]
 7000 0040 072B     		cmp	r3, #7
 7001 0042 06D0     		beq	.L543
 7002 0044 3B1C     		mov	r3, r7
 7003 0046 2533     		add	r3, r3, #37
 7004 0048 1B78     		ldrb	r3, [r3]
 7005 004a 052B     		cmp	r3, #5
 7006 004c 01D0     		beq	.L543
1695:../Sources/TFC/TFC_CrystalClock.c ****   {
1696:../Sources/TFC/TFC_CrystalClock.c ****     return 1; // return error code if not in PEE, PBE or FBE modes
 7007              		.loc 1 1696 0 is_stmt 1
 7008 004e 0123     		mov	r3, #1
 7009 0050 11E1     		b	.L544
 7010              	.L543:
1697:../Sources/TFC/TFC_CrystalClock.c ****   }
1698:../Sources/TFC/TFC_CrystalClock.c ****   
1699:../Sources/TFC/TFC_CrystalClock.c ****   orig_div = SIM_CLKDIV1; //store present clock divider values
 7011              		.loc 1 1699 0
 7012 0052 8B4A     		ldr	r2, .L559
 7013 0054 8B4B     		ldr	r3, .L559+4
 7014 0056 D358     		ldr	r3, [r2, r3]
 7015 0058 3B62     		str	r3, [r7, #32]
1700:../Sources/TFC/TFC_CrystalClock.c ****   
1701:../Sources/TFC/TFC_CrystalClock.c ****   bus_clk_div_val = mcg_out_freq / 16000000; // calculate bus clock divider to generate fastest all
 7016              		.loc 1 1701 0
 7017 005a 7B68     		ldr	r3, [r7, #4]
 7018 005c 181C     		mov	r0, r3
 7019 005e 8A49     		ldr	r1, .L559+8
 7020 0060 FFF7FEFF 		bl	__aeabi_idiv
 7021 0064 031C     		mov	r3, r0
 7022 0066 FB61     		str	r3, [r7, #28]
1702:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = SIM_CLKDIV1;
 7023              		.loc 1 1702 0
 7024 0068 854A     		ldr	r2, .L559
 7025 006a 864B     		ldr	r3, .L559+4
 7026 006c D358     		ldr	r3, [r2, r3]
 7027 006e BB61     		str	r3, [r7, #24]
1703:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg &= ~SIM_CLKDIV1_OUTDIV4_MASK; // clear dividers except core
 7028              		.loc 1 1703 0
 7029 0070 BA69     		ldr	r2, [r7, #24]
 7030 0072 864B     		ldr	r3, .L559+12
 7031 0074 1340     		and	r3, r2
 7032 0076 BB61     		str	r3, [r7, #24]
1704:../Sources/TFC/TFC_CrystalClock.c ****   // set all bus and flash dividers to same value to ensure clocking restrictions are met
1705:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg |= SIM_CLKDIV1_OUTDIV4(bus_clk_div_val);
 7033              		.loc 1 1705 0
 7034 0078 FB69     		ldr	r3, [r7, #28]
 7035 007a 1A04     		lsl	r2, r3, #16
 7036 007c E023     		mov	r3, #224
 7037 007e DB02     		lsl	r3, r3, #11
 7038 0080 1A40     		and	r2, r3
 7039 0082 BB69     		ldr	r3, [r7, #24]
 7040 0084 1343     		orr	r3, r2
 7041 0086 BB61     		str	r3, [r7, #24]
1706:../Sources/TFC/TFC_CrystalClock.c ****   SIM_CLKDIV1 = temp_reg; // set actual dividers
 7042              		.loc 1 1706 0
 7043 0088 7D4A     		ldr	r2, .L559
 7044 008a B969     		ldr	r1, [r7, #24]
 7045 008c 7D4B     		ldr	r3, .L559+4
 7046 008e D150     		str	r1, [r2, r3]
1707:../Sources/TFC/TFC_CrystalClock.c ****   
1708:../Sources/TFC/TFC_CrystalClock.c ****   bus_clock_freq = mcg_out_freq / (((SIM_CLKDIV1) >> 16)+ 1);//For KL25, flash and bus use the same
 7047              		.loc 1 1708 0
 7048 0090 7A68     		ldr	r2, [r7, #4]
 7049 0092 7B49     		ldr	r1, .L559
 7050 0094 7B4B     		ldr	r3, .L559+4
 7051 0096 CB58     		ldr	r3, [r1, r3]
 7052 0098 1B0C     		lsr	r3, r3, #16
 7053 009a 0133     		add	r3, r3, #1
 7054 009c 101C     		mov	r0, r2
 7055 009e 191C     		mov	r1, r3
 7056 00a0 FFF7FEFF 		bl	__aeabi_uidiv
 7057 00a4 031C     		mov	r3, r0
 7058 00a6 7B61     		str	r3, [r7, #20]
1709:../Sources/TFC/TFC_CrystalClock.c ****   if ((bus_clock_freq < 8000000) || (bus_clock_freq > 16000000))
 7059              		.loc 1 1709 0
 7060 00a8 7A69     		ldr	r2, [r7, #20]
 7061 00aa 794B     		ldr	r3, .L559+16
 7062 00ac 9A42     		cmp	r2, r3
 7063 00ae 03DD     		ble	.L545
 7064              		.loc 1 1709 0 is_stmt 0
 7065 00b0 7A69     		ldr	r2, [r7, #20]
 7066 00b2 754B     		ldr	r3, .L559+8
 7067 00b4 9A42     		cmp	r2, r3
 7068 00b6 05DD     		ble	.L546
 7069              	.L545:
1710:../Sources/TFC/TFC_CrystalClock.c ****   {
1711:../Sources/TFC/TFC_CrystalClock.c ****     SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7070              		.loc 1 1711 0 is_stmt 1
 7071 00b8 714A     		ldr	r2, .L559
 7072 00ba 396A     		ldr	r1, [r7, #32]
 7073 00bc 714B     		ldr	r3, .L559+4
 7074 00be D150     		str	r1, [r2, r3]
1712:../Sources/TFC/TFC_CrystalClock.c ****     return 3; // error, bus clock frequency is not within 8MHz to 16MHz
 7075              		.loc 1 1712 0
 7076 00c0 0323     		mov	r3, #3
 7077 00c2 D8E0     		b	.L544
 7078              	.L546:
1713:../Sources/TFC/TFC_CrystalClock.c ****   }
1714:../Sources/TFC/TFC_CrystalClock.c ****                 
1715:../Sources/TFC/TFC_CrystalClock.c ****   if(!irc_select) //determine if slow or fast IRC to be trimmed
 7079              		.loc 1 1715 0
 7080 00c4 3B1C     		mov	r3, r7
 7081 00c6 0F33     		add	r3, r3, #15
 7082 00c8 1B78     		ldrb	r3, [r3]
 7083 00ca 002B     		cmp	r3, #0
 7084 00cc 13D1     		bne	.L547
1716:../Sources/TFC/TFC_CrystalClock.c ****   {
1717:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq < 31250) // check frequency is above min spec.
 7085              		.loc 1 1717 0
 7086 00ce BA68     		ldr	r2, [r7, #8]
 7087 00d0 704B     		ldr	r3, .L559+20
 7088 00d2 9A42     		cmp	r2, r3
 7089 00d4 05DC     		bgt	.L548
1718:../Sources/TFC/TFC_CrystalClock.c ****     {
1719:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7090              		.loc 1 1719 0
 7091 00d6 6A4A     		ldr	r2, .L559
 7092 00d8 396A     		ldr	r1, [r7, #32]
 7093 00da 6A4B     		ldr	r3, .L559+4
 7094 00dc D150     		str	r1, [r2, r3]
1720:../Sources/TFC/TFC_CrystalClock.c ****       return 4;
 7095              		.loc 1 1720 0
 7096 00de 0423     		mov	r3, #4
 7097 00e0 C9E0     		b	.L544
 7098              	.L548:
1721:../Sources/TFC/TFC_CrystalClock.c ****     }
1722:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq > 39062) // check frequency is below max spec.
 7099              		.loc 1 1722 0
 7100 00e2 BA68     		ldr	r2, [r7, #8]
 7101 00e4 6C4B     		ldr	r3, .L559+24
 7102 00e6 9A42     		cmp	r2, r3
 7103 00e8 19DD     		ble	.L549
1723:../Sources/TFC/TFC_CrystalClock.c ****     {
1724:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7104              		.loc 1 1724 0
 7105 00ea 654A     		ldr	r2, .L559
 7106 00ec 396A     		ldr	r1, [r7, #32]
 7107 00ee 654B     		ldr	r3, .L559+4
 7108 00f0 D150     		str	r1, [r2, r3]
1725:../Sources/TFC/TFC_CrystalClock.c ****       return 5;
 7109              		.loc 1 1725 0
 7110 00f2 0523     		mov	r3, #5
 7111 00f4 BFE0     		b	.L544
 7112              	.L547:
1726:../Sources/TFC/TFC_CrystalClock.c ****     }         
1727:../Sources/TFC/TFC_CrystalClock.c ****   }
1728:../Sources/TFC/TFC_CrystalClock.c ****   else
1729:../Sources/TFC/TFC_CrystalClock.c ****   {
1730:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq < 3000000) // check frequency is above min spec.
 7113              		.loc 1 1730 0
 7114 00f6 BA68     		ldr	r2, [r7, #8]
 7115 00f8 684B     		ldr	r3, .L559+28
 7116 00fa 9A42     		cmp	r2, r3
 7117 00fc 05DC     		bgt	.L550
1731:../Sources/TFC/TFC_CrystalClock.c ****     {
1732:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7118              		.loc 1 1732 0
 7119 00fe 604A     		ldr	r2, .L559
 7120 0100 396A     		ldr	r1, [r7, #32]
 7121 0102 604B     		ldr	r3, .L559+4
 7122 0104 D150     		str	r1, [r2, r3]
1733:../Sources/TFC/TFC_CrystalClock.c ****       return 6;
 7123              		.loc 1 1733 0
 7124 0106 0623     		mov	r3, #6
 7125 0108 B5E0     		b	.L544
 7126              	.L550:
1734:../Sources/TFC/TFC_CrystalClock.c ****     }
1735:../Sources/TFC/TFC_CrystalClock.c ****     if (irc_freq > 5000000) // check frequency is below max spec.
 7127              		.loc 1 1735 0
 7128 010a BA68     		ldr	r2, [r7, #8]
 7129 010c 644B     		ldr	r3, .L559+32
 7130 010e 9A42     		cmp	r2, r3
 7131 0110 05DD     		ble	.L549
1736:../Sources/TFC/TFC_CrystalClock.c ****     {
1737:../Sources/TFC/TFC_CrystalClock.c ****       SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7132              		.loc 1 1737 0
 7133 0112 5B4A     		ldr	r2, .L559
 7134 0114 396A     		ldr	r1, [r7, #32]
 7135 0116 5B4B     		ldr	r3, .L559+4
 7136 0118 D150     		str	r1, [r2, r3]
1738:../Sources/TFC/TFC_CrystalClock.c ****       return 7;
 7137              		.loc 1 1738 0
 7138 011a 0723     		mov	r3, #7
 7139 011c ABE0     		b	.L544
 7140              	.L549:
1739:../Sources/TFC/TFC_CrystalClock.c ****     }            
1740:../Sources/TFC/TFC_CrystalClock.c ****   } // if
1741:../Sources/TFC/TFC_CrystalClock.c ****         
1742:../Sources/TFC/TFC_CrystalClock.c **** // Set up autocal registers, must use floating point calculation
1743:../Sources/TFC/TFC_CrystalClock.c ****   if (irc_select) 
 7141              		.loc 1 1743 0
 7142 011e 3B1C     		mov	r3, r7
 7143 0120 0F33     		add	r3, r3, #15
 7144 0122 1B78     		ldrb	r3, [r3]
 7145 0124 002B     		cmp	r3, #0
 7146 0126 1FD0     		beq	.L551
1744:../Sources/TFC/TFC_CrystalClock.c ****     atcv = (unsigned short)(128.0f * (21.0f * (bus_clock_freq / (float)irc_freq)));
 7147              		.loc 1 1744 0
 7148 0128 7869     		ldr	r0, [r7, #20]
 7149 012a FFF7FEFF 		bl	__aeabi_i2f
 7150 012e 041C     		add	r4, r0, #0
 7151 0130 B868     		ldr	r0, [r7, #8]
 7152 0132 FFF7FEFF 		bl	__aeabi_i2f
 7153 0136 031C     		add	r3, r0, #0
 7154 0138 201C     		add	r0, r4, #0
 7155 013a 191C     		add	r1, r3, #0
 7156 013c FFF7FEFF 		bl	__aeabi_fdiv
 7157 0140 031C     		add	r3, r0, #0
 7158 0142 181C     		add	r0, r3, #0
 7159 0144 5749     		ldr	r1, .L559+36
 7160 0146 FFF7FEFF 		bl	__aeabi_fmul
 7161 014a 031C     		add	r3, r0, #0
 7162 014c 181C     		add	r0, r3, #0
 7163 014e 8621     		mov	r1, #134
 7164 0150 C905     		lsl	r1, r1, #23
 7165 0152 FFF7FEFF 		bl	__aeabi_fmul
 7166 0156 031C     		add	r3, r0, #0
 7167 0158 3C1C     		mov	r4, r7
 7168 015a 2634     		add	r4, r4, #38
 7169 015c 181C     		add	r0, r3, #0
 7170 015e FFF7FEFF 		bl	__aeabi_f2uiz
 7171 0162 031C     		mov	r3, r0
 7172 0164 2380     		strh	r3, [r4]
 7173 0166 18E0     		b	.L552
 7174              	.L551:
1745:../Sources/TFC/TFC_CrystalClock.c ****   else
1746:../Sources/TFC/TFC_CrystalClock.c ****     atcv = (unsigned short)(21.0f * (bus_clock_freq / (float)irc_freq));
 7175              		.loc 1 1746 0
 7176 0168 7869     		ldr	r0, [r7, #20]
 7177 016a FFF7FEFF 		bl	__aeabi_i2f
 7178 016e 041C     		add	r4, r0, #0
 7179 0170 B868     		ldr	r0, [r7, #8]
 7180 0172 FFF7FEFF 		bl	__aeabi_i2f
 7181 0176 031C     		add	r3, r0, #0
 7182 0178 201C     		add	r0, r4, #0
 7183 017a 191C     		add	r1, r3, #0
 7184 017c FFF7FEFF 		bl	__aeabi_fdiv
 7185 0180 031C     		add	r3, r0, #0
 7186 0182 181C     		add	r0, r3, #0
 7187 0184 4749     		ldr	r1, .L559+36
 7188 0186 FFF7FEFF 		bl	__aeabi_fmul
 7189 018a 031C     		add	r3, r0, #0
 7190 018c 3C1C     		mov	r4, r7
 7191 018e 2634     		add	r4, r4, #38
 7192 0190 181C     		add	r0, r3, #0
 7193 0192 FFF7FEFF 		bl	__aeabi_f2uiz
 7194 0196 031C     		mov	r3, r0
 7195 0198 2380     		strh	r3, [r4]
 7196              	.L552:
1747:../Sources/TFC/TFC_CrystalClock.c ****         
1748:../Sources/TFC/TFC_CrystalClock.c ****   MCG_ATCVL = (atcv & 0xFF); //Set ATCVL to lower 8 bits of count value
 7197              		.loc 1 1748 0
 7198 019a 434B     		ldr	r3, .L559+40
 7199 019c 3A1C     		mov	r2, r7
 7200 019e 2632     		add	r2, r2, #38
 7201 01a0 1288     		ldrh	r2, [r2]
 7202 01a2 D2B2     		uxtb	r2, r2
 7203 01a4 DA72     		strb	r2, [r3, #11]
1749:../Sources/TFC/TFC_CrystalClock.c ****   MCG_ATCVH = ((atcv & 0xFF00) >> 8); // Set ATCVH to upper 8 bits of count value
 7204              		.loc 1 1749 0
 7205 01a6 404B     		ldr	r3, .L559+40
 7206 01a8 3A1C     		mov	r2, r7
 7207 01aa 2632     		add	r2, r2, #38
 7208 01ac 1288     		ldrh	r2, [r2]
 7209 01ae 120A     		lsr	r2, r2, #8
 7210 01b0 92B2     		uxth	r2, r2
 7211 01b2 D2B2     		uxtb	r2, r2
 7212 01b4 9A72     		strb	r2, [r3, #10]
1750:../Sources/TFC/TFC_CrystalClock.c **** 
1751:../Sources/TFC/TFC_CrystalClock.c **** // Enable autocal
1752:../Sources/TFC/TFC_CrystalClock.c ****   MCG_SC &= ~(MCG_SC_ATME_MASK | MCG_SC_ATMS_MASK |MCG_SC_ATMF_MASK); // clear auto trim settings
 7213              		.loc 1 1752 0
 7214 01b6 3C4B     		ldr	r3, .L559+40
 7215 01b8 3B4A     		ldr	r2, .L559+40
 7216 01ba 127A     		ldrb	r2, [r2, #8]
 7217 01bc D1B2     		uxtb	r1, r2
 7218 01be 1F22     		mov	r2, #31
 7219 01c0 0A40     		and	r2, r1
 7220 01c2 D2B2     		uxtb	r2, r2
 7221 01c4 1A72     		strb	r2, [r3, #8]
1753:../Sources/TFC/TFC_CrystalClock.c ****   temp_reg = (MCG_SC_ATME_MASK | (irc_select << MCG_SC_ATMS_SHIFT)); //Select IRC to trim and enabl
 7222              		.loc 1 1753 0
 7223 01c6 3B1C     		mov	r3, r7
 7224 01c8 0F33     		add	r3, r3, #15
 7225 01ca 1B78     		ldrb	r3, [r3]
 7226 01cc 9B01     		lsl	r3, r3, #6
 7227 01ce 8022     		mov	r2, #128
 7228 01d0 1343     		orr	r3, r2
 7229 01d2 BB61     		str	r3, [r7, #24]
1754:../Sources/TFC/TFC_CrystalClock.c ****   MCG_SC |= temp_reg;
 7230              		.loc 1 1754 0
 7231 01d4 344B     		ldr	r3, .L559+40
 7232 01d6 344A     		ldr	r2, .L559+40
 7233 01d8 127A     		ldrb	r2, [r2, #8]
 7234 01da D2B2     		uxtb	r2, r2
 7235 01dc D1B2     		uxtb	r1, r2
 7236 01de BA69     		ldr	r2, [r7, #24]
 7237 01e0 D2B2     		uxtb	r2, r2
 7238 01e2 0A43     		orr	r2, r1
 7239 01e4 D2B2     		uxtb	r2, r2
 7240 01e6 D2B2     		uxtb	r2, r2
 7241 01e8 1A72     		strb	r2, [r3, #8]
1755:../Sources/TFC/TFC_CrystalClock.c ****         
1756:../Sources/TFC/TFC_CrystalClock.c ****   while (MCG_SC & MCG_SC_ATME_MASK) {}; //poll for ATME bit to clear
 7242              		.loc 1 1756 0
 7243 01ea C046     		mov	r8, r8
 7244              	.L553:
 7245              		.loc 1 1756 0 is_stmt 0
 7246 01ec 2E4B     		ldr	r3, .L559+40
 7247 01ee 1B7A     		ldrb	r3, [r3, #8]
 7248 01f0 DBB2     		uxtb	r3, r3
 7249 01f2 DBB2     		uxtb	r3, r3
 7250 01f4 5BB2     		sxtb	r3, r3
 7251 01f6 002B     		cmp	r3, #0
 7252 01f8 F8DB     		blt	.L553
1757:../Sources/TFC/TFC_CrystalClock.c ****         
1758:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_SC & MCG_SC_ATMF_MASK) // check if error flag set
 7253              		.loc 1 1758 0 is_stmt 1
 7254 01fa 2B4B     		ldr	r3, .L559+40
 7255 01fc 1B7A     		ldrb	r3, [r3, #8]
 7256 01fe DBB2     		uxtb	r3, r3
 7257 0200 1A1C     		mov	r2, r3
 7258 0202 2023     		mov	r3, #32
 7259 0204 1340     		and	r3, r2
 7260 0206 05D0     		beq	.L554
1759:../Sources/TFC/TFC_CrystalClock.c ****   {
1760:../Sources/TFC/TFC_CrystalClock.c ****     SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7261              		.loc 1 1760 0
 7262 0208 1D4A     		ldr	r2, .L559
 7263 020a 396A     		ldr	r1, [r7, #32]
 7264 020c 1D4B     		ldr	r3, .L559+4
 7265 020e D150     		str	r1, [r2, r3]
1761:../Sources/TFC/TFC_CrystalClock.c ****     return 8;
 7266              		.loc 1 1761 0
 7267 0210 0823     		mov	r3, #8
 7268 0212 30E0     		b	.L544
 7269              	.L554:
1762:../Sources/TFC/TFC_CrystalClock.c ****   } 
1763:../Sources/TFC/TFC_CrystalClock.c ****   else 
1764:../Sources/TFC/TFC_CrystalClock.c ****   {      
1765:../Sources/TFC/TFC_CrystalClock.c ****     if (!irc_select)
 7270              		.loc 1 1765 0
 7271 0214 3B1C     		mov	r3, r7
 7272 0216 0F33     		add	r3, r3, #15
 7273 0218 1B78     		ldrb	r3, [r3]
 7274 021a 002B     		cmp	r3, #0
 7275 021c 0FD1     		bne	.L555
1766:../Sources/TFC/TFC_CrystalClock.c ****     {
1767:../Sources/TFC/TFC_CrystalClock.c ****       if ((MCG_C3 == 0xFF) || (MCG_C3 == 0))
 7276              		.loc 1 1767 0
 7277 021e 224B     		ldr	r3, .L559+40
 7278 0220 9B78     		ldrb	r3, [r3, #2]
 7279 0222 DBB2     		uxtb	r3, r3
 7280 0224 FF2B     		cmp	r3, #255
 7281 0226 04D0     		beq	.L556
 7282              		.loc 1 1767 0 is_stmt 0
 7283 0228 1F4B     		ldr	r3, .L559+40
 7284 022a 9B78     		ldrb	r3, [r3, #2]
 7285 022c DBB2     		uxtb	r3, r3
 7286 022e 002B     		cmp	r3, #0
 7287 0230 1CD1     		bne	.L557
 7288              	.L556:
1768:../Sources/TFC/TFC_CrystalClock.c ****       {
1769:../Sources/TFC/TFC_CrystalClock.c ****         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7289              		.loc 1 1769 0 is_stmt 1
 7290 0232 134A     		ldr	r2, .L559
 7291 0234 396A     		ldr	r1, [r7, #32]
 7292 0236 134B     		ldr	r3, .L559+4
 7293 0238 D150     		str	r1, [r2, r3]
1770:../Sources/TFC/TFC_CrystalClock.c ****         return 9;
 7294              		.loc 1 1770 0
 7295 023a 0923     		mov	r3, #9
 7296 023c 1BE0     		b	.L544
 7297              	.L555:
1771:../Sources/TFC/TFC_CrystalClock.c ****       }
1772:../Sources/TFC/TFC_CrystalClock.c ****     }
1773:../Sources/TFC/TFC_CrystalClock.c ****     else
1774:../Sources/TFC/TFC_CrystalClock.c ****     {
1775:../Sources/TFC/TFC_CrystalClock.c ****       if ((((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0xF) ||
 7298              		.loc 1 1775 0
 7299 023e 1A4B     		ldr	r3, .L559+40
 7300 0240 DB78     		ldrb	r3, [r3, #3]
 7301 0242 DBB2     		uxtb	r3, r3
 7302 0244 1A1C     		mov	r2, r3
 7303 0246 1E23     		mov	r3, #30
 7304 0248 1340     		and	r3, r2
 7305 024a 5B08     		lsr	r3, r3, #1
 7306 024c 0F2B     		cmp	r3, #15
 7307 024e 07D0     		beq	.L558
1776:../Sources/TFC/TFC_CrystalClock.c ****           (((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0))
 7308              		.loc 1 1776 0
 7309 0250 154B     		ldr	r3, .L559+40
 7310 0252 DB78     		ldrb	r3, [r3, #3]
 7311 0254 DBB2     		uxtb	r3, r3
 7312 0256 1A1C     		mov	r2, r3
 7313 0258 1E23     		mov	r3, #30
 7314 025a 1340     		and	r3, r2
 7315 025c 5B08     		lsr	r3, r3, #1
1775:../Sources/TFC/TFC_CrystalClock.c ****       if ((((MCG_C4 & MCG_C4_FCTRIM_MASK) >> MCG_C4_FCTRIM_SHIFT) == 0xF) ||
 7316              		.loc 1 1775 0
 7317 025e 05D1     		bne	.L557
 7318              	.L558:
1777:../Sources/TFC/TFC_CrystalClock.c ****       {
1778:../Sources/TFC/TFC_CrystalClock.c ****         SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7319              		.loc 1 1778 0
 7320 0260 074A     		ldr	r2, .L559
 7321 0262 396A     		ldr	r1, [r7, #32]
 7322 0264 074B     		ldr	r3, .L559+4
 7323 0266 D150     		str	r1, [r2, r3]
1779:../Sources/TFC/TFC_CrystalClock.c ****         return 10;
 7324              		.loc 1 1779 0
 7325 0268 0A23     		mov	r3, #10
 7326 026a 04E0     		b	.L544
 7327              	.L557:
1780:../Sources/TFC/TFC_CrystalClock.c ****       }
1781:../Sources/TFC/TFC_CrystalClock.c ****     }
1782:../Sources/TFC/TFC_CrystalClock.c ****   }
1783:../Sources/TFC/TFC_CrystalClock.c ****   SIM_CLKDIV1 = orig_div; // set SIM_CLKDIV1 back to original value
 7328              		.loc 1 1783 0
 7329 026c 044A     		ldr	r2, .L559
 7330 026e 396A     		ldr	r1, [r7, #32]
 7331 0270 044B     		ldr	r3, .L559+4
 7332 0272 D150     		str	r1, [r2, r3]
1784:../Sources/TFC/TFC_CrystalClock.c ****   return 0;
 7333              		.loc 1 1784 0
 7334 0274 0023     		mov	r3, #0
 7335              	.L544:
1785:../Sources/TFC/TFC_CrystalClock.c **** }// atc
 7336              		.loc 1 1785 0
 7337 0276 181C     		mov	r0, r3
 7338 0278 BD46     		mov	sp, r7
 7339 027a 0BB0     		add	sp, sp, #44
 7340              		@ sp needed for prologue
 7341 027c 90BD     		pop	{r4, r7, pc}
 7342              	.L560:
 7343 027e C046     		.align	2
 7344              	.L559:
 7345 0280 00700440 		.word	1074032640
 7346 0284 44100000 		.word	4164
 7347 0288 0024F400 		.word	16000000
 7348 028c FFFFF8FF 		.word	-458753
 7349 0290 FF117A00 		.word	7999999
 7350 0294 117A0000 		.word	31249
 7351 0298 96980000 		.word	39062
 7352 029c BFC62D00 		.word	2999999
 7353 02a0 404B4C00 		.word	5000000
 7354 02a4 0000A841 		.word	1101529088
 7355 02a8 00400640 		.word	1074151424
 7356              		.cfi_endproc
 7357              	.LFE24:
 7359              		.section	.text.fll_freq,"ax",%progbits
 7360              		.align	2
 7361              		.global	fll_freq
 7362              		.code	16
 7363              		.thumb_func
 7365              	fll_freq:
 7366              	.LFB25:
1786:../Sources/TFC/TFC_CrystalClock.c **** 
1787:../Sources/TFC/TFC_CrystalClock.c **** 
1788:../Sources/TFC/TFC_CrystalClock.c **** 
1789:../Sources/TFC/TFC_CrystalClock.c **** 
1790:../Sources/TFC/TFC_CrystalClock.c **** int fll_freq(int fll_ref)
1791:../Sources/TFC/TFC_CrystalClock.c **** {
 7367              		.loc 1 1791 0
 7368              		.cfi_startproc
 7369 0000 80B5     		push	{r7, lr}
 7370              	.LCFI75:
 7371              		.cfi_def_cfa_offset 8
 7372              		.cfi_offset 7, -8
 7373              		.cfi_offset 14, -4
 7374 0002 84B0     		sub	sp, sp, #16
 7375              	.LCFI76:
 7376              		.cfi_def_cfa_offset 24
 7377 0004 00AF     		add	r7, sp, #0
 7378              	.LCFI77:
 7379              		.cfi_def_cfa_register 7
 7380 0006 7860     		str	r0, [r7, #4]
1792:../Sources/TFC/TFC_CrystalClock.c ****   int fll_freq_hz;
1793:../Sources/TFC/TFC_CrystalClock.c ****   
1794:../Sources/TFC/TFC_CrystalClock.c ****   // Check that only allowed ranges have been selected
1795:../Sources/TFC/TFC_CrystalClock.c ****   if (((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) > 0x1) 
 7381              		.loc 1 1795 0
 7382 0008 684B     		ldr	r3, .L599
 7383 000a DB78     		ldrb	r3, [r3, #3]
 7384 000c DBB2     		uxtb	r3, r3
 7385 000e 1A1C     		mov	r2, r3
 7386 0010 6023     		mov	r3, #96
 7387 0012 1340     		and	r3, r2
 7388 0014 5B09     		lsr	r3, r3, #5
 7389 0016 012B     		cmp	r3, #1
 7390 0018 01D9     		bls	.L562
1796:../Sources/TFC/TFC_CrystalClock.c ****   {
1797:../Sources/TFC/TFC_CrystalClock.c ****     return 0x3B; // return error code if DRS range 2 or 3 selected
 7391              		.loc 1 1797 0
 7392 001a 3B23     		mov	r3, #59
 7393 001c C2E0     		b	.L563
 7394              	.L562:
1798:../Sources/TFC/TFC_CrystalClock.c ****   }
1799:../Sources/TFC/TFC_CrystalClock.c ****   
1800:../Sources/TFC/TFC_CrystalClock.c ****   if (MCG_C4 & MCG_C4_DMX32_MASK) // if DMX32 set
 7395              		.loc 1 1800 0
 7396 001e 634B     		ldr	r3, .L599
 7397 0020 DB78     		ldrb	r3, [r3, #3]
 7398 0022 DBB2     		uxtb	r3, r3
 7399 0024 DBB2     		uxtb	r3, r3
 7400 0026 5BB2     		sxtb	r3, r3
 7401 0028 002B     		cmp	r3, #0
 7402 002a 54DA     		bge	.L564
1801:../Sources/TFC/TFC_CrystalClock.c ****   {
1802:../Sources/TFC/TFC_CrystalClock.c ****     switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based
 7403              		.loc 1 1802 0
 7404 002c 5F4B     		ldr	r3, .L599
 7405 002e DB78     		ldrb	r3, [r3, #3]
 7406 0030 DBB2     		uxtb	r3, r3
 7407 0032 1A1C     		mov	r2, r3
 7408 0034 6023     		mov	r3, #96
 7409 0036 1340     		and	r3, r2
 7410 0038 5B09     		lsr	r3, r3, #5
 7411 003a 012B     		cmp	r3, #1
 7412 003c 17D0     		beq	.L567
 7413 003e 04D3     		bcc	.L566
 7414 0040 022B     		cmp	r3, #2
 7415 0042 26D0     		beq	.L568
 7416 0044 032B     		cmp	r3, #3
 7417 0046 35D0     		beq	.L569
 7418 0048 ABE0     		b	.L578
 7419              	.L566:
1803:../Sources/TFC/TFC_CrystalClock.c ****     {
1804:../Sources/TFC/TFC_CrystalClock.c ****     case 0:
1805:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 732);
 7420              		.loc 1 1805 0
 7421 004a 7B68     		ldr	r3, [r7, #4]
 7422 004c B722     		mov	r2, #183
 7423 004e 9200     		lsl	r2, r2, #2
 7424 0050 5343     		mul	r3, r2
 7425 0052 FB60     		str	r3, [r7, #12]
1806:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 20000000) {return 0x33;}
 7426              		.loc 1 1806 0
 7427 0054 FA68     		ldr	r2, [r7, #12]
 7428 0056 564B     		ldr	r3, .L599+4
 7429 0058 9A42     		cmp	r2, r3
 7430 005a 01DC     		bgt	.L570
 7431              		.loc 1 1806 0 is_stmt 0
 7432 005c 3323     		mov	r3, #51
 7433 005e A1E0     		b	.L563
 7434              	.L570:
1807:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 25000000) {return 0x34;}
 7435              		.loc 1 1807 0 is_stmt 1
 7436 0060 FA68     		ldr	r2, [r7, #12]
 7437 0062 544B     		ldr	r3, .L599+8
 7438 0064 9A42     		cmp	r2, r3
 7439 0066 00DC     		bgt	.LCB7169
 7440 0068 8CE0     		b	.L591	@long jump
 7441              	.LCB7169:
 7442              		.loc 1 1807 0 is_stmt 0
 7443 006a 3423     		mov	r3, #52
 7444 006c 9AE0     		b	.L563
 7445              	.L567:
1808:../Sources/TFC/TFC_CrystalClock.c ****       break;
1809:../Sources/TFC/TFC_CrystalClock.c ****     case 1:
1810:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1464);
 7446              		.loc 1 1810 0 is_stmt 1
 7447 006e 7B68     		ldr	r3, [r7, #4]
 7448 0070 B722     		mov	r2, #183
 7449 0072 D200     		lsl	r2, r2, #3
 7450 0074 5343     		mul	r3, r2
 7451 0076 FB60     		str	r3, [r7, #12]
1811:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 40000000) {return 0x35;}
 7452              		.loc 1 1811 0
 7453 0078 FA68     		ldr	r2, [r7, #12]
 7454 007a 4F4B     		ldr	r3, .L599+12
 7455 007c 9A42     		cmp	r2, r3
 7456 007e 01DC     		bgt	.L572
 7457              		.loc 1 1811 0 is_stmt 0
 7458 0080 3523     		mov	r3, #53
 7459 0082 8FE0     		b	.L563
 7460              	.L572:
1812:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 50000000) {return 0x36;}
 7461              		.loc 1 1812 0 is_stmt 1
 7462 0084 FA68     		ldr	r2, [r7, #12]
 7463 0086 4D4B     		ldr	r3, .L599+16
 7464 0088 9A42     		cmp	r2, r3
 7465 008a 00DC     		bgt	.LCB7192
 7466 008c 7CE0     		b	.L592	@long jump
 7467              	.LCB7192:
 7468              		.loc 1 1812 0 is_stmt 0
 7469 008e 3623     		mov	r3, #54
 7470 0090 88E0     		b	.L563
 7471              	.L568:
1813:../Sources/TFC/TFC_CrystalClock.c ****       break;
1814:../Sources/TFC/TFC_CrystalClock.c ****     case 2:
1815:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2197);
 7472              		.loc 1 1815 0 is_stmt 1
 7473 0092 7B68     		ldr	r3, [r7, #4]
 7474 0094 4A4A     		ldr	r2, .L599+20
 7475 0096 5343     		mul	r3, r2
 7476 0098 FB60     		str	r3, [r7, #12]
1816:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 60000000) {return 0x37;}
 7477              		.loc 1 1816 0
 7478 009a FA68     		ldr	r2, [r7, #12]
 7479 009c 494B     		ldr	r3, .L599+24
 7480 009e 9A42     		cmp	r2, r3
 7481 00a0 01DC     		bgt	.L574
 7482              		.loc 1 1816 0 is_stmt 0
 7483 00a2 3723     		mov	r3, #55
 7484 00a4 7EE0     		b	.L563
 7485              	.L574:
1817:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 75000000) {return 0x38;}
 7486              		.loc 1 1817 0 is_stmt 1
 7487 00a6 FA68     		ldr	r2, [r7, #12]
 7488 00a8 474B     		ldr	r3, .L599+28
 7489 00aa 9A42     		cmp	r2, r3
 7490 00ac 00DC     		bgt	.LCB7214
 7491 00ae 6DE0     		b	.L593	@long jump
 7492              	.LCB7214:
 7493              		.loc 1 1817 0 is_stmt 0
 7494 00b0 3823     		mov	r3, #56
 7495 00b2 77E0     		b	.L563
 7496              	.L569:
1818:../Sources/TFC/TFC_CrystalClock.c ****       break;
1819:../Sources/TFC/TFC_CrystalClock.c ****     case 3:
1820:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2929);
 7497              		.loc 1 1820 0 is_stmt 1
 7498 00b4 7B68     		ldr	r3, [r7, #4]
 7499 00b6 454A     		ldr	r2, .L599+32
 7500 00b8 5343     		mul	r3, r2
 7501 00ba FB60     		str	r3, [r7, #12]
1821:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 80000000) {return 0x39;}
 7502              		.loc 1 1821 0
 7503 00bc FA68     		ldr	r2, [r7, #12]
 7504 00be 444B     		ldr	r3, .L599+36
 7505 00c0 9A42     		cmp	r2, r3
 7506 00c2 01DC     		bgt	.L576
 7507              		.loc 1 1821 0 is_stmt 0
 7508 00c4 3923     		mov	r3, #57
 7509 00c6 6DE0     		b	.L563
 7510              	.L576:
1822:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 100000000) {return 0x3A;}
 7511              		.loc 1 1822 0 is_stmt 1
 7512 00c8 FA68     		ldr	r2, [r7, #12]
 7513 00ca 424B     		ldr	r3, .L599+40
 7514 00cc 9A42     		cmp	r2, r3
 7515 00ce 00DC     		bgt	.LCB7236
 7516 00d0 5EE0     		b	.L594	@long jump
 7517              	.LCB7236:
 7518              		.loc 1 1822 0 is_stmt 0
 7519 00d2 3A23     		mov	r3, #58
 7520 00d4 66E0     		b	.L563
 7521              	.L564:
1823:../Sources/TFC/TFC_CrystalClock.c ****       break;
1824:../Sources/TFC/TFC_CrystalClock.c ****     }
1825:../Sources/TFC/TFC_CrystalClock.c ****   }
1826:../Sources/TFC/TFC_CrystalClock.c ****   else // if DMX32 = 0
1827:../Sources/TFC/TFC_CrystalClock.c ****   {
1828:../Sources/TFC/TFC_CrystalClock.c ****     switch ((MCG_C4 & MCG_C4_DRST_DRS_MASK) >> MCG_C4_DRST_DRS_SHIFT) // determine multiplier based
 7522              		.loc 1 1828 0 is_stmt 1
 7523 00d6 354B     		ldr	r3, .L599
 7524 00d8 DB78     		ldrb	r3, [r3, #3]
 7525 00da DBB2     		uxtb	r3, r3
 7526 00dc 1A1C     		mov	r2, r3
 7527 00de 6023     		mov	r3, #96
 7528 00e0 1340     		and	r3, r2
 7529 00e2 5B09     		lsr	r3, r3, #5
 7530 00e4 012B     		cmp	r3, #1
 7531 00e6 17D0     		beq	.L580
 7532 00e8 04D3     		bcc	.L579
 7533 00ea 022B     		cmp	r3, #2
 7534 00ec 26D0     		beq	.L581
 7535 00ee 032B     		cmp	r3, #3
 7536 00f0 36D0     		beq	.L582
 7537 00f2 56E0     		b	.L578
 7538              	.L579:
1829:../Sources/TFC/TFC_CrystalClock.c ****     {
1830:../Sources/TFC/TFC_CrystalClock.c ****     case 0:
1831:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 640);
 7539              		.loc 1 1831 0
 7540 00f4 7A68     		ldr	r2, [r7, #4]
 7541 00f6 131C     		mov	r3, r2
 7542 00f8 9B00     		lsl	r3, r3, #2
 7543 00fa 9B18     		add	r3, r3, r2
 7544 00fc DB01     		lsl	r3, r3, #7
 7545 00fe FB60     		str	r3, [r7, #12]
1832:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 20000000) {return 0x33;}
 7546              		.loc 1 1832 0
 7547 0100 FA68     		ldr	r2, [r7, #12]
 7548 0102 2B4B     		ldr	r3, .L599+4
 7549 0104 9A42     		cmp	r2, r3
 7550 0106 01DC     		bgt	.L583
 7551              		.loc 1 1832 0 is_stmt 0
 7552 0108 3323     		mov	r3, #51
 7553 010a 4BE0     		b	.L563
 7554              	.L583:
1833:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 25000000) {return 0x34;}
 7555              		.loc 1 1833 0 is_stmt 1
 7556 010c FA68     		ldr	r2, [r7, #12]
 7557 010e 294B     		ldr	r3, .L599+8
 7558 0110 9A42     		cmp	r2, r3
 7559 0112 3FDD     		ble	.L595
 7560              		.loc 1 1833 0 is_stmt 0
 7561 0114 3423     		mov	r3, #52
 7562 0116 45E0     		b	.L563
 7563              	.L580:
1834:../Sources/TFC/TFC_CrystalClock.c ****       break;
1835:../Sources/TFC/TFC_CrystalClock.c ****     case 1:
1836:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1280);
 7564              		.loc 1 1836 0 is_stmt 1
 7565 0118 7A68     		ldr	r2, [r7, #4]
 7566 011a 131C     		mov	r3, r2
 7567 011c 9B00     		lsl	r3, r3, #2
 7568 011e 9B18     		add	r3, r3, r2
 7569 0120 1B02     		lsl	r3, r3, #8
 7570 0122 FB60     		str	r3, [r7, #12]
1837:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 40000000) {return 0x35;}
 7571              		.loc 1 1837 0
 7572 0124 FA68     		ldr	r2, [r7, #12]
 7573 0126 244B     		ldr	r3, .L599+12
 7574 0128 9A42     		cmp	r2, r3
 7575 012a 01DC     		bgt	.L585
 7576              		.loc 1 1837 0 is_stmt 0
 7577 012c 3523     		mov	r3, #53
 7578 012e 39E0     		b	.L563
 7579              	.L585:
1838:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 50000000) {return 0x36;}
 7580              		.loc 1 1838 0 is_stmt 1
 7581 0130 FA68     		ldr	r2, [r7, #12]
 7582 0132 224B     		ldr	r3, .L599+16
 7583 0134 9A42     		cmp	r2, r3
 7584 0136 2FDD     		ble	.L596
 7585              		.loc 1 1838 0 is_stmt 0
 7586 0138 3623     		mov	r3, #54
 7587 013a 33E0     		b	.L563
 7588              	.L581:
1839:../Sources/TFC/TFC_CrystalClock.c ****       break;
1840:../Sources/TFC/TFC_CrystalClock.c ****     case 2:
1841:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 1920);
 7589              		.loc 1 1841 0 is_stmt 1
 7590 013c 7A68     		ldr	r2, [r7, #4]
 7591 013e 131C     		mov	r3, r2
 7592 0140 1B01     		lsl	r3, r3, #4
 7593 0142 9B1A     		sub	r3, r3, r2
 7594 0144 DB01     		lsl	r3, r3, #7
 7595 0146 FB60     		str	r3, [r7, #12]
1842:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 60000000) {return 0x37;}
 7596              		.loc 1 1842 0
 7597 0148 FA68     		ldr	r2, [r7, #12]
 7598 014a 1E4B     		ldr	r3, .L599+24
 7599 014c 9A42     		cmp	r2, r3
 7600 014e 01DC     		bgt	.L587
 7601              		.loc 1 1842 0 is_stmt 0
 7602 0150 3723     		mov	r3, #55
 7603 0152 27E0     		b	.L563
 7604              	.L587:
1843:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 75000000) {return 0x38;}
 7605              		.loc 1 1843 0 is_stmt 1
 7606 0154 FA68     		ldr	r2, [r7, #12]
 7607 0156 1C4B     		ldr	r3, .L599+28
 7608 0158 9A42     		cmp	r2, r3
 7609 015a 1FDD     		ble	.L597
 7610              		.loc 1 1843 0 is_stmt 0
 7611 015c 3823     		mov	r3, #56
 7612 015e 21E0     		b	.L563
 7613              	.L582:
1844:../Sources/TFC/TFC_CrystalClock.c ****       break;
1845:../Sources/TFC/TFC_CrystalClock.c ****     case 3:
1846:../Sources/TFC/TFC_CrystalClock.c ****       fll_freq_hz = (fll_ref * 2560);
 7614              		.loc 1 1846 0 is_stmt 1
 7615 0160 7A68     		ldr	r2, [r7, #4]
 7616 0162 131C     		mov	r3, r2
 7617 0164 9B00     		lsl	r3, r3, #2
 7618 0166 9B18     		add	r3, r3, r2
 7619 0168 5B02     		lsl	r3, r3, #9
 7620 016a FB60     		str	r3, [r7, #12]
1847:../Sources/TFC/TFC_CrystalClock.c ****       if (fll_freq_hz < 80000000) {return 0x39;}
 7621              		.loc 1 1847 0
 7622 016c FA68     		ldr	r2, [r7, #12]
 7623 016e 184B     		ldr	r3, .L599+36
 7624 0170 9A42     		cmp	r2, r3
 7625 0172 01DC     		bgt	.L589
 7626              		.loc 1 1847 0 is_stmt 0
 7627 0174 3923     		mov	r3, #57
 7628 0176 15E0     		b	.L563
 7629              	.L589:
1848:../Sources/TFC/TFC_CrystalClock.c ****       else if (fll_freq_hz > 100000000) {return 0x3A;}
 7630              		.loc 1 1848 0 is_stmt 1
 7631 0178 FA68     		ldr	r2, [r7, #12]
 7632 017a 164B     		ldr	r3, .L599+40
 7633 017c 9A42     		cmp	r2, r3
 7634 017e 0FDD     		ble	.L598
 7635              		.loc 1 1848 0 is_stmt 0
 7636 0180 3A23     		mov	r3, #58
 7637 0182 0FE0     		b	.L563
 7638              	.L591:
1808:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7639              		.loc 1 1808 0 is_stmt 1
 7640 0184 C046     		mov	r8, r8
 7641 0186 0CE0     		b	.L578
 7642              	.L592:
1813:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7643              		.loc 1 1813 0
 7644 0188 C046     		mov	r8, r8
 7645 018a 0AE0     		b	.L578
 7646              	.L593:
1818:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7647              		.loc 1 1818 0
 7648 018c C046     		mov	r8, r8
 7649 018e 08E0     		b	.L578
 7650              	.L594:
1823:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7651              		.loc 1 1823 0
 7652 0190 C046     		mov	r8, r8
 7653 0192 06E0     		b	.L578
 7654              	.L595:
1834:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7655              		.loc 1 1834 0
 7656 0194 C046     		mov	r8, r8
 7657 0196 04E0     		b	.L578
 7658              	.L596:
1839:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7659              		.loc 1 1839 0
 7660 0198 C046     		mov	r8, r8
 7661 019a 02E0     		b	.L578
 7662              	.L597:
1844:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7663              		.loc 1 1844 0
 7664 019c C046     		mov	r8, r8
 7665 019e 00E0     		b	.L578
 7666              	.L598:
1849:../Sources/TFC/TFC_CrystalClock.c ****       break;
 7667              		.loc 1 1849 0
 7668 01a0 C046     		mov	r8, r8
 7669              	.L578:
1850:../Sources/TFC/TFC_CrystalClock.c ****     }
1851:../Sources/TFC/TFC_CrystalClock.c ****   }    
1852:../Sources/TFC/TFC_CrystalClock.c ****   return fll_freq_hz;
 7670              		.loc 1 1852 0
 7671 01a2 FB68     		ldr	r3, [r7, #12]
 7672              	.L563:
1853:../Sources/TFC/TFC_CrystalClock.c **** } // fll_freq
 7673              		.loc 1 1853 0
 7674 01a4 181C     		mov	r0, r3
 7675 01a6 BD46     		mov	sp, r7
 7676 01a8 04B0     		add	sp, sp, #16
 7677              		@ sp needed for prologue
 7678 01aa 80BD     		pop	{r7, pc}
 7679              	.L600:
 7680              		.align	2
 7681              	.L599:
 7682 01ac 00400640 		.word	1074151424
 7683 01b0 FF2C3101 		.word	19999999
 7684 01b4 40787D01 		.word	25000000
 7685 01b8 FF596202 		.word	39999999
 7686 01bc 80F0FA02 		.word	50000000
 7687 01c0 95080000 		.word	2197
 7688 01c4 FF869303 		.word	59999999
 7689 01c8 C0687804 		.word	75000000
 7690 01cc 710B0000 		.word	2929
 7691 01d0 FFB3C404 		.word	79999999
 7692 01d4 00E1F505 		.word	100000000
 7693              		.cfi_endproc
 7694              	.LFE25:
 7696              		.section	.text.what_mcg_mode,"ax",%progbits
 7697              		.align	2
 7698              		.global	what_mcg_mode
 7699              		.code	16
 7700              		.thumb_func
 7702              	what_mcg_mode:
 7703              	.LFB26:
1854:../Sources/TFC/TFC_CrystalClock.c **** 
1855:../Sources/TFC/TFC_CrystalClock.c **** 
1856:../Sources/TFC/TFC_CrystalClock.c **** unsigned char what_mcg_mode(void)
1857:../Sources/TFC/TFC_CrystalClock.c **** {
 7704              		.loc 1 1857 0
 7705              		.cfi_startproc
 7706 0000 80B5     		push	{r7, lr}
 7707              	.LCFI78:
 7708              		.cfi_def_cfa_offset 8
 7709              		.cfi_offset 7, -8
 7710              		.cfi_offset 14, -4
 7711 0002 00AF     		add	r7, sp, #0
 7712              	.LCFI79:
 7713              		.cfi_def_cfa_register 7
1858:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FEI mode
1859:../Sources/TFC/TFC_CrystalClock.c ****   if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) &&      // check CLKS mux has selc
 7714              		.loc 1 1859 0
 7715 0004 724B     		ldr	r3, .L611
 7716 0006 9B79     		ldrb	r3, [r3, #6]
 7717 0008 DBB2     		uxtb	r3, r3
 7718 000a 1A1C     		mov	r2, r3
 7719 000c 0C23     		mov	r3, #12
 7720 000e 1340     		and	r3, r2
 7721 0010 9B08     		lsr	r3, r3, #2
 7722 0012 0FD1     		bne	.L602
1860:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                     // check FLL ref is intern
 7723              		.loc 1 1860 0
 7724 0014 6E4B     		ldr	r3, .L611
 7725 0016 9B79     		ldrb	r3, [r3, #6]
 7726 0018 DBB2     		uxtb	r3, r3
 7727 001a 1A1C     		mov	r2, r3
 7728 001c 1023     		mov	r3, #16
 7729 001e 1340     		and	r3, r2
1859:../Sources/TFC/TFC_CrystalClock.c ****   if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) &&      // check CLKS mux has selc
 7730              		.loc 1 1859 0
 7731 0020 08D0     		beq	.L602
1861:../Sources/TFC/TFC_CrystalClock.c ****       (!(MCG_S & MCG_S_PLLST_MASK)))                                     // check PLLS mux has sele
 7732              		.loc 1 1861 0
 7733 0022 6B4B     		ldr	r3, .L611
 7734 0024 9B79     		ldrb	r3, [r3, #6]
 7735 0026 DBB2     		uxtb	r3, r3
 7736 0028 1A1C     		mov	r2, r3
 7737 002a 2023     		mov	r3, #32
 7738 002c 1340     		and	r3, r2
1860:../Sources/TFC/TFC_CrystalClock.c ****       (MCG_S & MCG_S_IREFST_MASK) &&                                     // check FLL ref is intern
 7739              		.loc 1 1860 0
 7740 002e 01D1     		bne	.L602
1862:../Sources/TFC/TFC_CrystalClock.c ****   {
1863:../Sources/TFC/TFC_CrystalClock.c ****     return FEI;                                                          // return FEI code
 7741              		.loc 1 1863 0
 7742 0030 0323     		mov	r3, #3
 7743 0032 CAE0     		b	.L603
 7744              	.L602:
1864:../Sources/TFC/TFC_CrystalClock.c ****   }
1865:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PEE mode
1866:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selc
 7745              		.loc 1 1866 0
 7746 0034 664B     		ldr	r3, .L611
 7747 0036 9B79     		ldrb	r3, [r3, #6]
 7748 0038 DBB2     		uxtb	r3, r3
 7749 003a 1A1C     		mov	r2, r3
 7750 003c 0C23     		mov	r3, #12
 7751 003e 1340     		and	r3, r2
 7752 0040 9B08     		lsr	r3, r3, #2
 7753 0042 032B     		cmp	r3, #3
 7754 0044 0FD1     		bne	.L604
1867:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7755              		.loc 1 1867 0
 7756 0046 624B     		ldr	r3, .L611
 7757 0048 9B79     		ldrb	r3, [r3, #6]
 7758 004a DBB2     		uxtb	r3, r3
 7759 004c 1A1C     		mov	r2, r3
 7760 004e 1023     		mov	r3, #16
 7761 0050 1340     		and	r3, r2
1866:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) && // check CLKS mux has selc
 7762              		.loc 1 1866 0
 7763 0052 08D1     		bne	.L604
1868:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK))                                    // check PLLS mux has sele
 7764              		.loc 1 1868 0
 7765 0054 5E4B     		ldr	r3, .L611
 7766 0056 9B79     		ldrb	r3, [r3, #6]
 7767 0058 DBB2     		uxtb	r3, r3
 7768 005a 1A1C     		mov	r2, r3
 7769 005c 2023     		mov	r3, #32
 7770 005e 1340     		and	r3, r2
1867:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7771              		.loc 1 1867 0
 7772 0060 01D0     		beq	.L604
1869:../Sources/TFC/TFC_CrystalClock.c ****   {
1870:../Sources/TFC/TFC_CrystalClock.c ****     return PEE;                                                          // return PEE code
 7773              		.loc 1 1870 0
 7774 0062 0823     		mov	r3, #8
 7775 0064 B1E0     		b	.L603
 7776              	.L604:
1871:../Sources/TFC/TFC_CrystalClock.c ****   }
1872:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in PBE mode
1873:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7777              		.loc 1 1873 0
 7778 0066 5A4B     		ldr	r3, .L611
 7779 0068 9B79     		ldrb	r3, [r3, #6]
 7780 006a DBB2     		uxtb	r3, r3
 7781 006c 1A1C     		mov	r2, r3
 7782 006e 0C23     		mov	r3, #12
 7783 0070 1340     		and	r3, r2
 7784 0072 9B08     		lsr	r3, r3, #2
 7785 0074 022B     		cmp	r3, #2
 7786 0076 16D1     		bne	.L605
1874:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7787              		.loc 1 1874 0
 7788 0078 554B     		ldr	r3, .L611
 7789 007a 9B79     		ldrb	r3, [r3, #6]
 7790 007c DBB2     		uxtb	r3, r3
 7791 007e 1A1C     		mov	r2, r3
 7792 0080 1023     		mov	r3, #16
 7793 0082 1340     		and	r3, r2
1873:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7794              		.loc 1 1873 0
 7795 0084 0FD1     		bne	.L605
1875:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK) &&                                  // check PLLS mux has sele
 7796              		.loc 1 1875 0
 7797 0086 524B     		ldr	r3, .L611
 7798 0088 9B79     		ldrb	r3, [r3, #6]
 7799 008a DBB2     		uxtb	r3, r3
 7800 008c 1A1C     		mov	r2, r3
 7801 008e 2023     		mov	r3, #32
 7802 0090 1340     		and	r3, r2
1874:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7803              		.loc 1 1874 0
 7804 0092 08D0     		beq	.L605
1876:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is
 7805              		.loc 1 1876 0
 7806 0094 4E4B     		ldr	r3, .L611
 7807 0096 5B78     		ldrb	r3, [r3, #1]
 7808 0098 DBB2     		uxtb	r3, r3
 7809 009a 1A1C     		mov	r2, r3
 7810 009c 0223     		mov	r3, #2
 7811 009e 1340     		and	r3, r2
1875:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_PLLST_MASK) &&                                  // check PLLS mux has sele
 7812              		.loc 1 1875 0
 7813 00a0 01D1     		bne	.L605
1877:../Sources/TFC/TFC_CrystalClock.c ****   {
1878:../Sources/TFC/TFC_CrystalClock.c ****     return PBE;                                                          // return PBE code
 7814              		.loc 1 1878 0
 7815 00a2 0723     		mov	r3, #7
 7816 00a4 91E0     		b	.L603
 7817              	.L605:
1879:../Sources/TFC/TFC_CrystalClock.c ****   }
1880:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in FBE mode
1881:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7818              		.loc 1 1881 0
 7819 00a6 4A4B     		ldr	r3, .L611
 7820 00a8 9B79     		ldrb	r3, [r3, #6]
 7821 00aa DBB2     		uxtb	r3, r3
 7822 00ac 1A1C     		mov	r2, r3
 7823 00ae 0C23     		mov	r3, #12
 7824 00b0 1340     		and	r3, r2
 7825 00b2 9B08     		lsr	r3, r3, #2
 7826 00b4 022B     		cmp	r3, #2
 7827 00b6 16D1     		bne	.L606
1882:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7828              		.loc 1 1882 0
 7829 00b8 454B     		ldr	r3, .L611
 7830 00ba 9B79     		ldrb	r3, [r3, #6]
 7831 00bc DBB2     		uxtb	r3, r3
 7832 00be 1A1C     		mov	r2, r3
 7833 00c0 1023     		mov	r3, #16
 7834 00c2 1340     		and	r3, r2
1881:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7835              		.loc 1 1881 0
 7836 00c4 0FD1     		bne	.L606
1883:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7837              		.loc 1 1883 0
 7838 00c6 424B     		ldr	r3, .L611
 7839 00c8 9B79     		ldrb	r3, [r3, #6]
 7840 00ca DBB2     		uxtb	r3, r3
 7841 00cc 1A1C     		mov	r2, r3
 7842 00ce 2023     		mov	r3, #32
 7843 00d0 1340     		and	r3, r2
1882:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7844              		.loc 1 1882 0
 7845 00d2 08D1     		bne	.L606
1884:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check MCG_C2[LP] bit is
 7846              		.loc 1 1884 0
 7847 00d4 3E4B     		ldr	r3, .L611
 7848 00d6 5B78     		ldrb	r3, [r3, #1]
 7849 00d8 DBB2     		uxtb	r3, r3
 7850 00da 1A1C     		mov	r2, r3
 7851 00dc 0223     		mov	r3, #2
 7852 00de 1340     		and	r3, r2
1883:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7853              		.loc 1 1883 0
 7854 00e0 01D1     		bne	.L606
1885:../Sources/TFC/TFC_CrystalClock.c ****   {
1886:../Sources/TFC/TFC_CrystalClock.c ****     return FBE;                                                          // return FBE code
 7855              		.loc 1 1886 0
 7856 00e2 0523     		mov	r3, #5
 7857 00e4 71E0     		b	.L603
 7858              	.L606:
1887:../Sources/TFC/TFC_CrystalClock.c ****   }
1888:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in BLPE mode
1889:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7859              		.loc 1 1889 0
 7860 00e6 3A4B     		ldr	r3, .L611
 7861 00e8 9B79     		ldrb	r3, [r3, #6]
 7862 00ea DBB2     		uxtb	r3, r3
 7863 00ec 1A1C     		mov	r2, r3
 7864 00ee 0C23     		mov	r3, #12
 7865 00f0 1340     		and	r3, r2
 7866 00f2 9B08     		lsr	r3, r3, #2
 7867 00f4 022B     		cmp	r3, #2
 7868 00f6 0FD1     		bne	.L607
1890:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7869              		.loc 1 1890 0
 7870 00f8 354B     		ldr	r3, .L611
 7871 00fa 9B79     		ldrb	r3, [r3, #6]
 7872 00fc DBB2     		uxtb	r3, r3
 7873 00fe 1A1C     		mov	r2, r3
 7874 0100 1023     		mov	r3, #16
 7875 0102 1340     		and	r3, r2
1889:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x2) && // check CLKS mux has selc
 7876              		.loc 1 1889 0
 7877 0104 08D1     		bne	.L607
1891:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_C2 & MCG_C2_LP_MASK))                                     // check MCG_C2[LP] bit is
 7878              		.loc 1 1891 0
 7879 0106 324B     		ldr	r3, .L611
 7880 0108 5B78     		ldrb	r3, [r3, #1]
 7881 010a DBB2     		uxtb	r3, r3
 7882 010c 1A1C     		mov	r2, r3
 7883 010e 0223     		mov	r3, #2
 7884 0110 1340     		and	r3, r2
1890:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7885              		.loc 1 1890 0
 7886 0112 01D0     		beq	.L607
1892:../Sources/TFC/TFC_CrystalClock.c ****   {
1893:../Sources/TFC/TFC_CrystalClock.c ****     return BLPE;                                                         // return BLPE code
 7887              		.loc 1 1893 0
 7888 0114 0623     		mov	r3, #6
 7889 0116 58E0     		b	.L603
 7890              	.L607:
1894:../Sources/TFC/TFC_CrystalClock.c ****   }
1895:../Sources/TFC/TFC_CrystalClock.c ****   // check if in BLPI mode
1896:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7891              		.loc 1 1896 0
 7892 0118 2D4B     		ldr	r3, .L611
 7893 011a 9B79     		ldrb	r3, [r3, #6]
 7894 011c DBB2     		uxtb	r3, r3
 7895 011e 1A1C     		mov	r2, r3
 7896 0120 0C23     		mov	r3, #12
 7897 0122 1340     		and	r3, r2
 7898 0124 9B08     		lsr	r3, r3, #2
 7899 0126 012B     		cmp	r3, #1
 7900 0128 16D1     		bne	.L608
1897:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7901              		.loc 1 1897 0
 7902 012a 294B     		ldr	r3, .L611
 7903 012c 9B79     		ldrb	r3, [r3, #6]
 7904 012e DBB2     		uxtb	r3, r3
 7905 0130 1A1C     		mov	r2, r3
 7906 0132 1023     		mov	r3, #16
 7907 0134 1340     		and	r3, r2
1896:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7908              		.loc 1 1896 0
 7909 0136 0FD0     		beq	.L608
1898:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7910              		.loc 1 1898 0
 7911 0138 254B     		ldr	r3, .L611
 7912 013a 9B79     		ldrb	r3, [r3, #6]
 7913 013c DBB2     		uxtb	r3, r3
 7914 013e 1A1C     		mov	r2, r3
 7915 0140 2023     		mov	r3, #32
 7916 0142 1340     		and	r3, r2
1897:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7917              		.loc 1 1897 0
 7918 0144 08D1     		bne	.L608
1899:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_C2 & MCG_C2_LP_MASK))                                     // check LP bit is set
 7919              		.loc 1 1899 0
 7920 0146 224B     		ldr	r3, .L611
 7921 0148 5B78     		ldrb	r3, [r3, #1]
 7922 014a DBB2     		uxtb	r3, r3
 7923 014c 1A1C     		mov	r2, r3
 7924 014e 0223     		mov	r3, #2
 7925 0150 1340     		and	r3, r2
1898:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7926              		.loc 1 1898 0
 7927 0152 01D0     		beq	.L608
1900:../Sources/TFC/TFC_CrystalClock.c ****   {
1901:../Sources/TFC/TFC_CrystalClock.c ****     return BLPI;                                                         // return BLPI code
 7928              		.loc 1 1901 0
 7929 0154 0123     		mov	r3, #1
 7930 0156 38E0     		b	.L603
 7931              	.L608:
1902:../Sources/TFC/TFC_CrystalClock.c ****   }
1903:../Sources/TFC/TFC_CrystalClock.c ****   // check if in FBI mode
1904:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7932              		.loc 1 1904 0
 7933 0158 1D4B     		ldr	r3, .L611
 7934 015a 9B79     		ldrb	r3, [r3, #6]
 7935 015c DBB2     		uxtb	r3, r3
 7936 015e 1A1C     		mov	r2, r3
 7937 0160 0C23     		mov	r3, #12
 7938 0162 1340     		and	r3, r2
 7939 0164 9B08     		lsr	r3, r3, #2
 7940 0166 012B     		cmp	r3, #1
 7941 0168 16D1     		bne	.L609
1905:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7942              		.loc 1 1905 0
 7943 016a 194B     		ldr	r3, .L611
 7944 016c 9B79     		ldrb	r3, [r3, #6]
 7945 016e DBB2     		uxtb	r3, r3
 7946 0170 1A1C     		mov	r2, r3
 7947 0172 1023     		mov	r3, #16
 7948 0174 1340     		and	r3, r2
1904:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x1) && // check CLKS mux has selc
 7949              		.loc 1 1904 0
 7950 0176 0FD0     		beq	.L609
1906:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7951              		.loc 1 1906 0
 7952 0178 154B     		ldr	r3, .L611
 7953 017a 9B79     		ldrb	r3, [r3, #6]
 7954 017c DBB2     		uxtb	r3, r3
 7955 017e 1A1C     		mov	r2, r3
 7956 0180 2023     		mov	r3, #32
 7957 0182 1340     		and	r3, r2
1905:../Sources/TFC/TFC_CrystalClock.c ****           (MCG_S & MCG_S_IREFST_MASK) &&                                 // check FLL ref is intern
 7958              		.loc 1 1905 0
 7959 0184 08D1     		bne	.L609
1907:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_C2 & MCG_C2_LP_MASK)))                                  // check LP bit is clear
 7960              		.loc 1 1907 0
 7961 0186 124B     		ldr	r3, .L611
 7962 0188 5B78     		ldrb	r3, [r3, #1]
 7963 018a DBB2     		uxtb	r3, r3
 7964 018c 1A1C     		mov	r2, r3
 7965 018e 0223     		mov	r3, #2
 7966 0190 1340     		and	r3, r2
1906:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)) &&                               // check PLLS mux has sele
 7967              		.loc 1 1906 0
 7968 0192 01D1     		bne	.L609
1908:../Sources/TFC/TFC_CrystalClock.c ****   {  
1909:../Sources/TFC/TFC_CrystalClock.c ****     return FBI;                                                          // return FBI code 
 7969              		.loc 1 1909 0
 7970 0194 0223     		mov	r3, #2
 7971 0196 18E0     		b	.L603
 7972              	.L609:
1910:../Sources/TFC/TFC_CrystalClock.c ****   }
1911:../Sources/TFC/TFC_CrystalClock.c ****   // Check MCG is in FEE mode
1912:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selc
 7973              		.loc 1 1912 0
 7974 0198 0D4B     		ldr	r3, .L611
 7975 019a 9B79     		ldrb	r3, [r3, #6]
 7976 019c DBB2     		uxtb	r3, r3
 7977 019e 1A1C     		mov	r2, r3
 7978 01a0 0C23     		mov	r3, #12
 7979 01a2 1340     		and	r3, r2
 7980 01a4 9B08     		lsr	r3, r3, #2
 7981 01a6 0FD1     		bne	.L610
1913:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7982              		.loc 1 1913 0
 7983 01a8 094B     		ldr	r3, .L611
 7984 01aa 9B79     		ldrb	r3, [r3, #6]
 7985 01ac DBB2     		uxtb	r3, r3
 7986 01ae 1A1C     		mov	r2, r3
 7987 01b0 1023     		mov	r3, #16
 7988 01b2 1340     		and	r3, r2
1912:../Sources/TFC/TFC_CrystalClock.c ****   else if ((((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x0) && // check CLKS mux has selc
 7989              		.loc 1 1912 0
 7990 01b4 08D1     		bne	.L610
1914:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_PLLST_MASK)))                                 // check PLLS mux has sele
 7991              		.loc 1 1914 0
 7992 01b6 064B     		ldr	r3, .L611
 7993 01b8 9B79     		ldrb	r3, [r3, #6]
 7994 01ba DBB2     		uxtb	r3, r3
 7995 01bc 1A1C     		mov	r2, r3
 7996 01be 2023     		mov	r3, #32
 7997 01c0 1340     		and	r3, r2
1913:../Sources/TFC/TFC_CrystalClock.c ****           (!(MCG_S & MCG_S_IREFST_MASK)) &&                              // check FLL ref is extern
 7998              		.loc 1 1913 0
 7999 01c2 01D1     		bne	.L610
1915:../Sources/TFC/TFC_CrystalClock.c ****   {
1916:../Sources/TFC/TFC_CrystalClock.c ****     return FEE;                                                          // return FEE code
 8000              		.loc 1 1916 0
 8001 01c4 0423     		mov	r3, #4
 8002 01c6 00E0     		b	.L603
 8003              	.L610:
1917:../Sources/TFC/TFC_CrystalClock.c ****   }
1918:../Sources/TFC/TFC_CrystalClock.c ****   else
1919:../Sources/TFC/TFC_CrystalClock.c ****   {
1920:../Sources/TFC/TFC_CrystalClock.c ****     return 0;                                                            // error condition
 8004              		.loc 1 1920 0
 8005 01c8 0023     		mov	r3, #0
 8006              	.L603:
1921:../Sources/TFC/TFC_CrystalClock.c ****   }
1922:../Sources/TFC/TFC_CrystalClock.c **** } // what_mcg_mode
 8007              		.loc 1 1922 0
 8008 01ca 181C     		mov	r0, r3
 8009 01cc BD46     		mov	sp, r7
 8010              		@ sp needed for prologue
 8011 01ce 80BD     		pop	{r7, pc}
 8012              	.L612:
 8013              		.align	2
 8014              	.L611:
 8015 01d0 00400640 		.word	1074151424
 8016              		.cfi_endproc
 8017              	.LFE26:
 8019              		.section	.text.clk_monitor_0,"ax",%progbits
 8020              		.align	2
 8021              		.global	clk_monitor_0
 8022              		.code	16
 8023              		.thumb_func
 8025              	clk_monitor_0:
 8026              	.LFB27:
1923:../Sources/TFC/TFC_CrystalClock.c **** 
1924:../Sources/TFC/TFC_CrystalClock.c **** 
1925:../Sources/TFC/TFC_CrystalClock.c **** /********************************************************************/
1926:../Sources/TFC/TFC_CrystalClock.c **** /* Functon name : clk_monitor_0
1927:../Sources/TFC/TFC_CrystalClock.c ****  *
1928:../Sources/TFC/TFC_CrystalClock.c ****  * This function simply enables or disables the OSC 0 clock monitor. This is
1929:../Sources/TFC/TFC_CrystalClock.c ****  * achieved by setting or clearing the MCG_C6[CME] bit. It is recommended to  
1930:../Sources/TFC/TFC_CrystalClock.c ****  * enable this monitor in external clock modes (FEE, FBE, BLPE, PBE and PEE.
1931:../Sources/TFC/TFC_CrystalClock.c ****  * It MUST be disabled in all other modes or a reset may be generated. It must
1932:../Sources/TFC/TFC_CrystalClock.c ****  * also be disabled if it is desired to enter VLPR from BLPE mode.
1933:../Sources/TFC/TFC_CrystalClock.c ****  *
1934:../Sources/TFC/TFC_CrystalClock.c ****  * Parameters: en_dis - enables (= 1) or disables (= 0) the OSC 0 clock monitor
1935:../Sources/TFC/TFC_CrystalClock.c ****  *
1936:../Sources/TFC/TFC_CrystalClock.c ****  * Return value : none
1937:../Sources/TFC/TFC_CrystalClock.c ****  */
1938:../Sources/TFC/TFC_CrystalClock.c **** void clk_monitor_0(unsigned char en_dis)
1939:../Sources/TFC/TFC_CrystalClock.c **** {         
 8027              		.loc 1 1939 0
 8028              		.cfi_startproc
 8029 0000 80B5     		push	{r7, lr}
 8030              	.LCFI80:
 8031              		.cfi_def_cfa_offset 8
 8032              		.cfi_offset 7, -8
 8033              		.cfi_offset 14, -4
 8034 0002 82B0     		sub	sp, sp, #8
 8035              	.LCFI81:
 8036              		.cfi_def_cfa_offset 16
 8037 0004 00AF     		add	r7, sp, #0
 8038              	.LCFI82:
 8039              		.cfi_def_cfa_register 7
 8040 0006 021C     		mov	r2, r0
 8041 0008 FB1D     		add	r3, r7, #7
 8042 000a 1A70     		strb	r2, [r3]
1940:../Sources/TFC/TFC_CrystalClock.c ****   if (en_dis)
 8043              		.loc 1 1940 0
 8044 000c FB1D     		add	r3, r7, #7
 8045 000e 1B78     		ldrb	r3, [r3]
 8046 0010 002B     		cmp	r3, #0
 8047 0012 08D0     		beq	.L614
1941:../Sources/TFC/TFC_CrystalClock.c ****   {
1942:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C6 |= MCG_C6_CME0_MASK;   
 8048              		.loc 1 1942 0
 8049 0014 094B     		ldr	r3, .L616
 8050 0016 094A     		ldr	r2, .L616
 8051 0018 5279     		ldrb	r2, [r2, #5]
 8052 001a D2B2     		uxtb	r2, r2
 8053 001c 2021     		mov	r1, #32
 8054 001e 0A43     		orr	r2, r1
 8055 0020 D2B2     		uxtb	r2, r2
 8056 0022 5A71     		strb	r2, [r3, #5]
 8057 0024 07E0     		b	.L613
 8058              	.L614:
1943:../Sources/TFC/TFC_CrystalClock.c ****   }
1944:../Sources/TFC/TFC_CrystalClock.c ****   else
1945:../Sources/TFC/TFC_CrystalClock.c ****   {
1946:../Sources/TFC/TFC_CrystalClock.c ****     MCG_C6 &= ~MCG_C6_CME0_MASK;
 8059              		.loc 1 1946 0
 8060 0026 054B     		ldr	r3, .L616
 8061 0028 044A     		ldr	r2, .L616
 8062 002a 5279     		ldrb	r2, [r2, #5]
 8063 002c D2B2     		uxtb	r2, r2
 8064 002e 2021     		mov	r1, #32
 8065 0030 8A43     		bic	r2, r1
 8066 0032 D2B2     		uxtb	r2, r2
 8067 0034 5A71     		strb	r2, [r3, #5]
 8068              	.L613:
1947:../Sources/TFC/TFC_CrystalClock.c ****   }
1948:../Sources/TFC/TFC_CrystalClock.c **** }    // end clk_monitor_0
 8069              		.loc 1 1948 0
 8070 0036 BD46     		mov	sp, r7
 8071 0038 02B0     		add	sp, sp, #8
 8072              		@ sp needed for prologue
 8073 003a 80BD     		pop	{r7, pc}
 8074              	.L617:
 8075              		.align	2
 8076              	.L616:
 8077 003c 00400640 		.word	1074151424
 8078              		.cfi_endproc
 8079              	.LFE27:
 8081              		.text
 8082              	.Letext0:
 8083              		.file 2 "D:/Programme/CodeWarrior/CW MCU v10.6.4/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 8084              		.file 3 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/MKL25Z4.h"
 8085              		.file 4 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/config.h"
 8086              		.file 5 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/LineScanCam.h"
 8087              		.file 6 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/motorServo.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_CrystalClock.c
                            *COM*:00000004 motor
                            *COM*:00000004 servo
                            *COM*:00000004 LEDconfig
                            *COM*:00000004 target
                            *COM*:00000004 auslmultiplier
                            *COM*:00000004 speedMultiplier
                            *COM*:00000004 minSpeed
                            *COM*:00000004 linetimeout
                            *COM*:00000004 ruckwartsZeit
                            *COM*:00000200 camData
                            *COM*:00000004 active
                            *COM*:00000004 Sausl
                            *COM*:00000004 linemissing
                            *COM*:00000004 checkLineStep
                            *COM*:00000004 Motorspeed
                            *COM*:00000004 Servoausl
                            *COM*:00000004 drivingBack
                            *COM*:00000001 drs_val
                            *COM*:00000001 dmx32_val
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:37     .text.TFC_InitClock:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:42     .text.TFC_InitClock:00000000 TFC_InitClock
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:87     .text.pll_init:00000000 pll_init
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:76     .text.TFC_InitClock:00000020 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:82     .text.pll_init:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:611    .text.pll_init:00000324 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:629    .text.pll_init:00000364 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:920    .text.pll_init:0000053c $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:927    .text.pee_pbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:932    .text.pee_pbe:00000000 pee_pbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1057   .text.pee_pbe:000000a8 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1063   .text.pbe_pee:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1068   .text.pbe_pee:00000000 pbe_pee
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1283   .text.pbe_pee:0000013c $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1289   .text.pbe_fbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1294   .text.pbe_fbe:00000000 pbe_fbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1423   .text.pbe_fbe:000000ac $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1429   .text.fbe_pbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1434   .text.fbe_pbe:00000000 fbe_pbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1774   .text.fbe_pbe:00000208 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1784   .text.pbe_blpe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1789   .text.pbe_blpe:00000000 pbe_blpe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1868   .text.pbe_blpe:00000064 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1873   .text.blpe_pbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:1878   .text.blpe_pbe:00000000 blpe_pbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2190   .text.blpe_pbe:000001dc $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2198   .text.blpe_fbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2203   .text.blpe_fbe:00000000 blpe_fbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2332   .text.blpe_fbe:000000b0 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2338   .text.fbe_blpe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2343   .text.fbe_blpe:00000000 fbe_blpe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2422   .text.fbe_blpe:00000064 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2427   .text.fbe_fei:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2432   .text.fbe_fei:00000000 fbe_fei
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:7365   .text.fll_freq:00000000 fll_freq
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2672   .text.fbe_fei:00000158 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2680   .text.fei_fbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:2685   .text.fei_fbe:00000000 fei_fbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3170   .text.fei_fbe:000002e4 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3188   .text.fbe_fee:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3193   .text.fbe_fee:00000000 fbe_fee
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3393   .text.fbe_fee:00000130 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3399   .text.fee_fbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3404   .text.fee_fbe:00000000 fee_fbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3528   .text.fee_fbe:000000a8 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3534   .text.fbe_fbi:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3539   .text.fbe_fbi:00000000 fbe_fbi
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3949   .text.fbe_fbi:00000260 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3959   .text.fbi_fbe:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:3964   .text.fbi_fbe:00000000 fbi_fbe
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4459   .text.fbi_fbe:000002f4 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4477   .text.fbi_blpi:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4482   .text.fbi_blpi:00000000 fbi_blpi
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4592   .text.fbi_blpi:0000009c $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4597   .text.blpi_fbi:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4602   .text.blpi_fbi:00000000 blpi_fbi
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4712   .text.blpi_fbi:0000009c $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4717   .text.fbi_fee:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:4722   .text.fbi_fee:00000000 fbi_fee
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5244   .text.fbi_fee:0000032c $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5260   .text.fbi_fee:00000364 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5280   .text.fbi_fee:00000380 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5285   .text.fee_fbi:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5290   .text.fee_fbi:00000000 fee_fbi
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5669   .text.fee_fbi:0000022c $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5679   .text.fbi_fei:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5684   .text.fbi_fei:00000000 fbi_fei
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5922   .text.fbi_fei:00000154 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5930   .text.fei_fbi:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:5935   .text.fei_fbi:00000000 fei_fbi
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6276   .text.fei_fbi:000001f8 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6286   .text.fei_fee:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6291   .text.fei_fee:00000000 fei_fee
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6752   .text.fei_fee:000002c4 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6770   .text.fee_fei:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6775   .text.fee_fei:00000000 fee_fei
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6932   .text.fee_fei:000000d8 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6945   .text.atc:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:6950   .text.atc:00000000 atc
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:7702   .text.what_mcg_mode:00000000 what_mcg_mode
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:7345   .text.atc:00000280 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:7360   .text.fll_freq:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:7682   .text.fll_freq:000001ac $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:7697   .text.what_mcg_mode:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:8015   .text.what_mcg_mode:000001d0 $d
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:8020   .text.clk_monitor_0:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:8025   .text.clk_monitor_0:00000000 clk_monitor_0
C:\Users\Darkp\AppData\Local\Temp\ccWhy3eH.s:8077   .text.clk_monitor_0:0000003c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_idiv
__aeabi_uidiv
__aeabi_i2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2uiz
