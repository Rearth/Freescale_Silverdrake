   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_UART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	motor,4,4
  18              		.comm	servo,4,4
  19              		.comm	LEDconfig,4,4
  20              		.comm	target,4,4
  21              		.comm	auslmultiplier,4,4
  22              		.comm	speedMultiplier,4,4
  23              		.comm	minSpeed,4,4
  24              		.comm	linetimeout,4,4
  25              		.comm	ruckwartsZeit,4,4
  26              		.comm	camData,512,4
  27              		.comm	active,4,4
  28              		.comm	Sausl,4,4
  29              		.comm	linemissing,4,4
  30              		.comm	checkLineStep,4,4
  31              		.comm	Motorspeed,4,4
  32              		.comm	Servoausl,4,4
  33              		.comm	drivingBack,4,4
  34              		.comm	SDA_SERIAL_OUTGOING_QUEUE,12,4
  35              		.comm	SDA_SERIAL_INCOMING_QUEUE,12,4
  36              		.comm	SDA_SERIAL_OUTGOING_QUEUE_Storage,2048,4
  37              		.comm	SDA_SERIAL_INCOMING_QUEUE_Storage,128,4
  38              		.section	.text.TFC_InitUARTs,"ax",%progbits
  39              		.align	2
  40              		.global	TFC_InitUARTs
  41              		.code	16
  42              		.thumb_func
  44              	TFC_InitUARTs:
  45              	.LFB0:
  46              		.file 1 "../Sources/TFC/TFC_UART.c"
   1:../Sources/TFC/TFC_UART.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_UART.c **** 
   3:../Sources/TFC/TFC_UART.c **** void uart0_init (int sysclk, int baud);
   4:../Sources/TFC/TFC_UART.c **** 
   5:../Sources/TFC/TFC_UART.c **** ByteQueue SDA_SERIAL_OUTGOING_QUEUE;
   6:../Sources/TFC/TFC_UART.c **** ByteQueue SDA_SERIAL_INCOMING_QUEUE;
   7:../Sources/TFC/TFC_UART.c **** 
   8:../Sources/TFC/TFC_UART.c **** 
   9:../Sources/TFC/TFC_UART.c **** uint8_t SDA_SERIAL_OUTGOING_QUEUE_Storage[SDA_SERIAL_OUTGOING_QUEUE_SIZE];
  10:../Sources/TFC/TFC_UART.c **** uint8_t SDA_SERIAL_INCOMING_QUEUE_Storage[SDA_SERIAL_INCOMING_QUEUE_SIZE];
  11:../Sources/TFC/TFC_UART.c **** 
  12:../Sources/TFC/TFC_UART.c **** 
  13:../Sources/TFC/TFC_UART.c **** void TFC_InitUARTs()
  14:../Sources/TFC/TFC_UART.c **** {
  47              		.loc 1 14 0
  48              		.cfi_startproc
  49 0000 80B5     		push	{r7, lr}
  50              	.LCFI0:
  51              		.cfi_def_cfa_offset 8
  52              		.cfi_offset 7, -8
  53              		.cfi_offset 14, -4
  54 0002 00AF     		add	r7, sp, #0
  55              	.LCFI1:
  56              		.cfi_def_cfa_register 7
  15:../Sources/TFC/TFC_UART.c **** 	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
  57              		.loc 1 15 0
  58 0004 274A     		ldr	r2, .L2
  59 0006 2749     		ldr	r1, .L2
  60 0008 274B     		ldr	r3, .L2+4
  61 000a CB58     		ldr	r3, [r1, r3]
  62 000c 8021     		mov	r1, #128
  63 000e 8900     		lsl	r1, r1, #2
  64 0010 1943     		orr	r1, r3
  65 0012 254B     		ldr	r3, .L2+4
  66 0014 D150     		str	r1, [r2, r3]
  16:../Sources/TFC/TFC_UART.c **** 
  17:../Sources/TFC/TFC_UART.c **** 	InitByteQueue(&SDA_SERIAL_OUTGOING_QUEUE,SDA_SERIAL_OUTGOING_QUEUE_SIZE,SDA_SERIAL_OUTGOING_QUEUE_
  67              		.loc 1 17 0
  68 0016 2549     		ldr	r1, .L2+8
  69 0018 8023     		mov	r3, #128
  70 001a 1A01     		lsl	r2, r3, #4
  71 001c 244B     		ldr	r3, .L2+12
  72 001e 081C     		mov	r0, r1
  73 0020 111C     		mov	r1, r2
  74 0022 1A1C     		mov	r2, r3
  75 0024 FFF7FEFF 		bl	InitByteQueue
  18:../Sources/TFC/TFC_UART.c **** 	InitByteQueue(&SDA_SERIAL_INCOMING_QUEUE,SDA_SERIAL_INCOMING_QUEUE_SIZE,SDA_SERIAL_INCOMING_QUEUE_
  76              		.loc 1 18 0
  77 0028 224A     		ldr	r2, .L2+16
  78 002a 234B     		ldr	r3, .L2+20
  79 002c 101C     		mov	r0, r2
  80 002e 8021     		mov	r1, #128
  81 0030 1A1C     		mov	r2, r3
  82 0032 FFF7FEFF 		bl	InitByteQueue
  19:../Sources/TFC/TFC_UART.c **** 	
  20:../Sources/TFC/TFC_UART.c **** 	PORTA_PCR1 = PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;   
  83              		.loc 1 20 0
  84 0036 214B     		ldr	r3, .L2+24
  85 0038 9022     		mov	r2, #144
  86 003a 9200     		lsl	r2, r2, #2
  87 003c 5A60     		str	r2, [r3, #4]
  21:../Sources/TFC/TFC_UART.c **** 	PORTA_PCR2 = PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;  
  88              		.loc 1 21 0
  89 003e 1F4B     		ldr	r3, .L2+24
  90 0040 9022     		mov	r2, #144
  91 0042 9200     		lsl	r2, r2, #2
  92 0044 9A60     		str	r2, [r3, #8]
  22:../Sources/TFC/TFC_UART.c **** 	
  23:../Sources/TFC/TFC_UART.c **** 	//Select PLL/2 Clock
  24:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 &= ~(3<<26);
  93              		.loc 1 24 0
  94 0046 174A     		ldr	r2, .L2
  95 0048 1649     		ldr	r1, .L2
  96 004a 1D4B     		ldr	r3, .L2+28
  97 004c C958     		ldr	r1, [r1, r3]
  98 004e 1D4B     		ldr	r3, .L2+32
  99 0050 1940     		and	r1, r3
 100 0052 1B4B     		ldr	r3, .L2+28
 101 0054 D150     		str	r1, [r2, r3]
  25:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 |= SIM_SOPT2_UART0SRC(1); 
 102              		.loc 1 25 0
 103 0056 134A     		ldr	r2, .L2
 104 0058 1249     		ldr	r1, .L2
 105 005a 194B     		ldr	r3, .L2+28
 106 005c CB58     		ldr	r3, [r1, r3]
 107 005e 8021     		mov	r1, #128
 108 0060 C904     		lsl	r1, r1, #19
 109 0062 1943     		orr	r1, r3
 110 0064 164B     		ldr	r3, .L2+28
 111 0066 D150     		str	r1, [r2, r3]
  26:../Sources/TFC/TFC_UART.c **** 	SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK;
 112              		.loc 1 26 0
 113 0068 0E4A     		ldr	r2, .L2
 114 006a 0E49     		ldr	r1, .L2
 115 006c 144B     		ldr	r3, .L2+28
 116 006e CB58     		ldr	r3, [r1, r3]
 117 0070 8021     		mov	r1, #128
 118 0072 4902     		lsl	r1, r1, #9
 119 0074 1943     		orr	r1, r3
 120 0076 124B     		ldr	r3, .L2+28
 121 0078 D150     		str	r1, [r2, r3]
  27:../Sources/TFC/TFC_UART.c **** 	
  28:../Sources/TFC/TFC_UART.c **** 	//We have to feed this function the clock in KHz!
  29:../Sources/TFC/TFC_UART.c ****      uart0_init (CORE_CLOCK/2/1000, SDA_SERIAL_BAUD);
 122              		.loc 1 29 0
 123 007a 134A     		ldr	r2, .L2+36
 124 007c E123     		mov	r3, #225
 125 007e 5B02     		lsl	r3, r3, #9
 126 0080 101C     		mov	r0, r2
 127 0082 191C     		mov	r1, r3
 128 0084 FFF7FEFF 		bl	uart0_init
  30:../Sources/TFC/TFC_UART.c **** 	 //Enable recieve interrupts
  31:../Sources/TFC/TFC_UART.c ****      
  32:../Sources/TFC/TFC_UART.c ****      UART0_C2 |= UART_C2_RIE_MASK;
 129              		.loc 1 32 0
 130 0088 104B     		ldr	r3, .L2+40
 131 008a 104A     		ldr	r2, .L2+40
 132 008c D278     		ldrb	r2, [r2, #3]
 133 008e D2B2     		uxtb	r2, r2
 134 0090 2021     		mov	r1, #32
 135 0092 0A43     		orr	r2, r1
 136 0094 D2B2     		uxtb	r2, r2
 137 0096 DA70     		strb	r2, [r3, #3]
  33:../Sources/TFC/TFC_UART.c ****      enable_irq(INT_UART0-16);
 138              		.loc 1 33 0
 139 0098 0C20     		mov	r0, #12
 140 009a FFF7FEFF 		bl	enable_irq
  34:../Sources/TFC/TFC_UART.c **** 	
  35:../Sources/TFC/TFC_UART.c **** }
 141              		.loc 1 35 0
 142 009e BD46     		mov	sp, r7
 143              		@ sp needed for prologue
 144 00a0 80BD     		pop	{r7, pc}
 145              	.L3:
 146 00a2 C046     		.align	2
 147              	.L2:
 148 00a4 00700440 		.word	1074032640
 149 00a8 38100000 		.word	4152
 150 00ac 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 151 00b0 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE_Storage
 152 00b4 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE
 153 00b8 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE_Storage
 154 00bc 00900440 		.word	1074040832
 155 00c0 04100000 		.word	4100
 156 00c4 FFFFFFF3 		.word	-201326593
 157 00c8 C05D0000 		.word	24000
 158 00cc 00A00640 		.word	1074176000
 159              		.cfi_endproc
 160              	.LFE0:
 162              		.section	.text.TFC_UART_Process,"ax",%progbits
 163              		.align	2
 164              		.global	TFC_UART_Process
 165              		.code	16
 166              		.thumb_func
 168              	TFC_UART_Process:
 169              	.LFB1:
  36:../Sources/TFC/TFC_UART.c **** 
  37:../Sources/TFC/TFC_UART.c **** void TFC_UART_Process()
  38:../Sources/TFC/TFC_UART.c **** {
 170              		.loc 1 38 0
 171              		.cfi_startproc
 172 0000 80B5     		push	{r7, lr}
 173              	.LCFI2:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
 177 0002 00AF     		add	r7, sp, #0
 178              	.LCFI3:
 179              		.cfi_def_cfa_register 7
  39:../Sources/TFC/TFC_UART.c **** 	if(BytesInQueue(&SDA_SERIAL_OUTGOING_QUEUE)>0 && (UART0_S1 & UART_S1_TDRE_MASK))
 180              		.loc 1 39 0
 181 0004 0C4B     		ldr	r3, .L6
 182 0006 181C     		mov	r0, r3
 183 0008 FFF7FEFF 		bl	BytesInQueue
 184 000c 031C     		mov	r3, r0
 185 000e 002B     		cmp	r3, #0
 186 0010 0FD0     		beq	.L4
 187              		.loc 1 39 0 is_stmt 0
 188 0012 0A4B     		ldr	r3, .L6+4
 189 0014 1B79     		ldrb	r3, [r3, #4]
 190 0016 DBB2     		uxtb	r3, r3
 191 0018 DBB2     		uxtb	r3, r3
 192 001a 5BB2     		sxtb	r3, r3
 193 001c 002B     		cmp	r3, #0
 194 001e 08DA     		bge	.L4
  40:../Sources/TFC/TFC_UART.c **** 			UART0_C2 |= UART_C2_TIE_MASK; //Enable Transmitter Interrupts
 195              		.loc 1 40 0 is_stmt 1
 196 0020 064B     		ldr	r3, .L6+4
 197 0022 064A     		ldr	r2, .L6+4
 198 0024 D278     		ldrb	r2, [r2, #3]
 199 0026 D2B2     		uxtb	r2, r2
 200 0028 8021     		mov	r1, #128
 201 002a 4942     		neg	r1, r1
 202 002c 0A43     		orr	r2, r1
 203 002e D2B2     		uxtb	r2, r2
 204 0030 DA70     		strb	r2, [r3, #3]
 205              	.L4:
  41:../Sources/TFC/TFC_UART.c **** }
 206              		.loc 1 41 0
 207 0032 BD46     		mov	sp, r7
 208              		@ sp needed for prologue
 209 0034 80BD     		pop	{r7, pc}
 210              	.L7:
 211 0036 C046     		.align	2
 212              	.L6:
 213 0038 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 214 003c 00A00640 		.word	1074176000
 215              		.cfi_endproc
 216              	.LFE1:
 218              		.section	.text.UART0_IRQHandler,"ax",%progbits
 219              		.align	2
 220              		.global	UART0_IRQHandler
 221              		.code	16
 222              		.thumb_func
 224              	UART0_IRQHandler:
 225              	.LFB2:
  42:../Sources/TFC/TFC_UART.c **** 
  43:../Sources/TFC/TFC_UART.c **** 
  44:../Sources/TFC/TFC_UART.c **** void UART0_IRQHandler()
  45:../Sources/TFC/TFC_UART.c **** {
 226              		.loc 1 45 0
 227              		.cfi_startproc
 228 0000 80B5     		push	{r7, lr}
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 8
 231              		.cfi_offset 7, -8
 232              		.cfi_offset 14, -4
 233 0002 82B0     		sub	sp, sp, #8
 234              	.LCFI5:
 235              		.cfi_def_cfa_offset 16
 236 0004 00AF     		add	r7, sp, #0
 237              	.LCFI6:
 238              		.cfi_def_cfa_register 7
  46:../Sources/TFC/TFC_UART.c **** 	uint8_t Temp;
  47:../Sources/TFC/TFC_UART.c **** 		
  48:../Sources/TFC/TFC_UART.c **** 	if(UART0_S1 & UART_S1_RDRF_MASK)
 239              		.loc 1 48 0
 240 0006 194B     		ldr	r3, .L12
 241 0008 1B79     		ldrb	r3, [r3, #4]
 242 000a DBB2     		uxtb	r3, r3
 243 000c 1A1C     		mov	r2, r3
 244 000e 2023     		mov	r3, #32
 245 0010 1340     		and	r3, r2
 246 0012 07D0     		beq	.L9
  49:../Sources/TFC/TFC_UART.c **** 	{
  50:../Sources/TFC/TFC_UART.c **** 		ByteEnqueue(&SDA_SERIAL_INCOMING_QUEUE,UART0_D);
 247              		.loc 1 50 0
 248 0014 154B     		ldr	r3, .L12
 249 0016 DB79     		ldrb	r3, [r3, #7]
 250 0018 DBB2     		uxtb	r3, r3
 251 001a 154A     		ldr	r2, .L12+4
 252 001c 101C     		mov	r0, r2
 253 001e 191C     		mov	r1, r3
 254 0020 FFF7FEFF 		bl	ByteEnqueue
 255              	.L9:
  51:../Sources/TFC/TFC_UART.c **** 	}
  52:../Sources/TFC/TFC_UART.c **** 	if(UART0_S1 & UART_S1_TDRE_MASK)
 256              		.loc 1 52 0
 257 0024 114B     		ldr	r3, .L12
 258 0026 1B79     		ldrb	r3, [r3, #4]
 259 0028 DBB2     		uxtb	r3, r3
 260 002a DBB2     		uxtb	r3, r3
 261 002c 5BB2     		sxtb	r3, r3
 262 002e 002B     		cmp	r3, #0
 263 0030 19DA     		bge	.L8
  53:../Sources/TFC/TFC_UART.c **** 	{
  54:../Sources/TFC/TFC_UART.c **** 		if(BytesInQueue(&SDA_SERIAL_OUTGOING_QUEUE)>0)
 264              		.loc 1 54 0
 265 0032 104B     		ldr	r3, .L12+8
 266 0034 181C     		mov	r0, r3
 267 0036 FFF7FEFF 		bl	BytesInQueue
 268 003a 031C     		mov	r3, r0
 269 003c 002B     		cmp	r3, #0
 270 003e 0AD0     		beq	.L11
  55:../Sources/TFC/TFC_UART.c **** 		{
  56:../Sources/TFC/TFC_UART.c **** 			ByteDequeue(&SDA_SERIAL_OUTGOING_QUEUE,&Temp);
 271              		.loc 1 56 0
 272 0040 0C4A     		ldr	r2, .L12+8
 273 0042 FB1D     		add	r3, r7, #7
 274 0044 101C     		mov	r0, r2
 275 0046 191C     		mov	r1, r3
 276 0048 FFF7FEFF 		bl	ByteDequeue
  57:../Sources/TFC/TFC_UART.c **** 			UART0_D = Temp;
 277              		.loc 1 57 0
 278 004c 074B     		ldr	r3, .L12
 279 004e FA1D     		add	r2, r7, #7
 280 0050 1278     		ldrb	r2, [r2]
 281 0052 DA71     		strb	r2, [r3, #7]
 282 0054 07E0     		b	.L8
 283              	.L11:
  58:../Sources/TFC/TFC_UART.c **** 		}
  59:../Sources/TFC/TFC_UART.c **** 		else
  60:../Sources/TFC/TFC_UART.c **** 		{
  61:../Sources/TFC/TFC_UART.c **** 			//if there is nothing left in the queue then disable interrupts
  62:../Sources/TFC/TFC_UART.c **** 			UART0_C2 &= ~UART_C2_TIE_MASK; //Disable the  Interrupts
 284              		.loc 1 62 0
 285 0056 054B     		ldr	r3, .L12
 286 0058 044A     		ldr	r2, .L12
 287 005a D278     		ldrb	r2, [r2, #3]
 288 005c D1B2     		uxtb	r1, r2
 289 005e 7F22     		mov	r2, #127
 290 0060 0A40     		and	r2, r1
 291 0062 D2B2     		uxtb	r2, r2
 292 0064 DA70     		strb	r2, [r3, #3]
 293              	.L8:
  63:../Sources/TFC/TFC_UART.c **** 		}
  64:../Sources/TFC/TFC_UART.c **** 	}
  65:../Sources/TFC/TFC_UART.c **** }
 294              		.loc 1 65 0
 295 0066 BD46     		mov	sp, r7
 296 0068 02B0     		add	sp, sp, #8
 297              		@ sp needed for prologue
 298 006a 80BD     		pop	{r7, pc}
 299              	.L13:
 300              		.align	2
 301              	.L12:
 302 006c 00A00640 		.word	1074176000
 303 0070 00000000 		.word	SDA_SERIAL_INCOMING_QUEUE
 304 0074 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 305              		.cfi_endproc
 306              	.LFE2:
 308              		.global	__aeabi_uidiv
 309              		.section	.text.uart0_init,"ax",%progbits
 310              		.align	2
 311              		.global	uart0_init
 312              		.code	16
 313              		.thumb_func
 315              	uart0_init:
 316              	.LFB3:
  66:../Sources/TFC/TFC_UART.c **** 
  67:../Sources/TFC/TFC_UART.c **** 
  68:../Sources/TFC/TFC_UART.c **** 
  69:../Sources/TFC/TFC_UART.c **** void uart0_init (int sysclk, int baud)
  70:../Sources/TFC/TFC_UART.c **** {
 317              		.loc 1 70 0
 318              		.cfi_startproc
 319 0000 80B5     		push	{r7, lr}
 320              	.LCFI7:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 7, -8
 323              		.cfi_offset 14, -4
 324 0002 8CB0     		sub	sp, sp, #48
 325              	.LCFI8:
 326              		.cfi_def_cfa_offset 56
 327 0004 00AF     		add	r7, sp, #0
 328              	.LCFI9:
 329              		.cfi_def_cfa_register 7
 330 0006 7860     		str	r0, [r7, #4]
 331 0008 3960     		str	r1, [r7]
  71:../Sources/TFC/TFC_UART.c ****     uint8 i;
  72:../Sources/TFC/TFC_UART.c ****     uint32 calculated_baud = 0;
 332              		.loc 1 72 0
 333 000a 0023     		mov	r3, #0
 334 000c FB61     		str	r3, [r7, #28]
  73:../Sources/TFC/TFC_UART.c ****     uint32 baud_diff = 0;
 335              		.loc 1 73 0
 336 000e 0023     		mov	r3, #0
 337 0010 BB62     		str	r3, [r7, #40]
  74:../Sources/TFC/TFC_UART.c ****     uint32 osr_val = 0;
 338              		.loc 1 74 0
 339 0012 0023     		mov	r3, #0
 340 0014 7B62     		str	r3, [r7, #36]
  75:../Sources/TFC/TFC_UART.c ****     uint32 sbr_val, uart0clk;
  76:../Sources/TFC/TFC_UART.c ****     uint32 baud_rate;
  77:../Sources/TFC/TFC_UART.c ****     uint32 reg_temp = 0;
 341              		.loc 1 77 0
 342 0016 0023     		mov	r3, #0
 343 0018 BB61     		str	r3, [r7, #24]
  78:../Sources/TFC/TFC_UART.c ****     uint32 temp = 0;
 344              		.loc 1 78 0
 345 001a 0023     		mov	r3, #0
 346 001c 3B62     		str	r3, [r7, #32]
  79:../Sources/TFC/TFC_UART.c ****     
  80:../Sources/TFC/TFC_UART.c ****     SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
 347              		.loc 1 80 0
 348 001e 7D4A     		ldr	r2, .L27
 349 0020 7C49     		ldr	r1, .L27
 350 0022 7D4B     		ldr	r3, .L27+4
 351 0024 CB58     		ldr	r3, [r1, r3]
 352 0026 8021     		mov	r1, #128
 353 0028 C900     		lsl	r1, r1, #3
 354 002a 1943     		orr	r1, r3
 355 002c 7A4B     		ldr	r3, .L27+4
 356 002e D150     		str	r1, [r2, r3]
  81:../Sources/TFC/TFC_UART.c ****     
  82:../Sources/TFC/TFC_UART.c ****     // Disable UART0 before changing registers
  83:../Sources/TFC/TFC_UART.c ****     UART0_C2 &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
 357              		.loc 1 83 0
 358 0030 7A4B     		ldr	r3, .L27+8
 359 0032 7A4A     		ldr	r2, .L27+8
 360 0034 D278     		ldrb	r2, [r2, #3]
 361 0036 D2B2     		uxtb	r2, r2
 362 0038 0C21     		mov	r1, #12
 363 003a 8A43     		bic	r2, r1
 364 003c D2B2     		uxtb	r2, r2
 365 003e DA70     		strb	r2, [r3, #3]
  84:../Sources/TFC/TFC_UART.c ****   
  85:../Sources/TFC/TFC_UART.c ****     // Verify that a valid clock value has been passed to the function 
  86:../Sources/TFC/TFC_UART.c ****     if ((sysclk > 50000) || (sysclk < 32))
 366              		.loc 1 86 0
 367 0040 7A68     		ldr	r2, [r7, #4]
 368 0042 774B     		ldr	r3, .L27+12
 369 0044 9A42     		cmp	r2, r3
 370 0046 02DC     		bgt	.L15
 371              		.loc 1 86 0 is_stmt 0
 372 0048 7B68     		ldr	r3, [r7, #4]
 373 004a 1F2B     		cmp	r3, #31
 374 004c 0EDC     		bgt	.L16
 375              	.L15:
  87:../Sources/TFC/TFC_UART.c ****     {
  88:../Sources/TFC/TFC_UART.c ****         sysclk = 0;
 376              		.loc 1 88 0 is_stmt 1
 377 004e 0023     		mov	r3, #0
 378 0050 7B60     		str	r3, [r7, #4]
  89:../Sources/TFC/TFC_UART.c ****         reg_temp = SIM_SOPT2;
 379              		.loc 1 89 0
 380 0052 704A     		ldr	r2, .L27
 381 0054 734B     		ldr	r3, .L27+16
 382 0056 D358     		ldr	r3, [r2, r3]
 383 0058 BB61     		str	r3, [r7, #24]
  90:../Sources/TFC/TFC_UART.c ****         reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
 384              		.loc 1 90 0
 385 005a BA69     		ldr	r2, [r7, #24]
 386 005c 724B     		ldr	r3, .L27+20
 387 005e 1340     		and	r3, r2
 388 0060 BB61     		str	r3, [r7, #24]
  91:../Sources/TFC/TFC_UART.c ****         reg_temp |= SIM_SOPT2_UART0SRC(0);
  92:../Sources/TFC/TFC_UART.c ****         SIM_SOPT2 = reg_temp;
 389              		.loc 1 92 0
 390 0062 6C4A     		ldr	r2, .L27
 391 0064 6F4B     		ldr	r3, .L27+16
 392 0066 B969     		ldr	r1, [r7, #24]
 393 0068 D150     		str	r1, [r2, r3]
 394              	.L17:
  93:../Sources/TFC/TFC_UART.c **** 			
  94:../Sources/TFC/TFC_UART.c **** 			  // Enter inifinite loop because the 
  95:../Sources/TFC/TFC_UART.c **** 			  // the desired system clock value is 
  96:../Sources/TFC/TFC_UART.c **** 			  // invalid!!
  97:../Sources/TFC/TFC_UART.c **** 			  while(1)
  98:../Sources/TFC/TFC_UART.c **** 				{}
 395              		.loc 1 98 0
 396 006a FEE7     		b	.L17
 397              	.L16:
  99:../Sources/TFC/TFC_UART.c ****     }
 100:../Sources/TFC/TFC_UART.c ****    
 101:../Sources/TFC/TFC_UART.c ****     
 102:../Sources/TFC/TFC_UART.c ****     // Initialize baud rate
 103:../Sources/TFC/TFC_UART.c ****     baud_rate = baud;
 398              		.loc 1 103 0
 399 006c 3B68     		ldr	r3, [r7]
 400 006e 7B61     		str	r3, [r7, #20]
 104:../Sources/TFC/TFC_UART.c ****     
 105:../Sources/TFC/TFC_UART.c ****     // Change units to Hz
 106:../Sources/TFC/TFC_UART.c ****     uart0clk = sysclk * 1000;
 401              		.loc 1 106 0
 402 0070 7B68     		ldr	r3, [r7, #4]
 403 0072 FA22     		mov	r2, #250
 404 0074 9200     		lsl	r2, r2, #2
 405 0076 5343     		mul	r3, r2
 406 0078 3B61     		str	r3, [r7, #16]
 107:../Sources/TFC/TFC_UART.c ****     // Calculate the first baud rate using the lowest OSR value possible.  
 108:../Sources/TFC/TFC_UART.c ****     i = 4;
 407              		.loc 1 108 0
 408 007a 3B1C     		mov	r3, r7
 409 007c 2F33     		add	r3, r3, #47
 410 007e 0422     		mov	r2, #4
 411 0080 1A70     		strb	r2, [r3]
 109:../Sources/TFC/TFC_UART.c ****     sbr_val = (uint32)(uart0clk/(baud_rate * i));
 412              		.loc 1 109 0
 413 0082 3B1C     		mov	r3, r7
 414 0084 2F33     		add	r3, r3, #47
 415 0086 1B78     		ldrb	r3, [r3]
 416 0088 7A69     		ldr	r2, [r7, #20]
 417 008a 5343     		mul	r3, r2
 418 008c 3869     		ldr	r0, [r7, #16]
 419 008e 191C     		mov	r1, r3
 420 0090 FFF7FEFF 		bl	__aeabi_uidiv
 421 0094 031C     		mov	r3, r0
 422 0096 FB60     		str	r3, [r7, #12]
 110:../Sources/TFC/TFC_UART.c ****     calculated_baud = (uart0clk / (i * sbr_val));
 423              		.loc 1 110 0
 424 0098 3B1C     		mov	r3, r7
 425 009a 2F33     		add	r3, r3, #47
 426 009c 1B78     		ldrb	r3, [r3]
 427 009e FA68     		ldr	r2, [r7, #12]
 428 00a0 5343     		mul	r3, r2
 429 00a2 3869     		ldr	r0, [r7, #16]
 430 00a4 191C     		mov	r1, r3
 431 00a6 FFF7FEFF 		bl	__aeabi_uidiv
 432 00aa 031C     		mov	r3, r0
 433 00ac FB61     		str	r3, [r7, #28]
 111:../Sources/TFC/TFC_UART.c ****         
 112:../Sources/TFC/TFC_UART.c ****     if (calculated_baud > baud_rate)
 434              		.loc 1 112 0
 435 00ae FA69     		ldr	r2, [r7, #28]
 436 00b0 7B69     		ldr	r3, [r7, #20]
 437 00b2 9A42     		cmp	r2, r3
 438 00b4 04D9     		bls	.L18
 113:../Sources/TFC/TFC_UART.c ****         baud_diff = calculated_baud - baud_rate;
 439              		.loc 1 113 0
 440 00b6 FA69     		ldr	r2, [r7, #28]
 441 00b8 7B69     		ldr	r3, [r7, #20]
 442 00ba D31A     		sub	r3, r2, r3
 443 00bc BB62     		str	r3, [r7, #40]
 444 00be 03E0     		b	.L19
 445              	.L18:
 114:../Sources/TFC/TFC_UART.c ****     else
 115:../Sources/TFC/TFC_UART.c ****         baud_diff = baud_rate - calculated_baud;
 446              		.loc 1 115 0
 447 00c0 7A69     		ldr	r2, [r7, #20]
 448 00c2 FB69     		ldr	r3, [r7, #28]
 449 00c4 D31A     		sub	r3, r2, r3
 450 00c6 BB62     		str	r3, [r7, #40]
 451              	.L19:
 116:../Sources/TFC/TFC_UART.c ****     
 117:../Sources/TFC/TFC_UART.c ****     osr_val = i;
 452              		.loc 1 117 0
 453 00c8 3B1C     		mov	r3, r7
 454 00ca 2F33     		add	r3, r3, #47
 455 00cc 1B78     		ldrb	r3, [r3]
 456 00ce 7B62     		str	r3, [r7, #36]
 118:../Sources/TFC/TFC_UART.c ****         
 119:../Sources/TFC/TFC_UART.c ****     // Select the best OSR value
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 457              		.loc 1 120 0
 458 00d0 3B1C     		mov	r3, r7
 459 00d2 2F33     		add	r3, r3, #47
 460 00d4 0522     		mov	r2, #5
 461 00d6 1A70     		strb	r2, [r3]
 462 00d8 33E0     		b	.L20
 463              	.L24:
 121:../Sources/TFC/TFC_UART.c ****     {
 122:../Sources/TFC/TFC_UART.c ****         sbr_val = (uint32)(uart0clk/(baud_rate * i));
 464              		.loc 1 122 0
 465 00da 3B1C     		mov	r3, r7
 466 00dc 2F33     		add	r3, r3, #47
 467 00de 1B78     		ldrb	r3, [r3]
 468 00e0 7A69     		ldr	r2, [r7, #20]
 469 00e2 5343     		mul	r3, r2
 470 00e4 3869     		ldr	r0, [r7, #16]
 471 00e6 191C     		mov	r1, r3
 472 00e8 FFF7FEFF 		bl	__aeabi_uidiv
 473 00ec 031C     		mov	r3, r0
 474 00ee FB60     		str	r3, [r7, #12]
 123:../Sources/TFC/TFC_UART.c ****         calculated_baud = (uart0clk / (i * sbr_val));
 475              		.loc 1 123 0
 476 00f0 3B1C     		mov	r3, r7
 477 00f2 2F33     		add	r3, r3, #47
 478 00f4 1B78     		ldrb	r3, [r3]
 479 00f6 FA68     		ldr	r2, [r7, #12]
 480 00f8 5343     		mul	r3, r2
 481 00fa 3869     		ldr	r0, [r7, #16]
 482 00fc 191C     		mov	r1, r3
 483 00fe FFF7FEFF 		bl	__aeabi_uidiv
 484 0102 031C     		mov	r3, r0
 485 0104 FB61     		str	r3, [r7, #28]
 124:../Sources/TFC/TFC_UART.c ****         
 125:../Sources/TFC/TFC_UART.c ****         if (calculated_baud > baud_rate)
 486              		.loc 1 125 0
 487 0106 FA69     		ldr	r2, [r7, #28]
 488 0108 7B69     		ldr	r3, [r7, #20]
 489 010a 9A42     		cmp	r2, r3
 490 010c 04D9     		bls	.L21
 126:../Sources/TFC/TFC_UART.c ****             temp = calculated_baud - baud_rate;
 491              		.loc 1 126 0
 492 010e FA69     		ldr	r2, [r7, #28]
 493 0110 7B69     		ldr	r3, [r7, #20]
 494 0112 D31A     		sub	r3, r2, r3
 495 0114 3B62     		str	r3, [r7, #32]
 496 0116 03E0     		b	.L22
 497              	.L21:
 127:../Sources/TFC/TFC_UART.c ****         else
 128:../Sources/TFC/TFC_UART.c ****             temp = baud_rate - calculated_baud;
 498              		.loc 1 128 0
 499 0118 7A69     		ldr	r2, [r7, #20]
 500 011a FB69     		ldr	r3, [r7, #28]
 501 011c D31A     		sub	r3, r2, r3
 502 011e 3B62     		str	r3, [r7, #32]
 503              	.L22:
 129:../Sources/TFC/TFC_UART.c ****         
 130:../Sources/TFC/TFC_UART.c ****         if (temp <= baud_diff)
 504              		.loc 1 130 0
 505 0120 3A6A     		ldr	r2, [r7, #32]
 506 0122 BB6A     		ldr	r3, [r7, #40]
 507 0124 9A42     		cmp	r2, r3
 508 0126 05D8     		bhi	.L23
 131:../Sources/TFC/TFC_UART.c ****         {
 132:../Sources/TFC/TFC_UART.c ****             baud_diff = temp;
 509              		.loc 1 132 0
 510 0128 3B6A     		ldr	r3, [r7, #32]
 511 012a BB62     		str	r3, [r7, #40]
 133:../Sources/TFC/TFC_UART.c ****             osr_val = i; 
 512              		.loc 1 133 0
 513 012c 3B1C     		mov	r3, r7
 514 012e 2F33     		add	r3, r3, #47
 515 0130 1B78     		ldrb	r3, [r3]
 516 0132 7B62     		str	r3, [r7, #36]
 517              	.L23:
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 518              		.loc 1 120 0
 519 0134 3B1C     		mov	r3, r7
 520 0136 2F33     		add	r3, r3, #47
 521 0138 3A1C     		mov	r2, r7
 522 013a 2F32     		add	r2, r2, #47
 523 013c 1278     		ldrb	r2, [r2]
 524 013e 0132     		add	r2, r2, #1
 525 0140 1A70     		strb	r2, [r3]
 526              	.L20:
 120:../Sources/TFC/TFC_UART.c ****     for (i = 5; i <= 32; i++)
 527              		.loc 1 120 0 is_stmt 0
 528 0142 3B1C     		mov	r3, r7
 529 0144 2F33     		add	r3, r3, #47
 530 0146 1B78     		ldrb	r3, [r3]
 531 0148 202B     		cmp	r3, #32
 532 014a C6D9     		bls	.L24
 134:../Sources/TFC/TFC_UART.c ****         }
 135:../Sources/TFC/TFC_UART.c ****     }
 136:../Sources/TFC/TFC_UART.c ****     
 137:../Sources/TFC/TFC_UART.c ****     if (baud_diff < ((baud_rate / 100) * 3))
 533              		.loc 1 137 0 is_stmt 1
 534 014c 7B69     		ldr	r3, [r7, #20]
 535 014e 181C     		mov	r0, r3
 536 0150 6421     		mov	r1, #100
 537 0152 FFF7FEFF 		bl	__aeabi_uidiv
 538 0156 031C     		mov	r3, r0
 539 0158 1A1C     		mov	r2, r3
 540 015a 131C     		mov	r3, r2
 541 015c 5B00     		lsl	r3, r3, #1
 542 015e 9A18     		add	r2, r3, r2
 543 0160 BB6A     		ldr	r3, [r7, #40]
 544 0162 9A42     		cmp	r2, r3
 545 0164 52D9     		bls	.L14
 138:../Sources/TFC/TFC_UART.c ****     {
 139:../Sources/TFC/TFC_UART.c ****         // If the OSR is between 4x and 8x then both
 140:../Sources/TFC/TFC_UART.c ****         // edge sampling MUST be turned on.  
 141:../Sources/TFC/TFC_UART.c ****         if ((osr_val >3) && (osr_val < 9))
 546              		.loc 1 141 0
 547 0166 7B6A     		ldr	r3, [r7, #36]
 548 0168 032B     		cmp	r3, #3
 549 016a 0AD9     		bls	.L26
 550              		.loc 1 141 0 is_stmt 0
 551 016c 7B6A     		ldr	r3, [r7, #36]
 552 016e 082B     		cmp	r3, #8
 553 0170 07D8     		bhi	.L26
 142:../Sources/TFC/TFC_UART.c ****             UART0_C5|= UART0_C5_BOTHEDGE_MASK;
 554              		.loc 1 142 0 is_stmt 1
 555 0172 2A4B     		ldr	r3, .L27+8
 556 0174 294A     		ldr	r2, .L27+8
 557 0176 D27A     		ldrb	r2, [r2, #11]
 558 0178 D2B2     		uxtb	r2, r2
 559 017a 0221     		mov	r1, #2
 560 017c 0A43     		orr	r2, r1
 561 017e D2B2     		uxtb	r2, r2
 562 0180 DA72     		strb	r2, [r3, #11]
 563              	.L26:
 143:../Sources/TFC/TFC_UART.c ****         
 144:../Sources/TFC/TFC_UART.c ****         // Setup OSR value 
 145:../Sources/TFC/TFC_UART.c ****         reg_temp = UART0_C4;
 564              		.loc 1 145 0
 565 0182 264B     		ldr	r3, .L27+8
 566 0184 9B7A     		ldrb	r3, [r3, #10]
 567 0186 DBB2     		uxtb	r3, r3
 568 0188 BB61     		str	r3, [r7, #24]
 146:../Sources/TFC/TFC_UART.c ****         reg_temp &= ~UART0_C4_OSR_MASK;
 569              		.loc 1 146 0
 570 018a BB69     		ldr	r3, [r7, #24]
 571 018c 1F22     		mov	r2, #31
 572 018e 9343     		bic	r3, r2
 573 0190 BB61     		str	r3, [r7, #24]
 147:../Sources/TFC/TFC_UART.c ****         reg_temp |= UART0_C4_OSR(osr_val-1);
 574              		.loc 1 147 0
 575 0192 7B6A     		ldr	r3, [r7, #36]
 576 0194 DBB2     		uxtb	r3, r3
 577 0196 013B     		sub	r3, r3, #1
 578 0198 DBB2     		uxtb	r3, r3
 579 019a 1A1C     		mov	r2, r3
 580 019c 1F23     		mov	r3, #31
 581 019e 1340     		and	r3, r2
 582 01a0 BA69     		ldr	r2, [r7, #24]
 583 01a2 1343     		orr	r3, r2
 584 01a4 BB61     		str	r3, [r7, #24]
 148:../Sources/TFC/TFC_UART.c ****     
 149:../Sources/TFC/TFC_UART.c ****         // Write reg_temp to C4 register
 150:../Sources/TFC/TFC_UART.c ****         UART0_C4 = reg_temp;
 585              		.loc 1 150 0
 586 01a6 1D4B     		ldr	r3, .L27+8
 587 01a8 BA69     		ldr	r2, [r7, #24]
 588 01aa D2B2     		uxtb	r2, r2
 589 01ac 9A72     		strb	r2, [r3, #10]
 151:../Sources/TFC/TFC_UART.c ****         
 152:../Sources/TFC/TFC_UART.c ****         reg_temp = (reg_temp & UART0_C4_OSR_MASK) + 1;
 590              		.loc 1 152 0
 591 01ae BA69     		ldr	r2, [r7, #24]
 592 01b0 1F23     		mov	r3, #31
 593 01b2 1340     		and	r3, r2
 594 01b4 0133     		add	r3, r3, #1
 595 01b6 BB61     		str	r3, [r7, #24]
 153:../Sources/TFC/TFC_UART.c ****         sbr_val = (uint32)((uart0clk)/(baud_rate * (reg_temp)));
 596              		.loc 1 153 0
 597 01b8 7B69     		ldr	r3, [r7, #20]
 598 01ba BA69     		ldr	r2, [r7, #24]
 599 01bc 5343     		mul	r3, r2
 600 01be 3869     		ldr	r0, [r7, #16]
 601 01c0 191C     		mov	r1, r3
 602 01c2 FFF7FEFF 		bl	__aeabi_uidiv
 603 01c6 031C     		mov	r3, r0
 604 01c8 FB60     		str	r3, [r7, #12]
 154:../Sources/TFC/TFC_UART.c ****         
 155:../Sources/TFC/TFC_UART.c ****          /* Save off the current value of the uartx_BDH except for the SBR field */
 156:../Sources/TFC/TFC_UART.c ****         reg_temp = UART0_BDH & ~(UART0_BDH_SBR(0x1F));
 605              		.loc 1 156 0
 606 01ca 144B     		ldr	r3, .L27+8
 607 01cc 1B78     		ldrb	r3, [r3]
 608 01ce DBB2     		uxtb	r3, r3
 609 01d0 1F22     		mov	r2, #31
 610 01d2 9343     		bic	r3, r2
 611 01d4 BB61     		str	r3, [r7, #24]
 157:../Sources/TFC/TFC_UART.c ****    
 158:../Sources/TFC/TFC_UART.c ****         UART0_BDH = reg_temp |  UART0_BDH_SBR(((sbr_val & 0x1F00) >> 8));
 612              		.loc 1 158 0
 613 01d6 114B     		ldr	r3, .L27+8
 614 01d8 F968     		ldr	r1, [r7, #12]
 615 01da F822     		mov	r2, #248
 616 01dc 5201     		lsl	r2, r2, #5
 617 01de 0A40     		and	r2, r1
 618 01e0 120A     		lsr	r2, r2, #8
 619 01e2 D1B2     		uxtb	r1, r2
 620 01e4 1F22     		mov	r2, #31
 621 01e6 0A40     		and	r2, r1
 622 01e8 D1B2     		uxtb	r1, r2
 623 01ea BA69     		ldr	r2, [r7, #24]
 624 01ec D2B2     		uxtb	r2, r2
 625 01ee 0A43     		orr	r2, r1
 626 01f0 D2B2     		uxtb	r2, r2
 627 01f2 1A70     		strb	r2, [r3]
 159:../Sources/TFC/TFC_UART.c ****         UART0_BDL = (uint8)(sbr_val & UART0_BDL_SBR_MASK);
 628              		.loc 1 159 0
 629 01f4 094B     		ldr	r3, .L27+8
 630 01f6 FA68     		ldr	r2, [r7, #12]
 631 01f8 D2B2     		uxtb	r2, r2
 632 01fa 5A70     		strb	r2, [r3, #1]
 160:../Sources/TFC/TFC_UART.c ****         
 161:../Sources/TFC/TFC_UART.c ****         /* Enable receiver and transmitter */
 162:../Sources/TFC/TFC_UART.c ****         UART0_C2 |= (UART0_C2_TE_MASK
 633              		.loc 1 162 0
 634 01fc 074B     		ldr	r3, .L27+8
 635 01fe 074A     		ldr	r2, .L27+8
 636 0200 D278     		ldrb	r2, [r2, #3]
 637 0202 D2B2     		uxtb	r2, r2
 638 0204 0C21     		mov	r1, #12
 639 0206 0A43     		orr	r2, r1
 640 0208 D2B2     		uxtb	r2, r2
 641 020a DA70     		strb	r2, [r3, #3]
 642              	.L14:
 163:../Sources/TFC/TFC_UART.c ****                     | UART0_C2_RE_MASK );
 164:../Sources/TFC/TFC_UART.c ****     }
 165:../Sources/TFC/TFC_UART.c ****     else
 166:../Sources/TFC/TFC_UART.c **** 		{
 167:../Sources/TFC/TFC_UART.c ****         // Unacceptable baud rate difference
 168:../Sources/TFC/TFC_UART.c ****         // More than 3% difference!!
 169:../Sources/TFC/TFC_UART.c ****         // Enter infinite loop!
 170:../Sources/TFC/TFC_UART.c ****         //while(1)
 171:../Sources/TFC/TFC_UART.c **** 			//	{}
 172:../Sources/TFC/TFC_UART.c **** 		}					
 173:../Sources/TFC/TFC_UART.c ****     
 174:../Sources/TFC/TFC_UART.c **** }
 643              		.loc 1 174 0
 644 020c BD46     		mov	sp, r7
 645 020e 0CB0     		add	sp, sp, #48
 646              		@ sp needed for prologue
 647 0210 80BD     		pop	{r7, pc}
 648              	.L28:
 649 0212 C046     		.align	2
 650              	.L27:
 651 0214 00700440 		.word	1074032640
 652 0218 34100000 		.word	4148
 653 021c 00A00640 		.word	1074176000
 654 0220 50C30000 		.word	50000
 655 0224 04100000 		.word	4100
 656 0228 FFFFFFF3 		.word	-201326593
 657              		.cfi_endproc
 658              	.LFE3:
 660              		.section	.text.uart_getchar,"ax",%progbits
 661              		.align	2
 662              		.global	uart_getchar
 663              		.code	16
 664              		.thumb_func
 666              	uart_getchar:
 667              	.LFB4:
 175:../Sources/TFC/TFC_UART.c **** 
 176:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 177:../Sources/TFC/TFC_UART.c **** /*
 178:../Sources/TFC/TFC_UART.c ****  * Wait for a character to be received on the specified uart
 179:../Sources/TFC/TFC_UART.c ****  *
 180:../Sources/TFC/TFC_UART.c ****  * Parameters:
 181:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to read from
 182:../Sources/TFC/TFC_UART.c ****  *
 183:../Sources/TFC/TFC_UART.c ****  * Return Values:
 184:../Sources/TFC/TFC_UART.c ****  *  the received character
 185:../Sources/TFC/TFC_UART.c ****  */
 186:../Sources/TFC/TFC_UART.c **** char uart_getchar (UART_MemMapPtr channel)
 187:../Sources/TFC/TFC_UART.c **** {
 668              		.loc 1 187 0
 669              		.cfi_startproc
 670 0000 80B5     		push	{r7, lr}
 671              	.LCFI10:
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675 0002 82B0     		sub	sp, sp, #8
 676              	.LCFI11:
 677              		.cfi_def_cfa_offset 16
 678 0004 00AF     		add	r7, sp, #0
 679              	.LCFI12:
 680              		.cfi_def_cfa_register 7
 681 0006 7860     		str	r0, [r7, #4]
 188:../Sources/TFC/TFC_UART.c ****       /* Wait until character has been received */
 189:../Sources/TFC/TFC_UART.c ****       while (!(UART_S1_REG(channel) & UART_S1_RDRF_MASK));
 682              		.loc 1 189 0
 683 0008 C046     		mov	r8, r8
 684              	.L30:
 685              		.loc 1 189 0 is_stmt 0
 686 000a 7B68     		ldr	r3, [r7, #4]
 687 000c 1B79     		ldrb	r3, [r3, #4]
 688 000e DBB2     		uxtb	r3, r3
 689 0010 1A1C     		mov	r2, r3
 690 0012 2023     		mov	r3, #32
 691 0014 1340     		and	r3, r2
 692 0016 F8D0     		beq	.L30
 190:../Sources/TFC/TFC_UART.c ****     
 191:../Sources/TFC/TFC_UART.c ****       /* Return the 8-bit data from the receiver */
 192:../Sources/TFC/TFC_UART.c ****       return UART_D_REG(channel);
 693              		.loc 1 192 0 is_stmt 1
 694 0018 7B68     		ldr	r3, [r7, #4]
 695 001a DB79     		ldrb	r3, [r3, #7]
 696 001c DBB2     		uxtb	r3, r3
 193:../Sources/TFC/TFC_UART.c **** }
 697              		.loc 1 193 0
 698 001e 181C     		mov	r0, r3
 699 0020 BD46     		mov	sp, r7
 700 0022 02B0     		add	sp, sp, #8
 701              		@ sp needed for prologue
 702 0024 80BD     		pop	{r7, pc}
 703              		.cfi_endproc
 704              	.LFE4:
 706 0026 C046     		.section	.text.uart_putchar,"ax",%progbits
 707              		.align	2
 708              		.global	uart_putchar
 709              		.code	16
 710              		.thumb_func
 712              	uart_putchar:
 713              	.LFB5:
 194:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 195:../Sources/TFC/TFC_UART.c **** /*
 196:../Sources/TFC/TFC_UART.c ****  * Wait for space in the uart Tx FIFO and then send a character
 197:../Sources/TFC/TFC_UART.c ****  *
 198:../Sources/TFC/TFC_UART.c ****  * Parameters:
 199:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to send to
 200:../Sources/TFC/TFC_UART.c ****  *  ch			 character to send
 201:../Sources/TFC/TFC_UART.c ****  */ 
 202:../Sources/TFC/TFC_UART.c **** void uart_putchar (UART_MemMapPtr channel, char ch)
 203:../Sources/TFC/TFC_UART.c **** {
 714              		.loc 1 203 0
 715              		.cfi_startproc
 716 0000 80B5     		push	{r7, lr}
 717              	.LCFI13:
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 82B0     		sub	sp, sp, #8
 722              	.LCFI14:
 723              		.cfi_def_cfa_offset 16
 724 0004 00AF     		add	r7, sp, #0
 725              	.LCFI15:
 726              		.cfi_def_cfa_register 7
 727 0006 7860     		str	r0, [r7, #4]
 728 0008 0A1C     		mov	r2, r1
 729 000a FB1C     		add	r3, r7, #3
 730 000c 1A70     		strb	r2, [r3]
 204:../Sources/TFC/TFC_UART.c ****       /* Wait until space is available in the FIFO */
 205:../Sources/TFC/TFC_UART.c ****       while(!(UART_S1_REG(channel) & UART_S1_TDRE_MASK));
 731              		.loc 1 205 0
 732 000e C046     		mov	r8, r8
 733              	.L33:
 734              		.loc 1 205 0 is_stmt 0
 735 0010 7B68     		ldr	r3, [r7, #4]
 736 0012 1B79     		ldrb	r3, [r3, #4]
 737 0014 DBB2     		uxtb	r3, r3
 738 0016 DBB2     		uxtb	r3, r3
 739 0018 5BB2     		sxtb	r3, r3
 740 001a 002B     		cmp	r3, #0
 741 001c F8DA     		bge	.L33
 206:../Sources/TFC/TFC_UART.c ****     
 207:../Sources/TFC/TFC_UART.c ****       /* Send the character */
 208:../Sources/TFC/TFC_UART.c ****       UART_D_REG(channel) = (uint8)ch;
 742              		.loc 1 208 0 is_stmt 1
 743 001e 7B68     		ldr	r3, [r7, #4]
 744 0020 FA1C     		add	r2, r7, #3
 745 0022 1278     		ldrb	r2, [r2]
 746 0024 DA71     		strb	r2, [r3, #7]
 209:../Sources/TFC/TFC_UART.c ****     
 210:../Sources/TFC/TFC_UART.c ****  }
 747              		.loc 1 210 0
 748 0026 BD46     		mov	sp, r7
 749 0028 02B0     		add	sp, sp, #8
 750              		@ sp needed for prologue
 751 002a 80BD     		pop	{r7, pc}
 752              		.cfi_endproc
 753              	.LFE5:
 755              		.section	.text.uart_getchar_present,"ax",%progbits
 756              		.align	2
 757              		.global	uart_getchar_present
 758              		.code	16
 759              		.thumb_func
 761              	uart_getchar_present:
 762              	.LFB6:
 211:../Sources/TFC/TFC_UART.c **** /********************************************************************/
 212:../Sources/TFC/TFC_UART.c **** /*
 213:../Sources/TFC/TFC_UART.c ****  * Check to see if a character has been received
 214:../Sources/TFC/TFC_UART.c ****  *
 215:../Sources/TFC/TFC_UART.c ****  * Parameters:
 216:../Sources/TFC/TFC_UART.c ****  *  channel      uart channel to check for a character
 217:../Sources/TFC/TFC_UART.c ****  *
 218:../Sources/TFC/TFC_UART.c ****  * Return values:
 219:../Sources/TFC/TFC_UART.c ****  *  0       No character received
 220:../Sources/TFC/TFC_UART.c ****  *  1       Character has been received
 221:../Sources/TFC/TFC_UART.c ****  */
 222:../Sources/TFC/TFC_UART.c **** int uart_getchar_present (UART_MemMapPtr channel)
 223:../Sources/TFC/TFC_UART.c **** {
 763              		.loc 1 223 0
 764              		.cfi_startproc
 765 0000 80B5     		push	{r7, lr}
 766              	.LCFI16:
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 0002 82B0     		sub	sp, sp, #8
 771              	.LCFI17:
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              	.LCFI18:
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 224:../Sources/TFC/TFC_UART.c ****     return (UART_S1_REG(channel) & UART_S1_RDRF_MASK);
 777              		.loc 1 224 0
 778 0008 7B68     		ldr	r3, [r7, #4]
 779 000a 1B79     		ldrb	r3, [r3, #4]
 780 000c DBB2     		uxtb	r3, r3
 781 000e 1A1C     		mov	r2, r3
 782 0010 2023     		mov	r3, #32
 783 0012 1340     		and	r3, r2
 225:../Sources/TFC/TFC_UART.c **** }
 784              		.loc 1 225 0
 785 0014 181C     		mov	r0, r3
 786 0016 BD46     		mov	sp, r7
 787 0018 02B0     		add	sp, sp, #8
 788              		@ sp needed for prologue
 789 001a 80BD     		pop	{r7, pc}
 790              		.cfi_endproc
 791              	.LFE6:
 793              		.text
 794              	.Letext0:
 795              		.file 2 "D:/Programme/CodeWarrior/CW MCU v10.6.4/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 796              		.file 3 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/MKL25Z4.h"
 797              		.file 4 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/TFC\\TFC_arm_cm0.h"
 798              		.file 5 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/TFC\\TFC_Queue.h"
 799              		.file 6 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/config.h"
 800              		.file 7 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/LineScanCam.h"
 801              		.file 8 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/motorServo.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_UART.c
                            *COM*:00000004 motor
                            *COM*:00000004 servo
                            *COM*:00000004 LEDconfig
                            *COM*:00000004 target
                            *COM*:00000004 auslmultiplier
                            *COM*:00000004 speedMultiplier
                            *COM*:00000004 minSpeed
                            *COM*:00000004 linetimeout
                            *COM*:00000004 ruckwartsZeit
                            *COM*:00000200 camData
                            *COM*:00000004 active
                            *COM*:00000004 Sausl
                            *COM*:00000004 linemissing
                            *COM*:00000004 checkLineStep
                            *COM*:00000004 Motorspeed
                            *COM*:00000004 Servoausl
                            *COM*:00000004 drivingBack
                            *COM*:0000000c SDA_SERIAL_OUTGOING_QUEUE
                            *COM*:0000000c SDA_SERIAL_INCOMING_QUEUE
                            *COM*:00000800 SDA_SERIAL_OUTGOING_QUEUE_Storage
                            *COM*:00000080 SDA_SERIAL_INCOMING_QUEUE_Storage
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:39     .text.TFC_InitUARTs:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:44     .text.TFC_InitUARTs:00000000 TFC_InitUARTs
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:315    .text.uart0_init:00000000 uart0_init
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:148    .text.TFC_InitUARTs:000000a4 $d
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:163    .text.TFC_UART_Process:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:168    .text.TFC_UART_Process:00000000 TFC_UART_Process
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:213    .text.TFC_UART_Process:00000038 $d
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:219    .text.UART0_IRQHandler:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:224    .text.UART0_IRQHandler:00000000 UART0_IRQHandler
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:302    .text.UART0_IRQHandler:0000006c $d
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:310    .text.uart0_init:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:651    .text.uart0_init:00000214 $d
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:661    .text.uart_getchar:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:666    .text.uart_getchar:00000000 uart_getchar
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:707    .text.uart_putchar:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:712    .text.uart_putchar:00000000 uart_putchar
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:756    .text.uart_getchar_present:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\cc4pkavS.s:761    .text.uart_getchar_present:00000000 uart_getchar_present
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
InitByteQueue
enable_irq
BytesInQueue
ByteEnqueue
ByteDequeue
__aeabi_uidiv
