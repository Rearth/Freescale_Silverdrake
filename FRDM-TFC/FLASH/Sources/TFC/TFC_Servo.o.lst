   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_Servo.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	motor,4,4
  18              		.comm	servo,4,4
  19              		.comm	LEDconfig,4,4
  20              		.comm	target,4,4
  21              		.comm	auslmultiplier,4,4
  22              		.comm	speedMultiplier,4,4
  23              		.comm	minSpeed,4,4
  24              		.comm	linetimeout,4,4
  25              		.comm	ruckwartsZeit,4,4
  26              		.comm	camData,512,4
  27              		.comm	active,4,4
  28              		.comm	Sausl,4,4
  29              		.comm	linemissing,4,4
  30              		.comm	checkLineStep,4,4
  31              		.comm	Motorspeed,4,4
  32              		.comm	Servoausl,4,4
  33              		.comm	drivingBack,4,4
  34              		.global	__aeabi_f2d
  35              		.global	__aeabi_dadd
  36              		.global	__aeabi_ddiv
  37              		.global	__aeabi_dmul
  38              		.global	__aeabi_d2f
  39              		.section	.text.TFC_SetServo,"ax",%progbits
  40              		.align	2
  41              		.global	TFC_SetServo
  42              		.code	16
  43              		.thumb_func
  45              	TFC_SetServo:
  46              	.LFB0:
  47              		.file 1 "../Sources/TFC/TFC_Servo.c"
   1:../Sources/TFC/TFC_Servo.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_Servo.c **** 
   3:../Sources/TFC/TFC_Servo.c **** 
   4:../Sources/TFC/TFC_Servo.c **** #define FTM1_CLOCK                                                                  (CORE_CLOCK)
   5:../Sources/TFC/TFC_Servo.c **** #define FTM1_CLK_PRESCALE                                  						     6// Prescale Selector value -
   6:../Sources/TFC/TFC_Servo.c **** #define FTM1_OVERFLOW_FREQUENCY 50  // Desired Frequency of PWM Signal - Here 50Hz => 20ms period
   7:../Sources/TFC/TFC_Servo.c **** // use these to dial in servo steering to your particular servo
   8:../Sources/TFC/TFC_Servo.c **** #define SERVO_MIN_DUTY_CYCLE                                          (float)(.0010*FTM1_OVERFLOW_F
   9:../Sources/TFC/TFC_Servo.c **** #define SERVO_MAX_DUTY_CYCLE                                         (float)(.0020*FTM1_OVERFLOW_FR
  10:../Sources/TFC/TFC_Servo.c **** /**********************************************************************************************/
  11:../Sources/TFC/TFC_Servo.c **** 
  12:../Sources/TFC/TFC_Servo.c **** //Position is -1.0 to 1.0.   Use SERVO_X_MIN_DUTY_CYCLE and SERVO_MAX_DUTY_CYCLE  to calibrate the 
  13:../Sources/TFC/TFC_Servo.c **** void TFC_SetServo(uint8_t ServoNumber, float Position)
  14:../Sources/TFC/TFC_Servo.c **** {      
  48              		.loc 1 14 0
  49              		.cfi_startproc
  50 0000 90B5     		push	{r4, r7, lr}
  51              	.LCFI0:
  52              		.cfi_def_cfa_offset 12
  53              		.cfi_offset 4, -12
  54              		.cfi_offset 7, -8
  55              		.cfi_offset 14, -4
  56 0002 83B0     		sub	sp, sp, #12
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 24
  59 0004 00AF     		add	r7, sp, #0
  60              	.LCFI2:
  61              		.cfi_def_cfa_register 7
  62 0006 021C     		mov	r2, r0
  63 0008 3960     		str	r1, [r7]
  64 000a FB1D     		add	r3, r7, #7
  65 000c 1A70     		strb	r2, [r3]
  15:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServoDutyCycle(ServoNumber ,(((Position + 1.0)/2)*(SERVO_MAX_DUTY_CYCLE - SERVO_MIN_DUTY_CY
  66              		.loc 1 15 0
  67 000e 3868     		ldr	r0, [r7]
  68 0010 FFF7FEFF 		bl	__aeabi_f2d
  69 0014 031C     		mov	r3, r0
  70 0016 0C1C     		mov	r4, r1
  71 0018 181C     		mov	r0, r3
  72 001a 211C     		mov	r1, r4
  73 001c 174B     		ldr	r3, .L2+4
  74 001e 164A     		ldr	r2, .L2
  75 0020 FFF7FEFF 		bl	__aeabi_dadd
  76 0024 031C     		mov	r3, r0
  77 0026 0C1C     		mov	r4, r1
  78 0028 181C     		mov	r0, r3
  79 002a 211C     		mov	r1, r4
  80 002c 144A     		ldr	r2, .L2+8
  81 002e 154B     		ldr	r3, .L2+12
  82 0030 FFF7FEFF 		bl	__aeabi_ddiv
  83 0034 031C     		mov	r3, r0
  84 0036 0C1C     		mov	r4, r1
  85 0038 181C     		mov	r0, r3
  86 003a 211C     		mov	r1, r4
  87 003c 124A     		ldr	r2, .L2+16
  88 003e 134B     		ldr	r3, .L2+20
  89 0040 FFF7FEFF 		bl	__aeabi_dmul
  90 0044 031C     		mov	r3, r0
  91 0046 0C1C     		mov	r4, r1
  92 0048 181C     		mov	r0, r3
  93 004a 211C     		mov	r1, r4
  94 004c 0E4A     		ldr	r2, .L2+16
  95 004e 0F4B     		ldr	r3, .L2+20
  96 0050 FFF7FEFF 		bl	__aeabi_dadd
  97 0054 031C     		mov	r3, r0
  98 0056 0C1C     		mov	r4, r1
  99 0058 181C     		mov	r0, r3
 100 005a 211C     		mov	r1, r4
 101 005c FFF7FEFF 		bl	__aeabi_d2f
 102 0060 031C     		add	r3, r0, #0
 103 0062 FA1D     		add	r2, r7, #7
 104 0064 1278     		ldrb	r2, [r2]
 105 0066 101C     		mov	r0, r2
 106 0068 191C     		add	r1, r3, #0
 107 006a FFF7FEFF 		bl	TFC_SetServoDutyCycle
  16:../Sources/TFC/TFC_Servo.c ****                
  17:../Sources/TFC/TFC_Servo.c **** }
 108              		.loc 1 17 0
 109 006e BD46     		mov	sp, r7
 110 0070 03B0     		add	sp, sp, #12
 111              		@ sp needed for prologue
 112 0072 90BD     		pop	{r4, r7, pc}
 113              	.L3:
 114 0074 C046C046 		.align	3
 115              	.L2:
 116 0078 00000000 		.word	0
 117 007c 0000F03F 		.word	1072693248
 118 0080 00000000 		.word	0
 119 0084 00000040 		.word	1073741824
 120 0088 000000A0 		.word	-1610612736
 121 008c 9999A93F 		.word	1068079513
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.global	__aeabi_ui2f
 126              		.global	__aeabi_fmul
 127              		.global	__aeabi_f2uiz
 128              		.section	.text.TFC_SetServoDutyCycle,"ax",%progbits
 129              		.align	2
 130              		.global	TFC_SetServoDutyCycle
 131              		.code	16
 132              		.thumb_func
 134              	TFC_SetServoDutyCycle:
 135              	.LFB1:
  18:../Sources/TFC/TFC_Servo.c **** 
  19:../Sources/TFC/TFC_Servo.c **** void TFC_SetServoDutyCycle(uint8_t ServoNumber, float DutyCycle)
  20:../Sources/TFC/TFC_Servo.c **** {
 136              		.loc 1 20 0
 137              		.cfi_startproc
 138 0000 90B5     		push	{r4, r7, lr}
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 12
 141              		.cfi_offset 4, -12
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 83B0     		sub	sp, sp, #12
 145              	.LCFI4:
 146              		.cfi_def_cfa_offset 24
 147 0004 00AF     		add	r7, sp, #0
 148              	.LCFI5:
 149              		.cfi_def_cfa_register 7
 150 0006 021C     		mov	r2, r0
 151 0008 3960     		str	r1, [r7]
 152 000a FB1D     		add	r3, r7, #7
 153 000c 1A70     		strb	r2, [r3]
  21:../Sources/TFC/TFC_Servo.c ****                switch(ServoNumber)
 154              		.loc 1 21 0
 155 000e FB1D     		add	r3, r7, #7
 156 0010 1B78     		ldrb	r3, [r3]
 157 0012 012B     		cmp	r3, #1
 158 0014 11D0     		beq	.L6
  22:../Sources/TFC/TFC_Servo.c ****                {
  23:../Sources/TFC/TFC_Servo.c ****                default:
  24:../Sources/TFC/TFC_Servo.c ****                case 0:
  25:../Sources/TFC/TFC_Servo.c ****                               TPM1_C0V = TPM1_MOD * DutyCycle;
 159              		.loc 1 25 0
 160 0016 134C     		ldr	r4, .L8
 161 0018 124B     		ldr	r3, .L8
 162 001a 9B68     		ldr	r3, [r3, #8]
 163 001c 181C     		mov	r0, r3
 164 001e FFF7FEFF 		bl	__aeabi_ui2f
 165 0022 031C     		add	r3, r0, #0
 166 0024 181C     		add	r0, r3, #0
 167 0026 3968     		ldr	r1, [r7]
 168 0028 FFF7FEFF 		bl	__aeabi_fmul
 169 002c 031C     		add	r3, r0, #0
 170 002e 181C     		add	r0, r3, #0
 171 0030 FFF7FEFF 		bl	__aeabi_f2uiz
 172 0034 031C     		mov	r3, r0
 173 0036 2361     		str	r3, [r4, #16]
  26:../Sources/TFC/TFC_Servo.c ****                               break;
 174              		.loc 1 26 0
 175 0038 11E0     		b	.L4
 176              	.L6:
  27:../Sources/TFC/TFC_Servo.c **** 
  28:../Sources/TFC/TFC_Servo.c ****                case 1:
  29:../Sources/TFC/TFC_Servo.c ****                               TPM1_C1V = TPM1_MOD * DutyCycle;
 177              		.loc 1 29 0
 178 003a 0A4C     		ldr	r4, .L8
 179 003c 094B     		ldr	r3, .L8
 180 003e 9B68     		ldr	r3, [r3, #8]
 181 0040 181C     		mov	r0, r3
 182 0042 FFF7FEFF 		bl	__aeabi_ui2f
 183 0046 031C     		add	r3, r0, #0
 184 0048 181C     		add	r0, r3, #0
 185 004a 3968     		ldr	r1, [r7]
 186 004c FFF7FEFF 		bl	__aeabi_fmul
 187 0050 031C     		add	r3, r0, #0
 188 0052 181C     		add	r0, r3, #0
 189 0054 FFF7FEFF 		bl	__aeabi_f2uiz
 190 0058 031C     		mov	r3, r0
 191 005a A361     		str	r3, [r4, #24]
  30:../Sources/TFC/TFC_Servo.c ****                               break;
 192              		.loc 1 30 0
 193 005c C046     		mov	r8, r8
 194              	.L4:
  31:../Sources/TFC/TFC_Servo.c ****                }
  32:../Sources/TFC/TFC_Servo.c **** }
 195              		.loc 1 32 0
 196 005e BD46     		mov	sp, r7
 197 0060 03B0     		add	sp, sp, #12
 198              		@ sp needed for prologue
 199 0062 90BD     		pop	{r4, r7, pc}
 200              	.L9:
 201              		.align	2
 202              	.L8:
 203 0064 00900340 		.word	1073975296
 204              		.cfi_endproc
 205              	.LFE1:
 207              		.comm	ServoTickVar,1,1
 208              		.section	.text.FTM1_IRQHandler,"ax",%progbits
 209              		.align	2
 210              		.global	FTM1_IRQHandler
 211              		.code	16
 212              		.thumb_func
 214              	FTM1_IRQHandler:
 215              	.LFB2:
  33:../Sources/TFC/TFC_Servo.c **** 
  34:../Sources/TFC/TFC_Servo.c **** /******************************************* Function to control Interrupt ************************
  35:../Sources/TFC/TFC_Servo.c **** volatile unsigned char ServoTickVar;
  36:../Sources/TFC/TFC_Servo.c **** 
  37:../Sources/TFC/TFC_Servo.c **** void FTM1_IRQHandler()
  38:../Sources/TFC/TFC_Servo.c **** {
 216              		.loc 1 38 0
 217              		.cfi_startproc
 218 0000 80B5     		push	{r7, lr}
 219              	.LCFI6:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 00AF     		add	r7, sp, #0
 224              	.LCFI7:
 225              		.cfi_def_cfa_register 7
  39:../Sources/TFC/TFC_Servo.c ****                //Clear the overflow mask if set.   According to the reference manual, we clear by w
  40:../Sources/TFC/TFC_Servo.c ****                if(TPM1_SC & TPM_SC_TOF_MASK)
 226              		.loc 1 40 0
 227 0004 0C4B     		ldr	r3, .L13
 228 0006 1A68     		ldr	r2, [r3]
 229 0008 8023     		mov	r3, #128
 230 000a 1340     		and	r3, r2
 231 000c 05D0     		beq	.L11
  41:../Sources/TFC/TFC_Servo.c ****                               TPM1_SC |= TPM_SC_TOF_MASK;
 232              		.loc 1 41 0
 233 000e 0A4B     		ldr	r3, .L13
 234 0010 094A     		ldr	r2, .L13
 235 0012 1268     		ldr	r2, [r2]
 236 0014 8021     		mov	r1, #128
 237 0016 0A43     		orr	r2, r1
 238 0018 1A60     		str	r2, [r3]
 239              	.L11:
  42:../Sources/TFC/TFC_Servo.c ****                
  43:../Sources/TFC/TFC_Servo.c ****                if (ServoTickVar < 0xff)//if servo tick less than 255 count up... 
 240              		.loc 1 43 0
 241 001a 084B     		ldr	r3, .L13+4
 242 001c 1B78     		ldrb	r3, [r3]
 243 001e DBB2     		uxtb	r3, r3
 244 0020 FF2B     		cmp	r3, #255
 245 0022 06D0     		beq	.L10
  44:../Sources/TFC/TFC_Servo.c ****                               ServoTickVar++;
 246              		.loc 1 44 0
 247 0024 054B     		ldr	r3, .L13+4
 248 0026 1B78     		ldrb	r3, [r3]
 249 0028 DBB2     		uxtb	r3, r3
 250 002a 0133     		add	r3, r3, #1
 251 002c DAB2     		uxtb	r2, r3
 252 002e 034B     		ldr	r3, .L13+4
 253 0030 1A70     		strb	r2, [r3]
 254              	.L10:
  45:../Sources/TFC/TFC_Servo.c ****   
  46:../Sources/TFC/TFC_Servo.c **** }
 255              		.loc 1 46 0
 256 0032 BD46     		mov	sp, r7
 257              		@ sp needed for prologue
 258 0034 80BD     		pop	{r7, pc}
 259              	.L14:
 260 0036 C046     		.align	2
 261              	.L13:
 262 0038 00900340 		.word	1073975296
 263 003c 00000000 		.word	ServoTickVar
 264              		.cfi_endproc
 265              	.LFE2:
 267              		.section	.text.TFC_InitServos,"ax",%progbits
 268              		.align	2
 269              		.global	TFC_InitServos
 270              		.code	16
 271              		.thumb_func
 273              	TFC_InitServos:
 274              	.LFB3:
  47:../Sources/TFC/TFC_Servo.c **** 
  48:../Sources/TFC/TFC_Servo.c **** void TFC_InitServos()
  49:../Sources/TFC/TFC_Servo.c **** {
 275              		.loc 1 49 0
 276              		.cfi_startproc
 277 0000 80B5     		push	{r7, lr}
 278              	.LCFI8:
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 7, -8
 281              		.cfi_offset 14, -4
 282 0002 00AF     		add	r7, sp, #0
 283              	.LCFI9:
 284              		.cfi_def_cfa_register 7
  50:../Sources/TFC/TFC_Servo.c ****                
  51:../Sources/TFC/TFC_Servo.c ****                //Clock Setup for the TPM requires a couple steps.
  52:../Sources/TFC/TFC_Servo.c ****                
  53:../Sources/TFC/TFC_Servo.c ****     
  54:../Sources/TFC/TFC_Servo.c **** 				
  55:../Sources/TFC/TFC_Servo.c ****                //1st,  set the clock mux
  56:../Sources/TFC/TFC_Servo.c ****                //See Page 124 of f the KL25 Sub-Family Reference Manual, Rev. 3, September 2012
  57:../Sources/TFC/TFC_Servo.c ****                SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK;// We Want MCGPLLCLK/2 (See Page 196 of the KL
 285              		.loc 1 57 0
 286 0004 2C4A     		ldr	r2, .L16
 287 0006 2C49     		ldr	r1, .L16
 288 0008 2C4B     		ldr	r3, .L16+4
 289 000a CB58     		ldr	r3, [r1, r3]
 290 000c 8021     		mov	r1, #128
 291 000e 4902     		lsl	r1, r1, #9
 292 0010 1943     		orr	r1, r3
 293 0012 2A4B     		ldr	r3, .L16+4
 294 0014 D150     		str	r1, [r2, r3]
  58:../Sources/TFC/TFC_Servo.c ****                SIM_SOPT2 &= ~(SIM_SOPT2_TPMSRC_MASK);
 295              		.loc 1 58 0
 296 0016 284A     		ldr	r2, .L16
 297 0018 2749     		ldr	r1, .L16
 298 001a 284B     		ldr	r3, .L16+4
 299 001c C958     		ldr	r1, [r1, r3]
 300 001e 284B     		ldr	r3, .L16+8
 301 0020 1940     		and	r1, r3
 302 0022 264B     		ldr	r3, .L16+4
 303 0024 D150     		str	r1, [r2, r3]
  59:../Sources/TFC/TFC_Servo.c ****                SIM_SOPT2 |= SIM_SOPT2_TPMSRC(1); //We want the MCGPLLCLK/2 (See Page 196 of the KL2
 304              		.loc 1 59 0
 305 0026 244A     		ldr	r2, .L16
 306 0028 2349     		ldr	r1, .L16
 307 002a 244B     		ldr	r3, .L16+4
 308 002c CB58     		ldr	r3, [r1, r3]
 309 002e 8021     		mov	r1, #128
 310 0030 4904     		lsl	r1, r1, #17
 311 0032 1943     		orr	r1, r3
 312 0034 214B     		ldr	r3, .L16+4
 313 0036 D150     		str	r1, [r2, r3]
  60:../Sources/TFC/TFC_Servo.c ****   
  61:../Sources/TFC/TFC_Servo.c **** 
  62:../Sources/TFC/TFC_Servo.c **** 				//Enable the Clock to the FTM0 Module
  63:../Sources/TFC/TFC_Servo.c **** 				//See Page 207 of f the KL25 Sub-Family Reference Manual, Rev. 3, September 2012
  64:../Sources/TFC/TFC_Servo.c **** 				SIM_SCGC6 |= SIM_SCGC6_TPM1_MASK; 
 314              		.loc 1 64 0
 315 0038 1F4A     		ldr	r2, .L16
 316 003a 1F49     		ldr	r1, .L16
 317 003c 214B     		ldr	r3, .L16+12
 318 003e CB58     		ldr	r3, [r1, r3]
 319 0040 8021     		mov	r1, #128
 320 0042 8904     		lsl	r1, r1, #18
 321 0044 1943     		orr	r1, r3
 322 0046 1F4B     		ldr	r3, .L16+12
 323 0048 D150     		str	r1, [r2, r3]
  65:../Sources/TFC/TFC_Servo.c ****                
  66:../Sources/TFC/TFC_Servo.c ****                //The TPM Module has Clock.  Now set up the peripheral
  67:../Sources/TFC/TFC_Servo.c ****                
  68:../Sources/TFC/TFC_Servo.c ****                //Blow away the control registers to ensure that the counter is not running
  69:../Sources/TFC/TFC_Servo.c ****                TPM1_SC = 0;
 324              		.loc 1 69 0
 325 004a 1F4B     		ldr	r3, .L16+16
 326 004c 0022     		mov	r2, #0
 327 004e 1A60     		str	r2, [r3]
  70:../Sources/TFC/TFC_Servo.c ****                TPM1_CONF = 0;
 328              		.loc 1 70 0
 329 0050 1D4A     		ldr	r2, .L16+16
 330 0052 8423     		mov	r3, #132
 331 0054 0021     		mov	r1, #0
 332 0056 D150     		str	r1, [r2, r3]
  71:../Sources/TFC/TFC_Servo.c ****                
  72:../Sources/TFC/TFC_Servo.c ****                //While the counter is disabled we can setup the prescaler
  73:../Sources/TFC/TFC_Servo.c ****                
  74:../Sources/TFC/TFC_Servo.c ****                TPM1_SC = TPM_SC_PS(FTM1_CLK_PRESCALE);
 333              		.loc 1 74 0
 334 0058 1B4B     		ldr	r3, .L16+16
 335 005a 0622     		mov	r2, #6
 336 005c 1A60     		str	r2, [r3]
  75:../Sources/TFC/TFC_Servo.c ****                TPM1_SC |= TPM_SC_TOIE_MASK; //Enable Interrupts for the Timer Overflow
 337              		.loc 1 75 0
 338 005e 1A4B     		ldr	r3, .L16+16
 339 0060 194A     		ldr	r2, .L16+16
 340 0062 1268     		ldr	r2, [r2]
 341 0064 4021     		mov	r1, #64
 342 0066 0A43     		orr	r2, r1
 343 0068 1A60     		str	r2, [r3]
  76:../Sources/TFC/TFC_Servo.c ****                
  77:../Sources/TFC/TFC_Servo.c ****                //Setup the mod register to get the correct PWM Period
  78:../Sources/TFC/TFC_Servo.c ****                
  79:../Sources/TFC/TFC_Servo.c ****                TPM1_MOD = FTM1_CLOCK/(1<<(FTM1_CLK_PRESCALE+1))/FTM1_OVERFLOW_FREQUENCY;
 344              		.loc 1 79 0
 345 006a 174B     		ldr	r3, .L16+16
 346 006c 174A     		ldr	r2, .L16+20
 347 006e 9A60     		str	r2, [r3, #8]
  80:../Sources/TFC/TFC_Servo.c ****                
  81:../Sources/TFC/TFC_Servo.c ****                //Setup Channels 0 and 1
  82:../Sources/TFC/TFC_Servo.c ****                
  83:../Sources/TFC/TFC_Servo.c ****                TPM1_C0SC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
 348              		.loc 1 83 0
 349 0070 154B     		ldr	r3, .L16+16
 350 0072 2822     		mov	r2, #40
 351 0074 DA60     		str	r2, [r3, #12]
  84:../Sources/TFC/TFC_Servo.c ****                TPM1_C1SC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
 352              		.loc 1 84 0
 353 0076 144B     		ldr	r3, .L16+16
 354 0078 2822     		mov	r2, #40
 355 007a 5A61     		str	r2, [r3, #20]
  85:../Sources/TFC/TFC_Servo.c ****                
  86:../Sources/TFC/TFC_Servo.c ****                //Enable the Counter
  87:../Sources/TFC/TFC_Servo.c ****                
  88:../Sources/TFC/TFC_Servo.c ****                //Set the Default duty cycle to servo neutral
  89:../Sources/TFC/TFC_Servo.c ****                TFC_SetServo(0, 0.0);
 356              		.loc 1 89 0
 357 007c 0023     		mov	r3, #0
 358 007e 0020     		mov	r0, #0
 359 0080 191C     		add	r1, r3, #0
 360 0082 FFF7FEFF 		bl	TFC_SetServo
  90:../Sources/TFC/TFC_Servo.c ****                TFC_SetServo(1, 0.0);
 361              		.loc 1 90 0
 362 0086 0023     		mov	r3, #0
 363 0088 0120     		mov	r0, #1
 364 008a 191C     		add	r1, r3, #0
 365 008c FFF7FEFF 		bl	TFC_SetServo
  91:../Sources/TFC/TFC_Servo.c ****                
  92:../Sources/TFC/TFC_Servo.c ****                //Enable the TPM COunter
  93:../Sources/TFC/TFC_Servo.c ****                TPM1_SC |= TPM_SC_CMOD(1);
 366              		.loc 1 93 0
 367 0090 0D4B     		ldr	r3, .L16+16
 368 0092 0D4A     		ldr	r2, .L16+16
 369 0094 1268     		ldr	r2, [r2]
 370 0096 0821     		mov	r1, #8
 371 0098 0A43     		orr	r2, r1
 372 009a 1A60     		str	r2, [r3]
  94:../Sources/TFC/TFC_Servo.c ****                
  95:../Sources/TFC/TFC_Servo.c ****                //Enable TPM1 IRQ on the NVIC
  96:../Sources/TFC/TFC_Servo.c ****                enable_irq (INT_TPM1-16);
 373              		.loc 1 96 0
 374 009c 1220     		mov	r0, #18
 375 009e FFF7FEFF 		bl	enable_irq
  97:../Sources/TFC/TFC_Servo.c ****               
  98:../Sources/TFC/TFC_Servo.c ****                //Enable the FTM functions on the the port
  99:../Sources/TFC/TFC_Servo.c ****                
 100:../Sources/TFC/TFC_Servo.c ****                PORTB_PCR0 = PORT_PCR_MUX(3);
 376              		.loc 1 100 0
 377 00a2 0B4B     		ldr	r3, .L16+24
 378 00a4 C022     		mov	r2, #192
 379 00a6 9200     		lsl	r2, r2, #2
 380 00a8 1A60     		str	r2, [r3]
 101:../Sources/TFC/TFC_Servo.c ****                PORTB_PCR1 = PORT_PCR_MUX(3);
 381              		.loc 1 101 0
 382 00aa 094B     		ldr	r3, .L16+24
 383 00ac C022     		mov	r2, #192
 384 00ae 9200     		lsl	r2, r2, #2
 385 00b0 5A60     		str	r2, [r3, #4]
 102:../Sources/TFC/TFC_Servo.c ****                               
 103:../Sources/TFC/TFC_Servo.c **** }
 386              		.loc 1 103 0
 387 00b2 BD46     		mov	sp, r7
 388              		@ sp needed for prologue
 389 00b4 80BD     		pop	{r7, pc}
 390              	.L17:
 391 00b6 C046     		.align	2
 392              	.L16:
 393 00b8 00700440 		.word	1074032640
 394 00bc 04100000 		.word	4100
 395 00c0 FFFFFFFC 		.word	-50331649
 396 00c4 3C100000 		.word	4156
 397 00c8 00900340 		.word	1073975296
 398 00cc 4C1D0000 		.word	7500
 399 00d0 00A00440 		.word	1074044928
 400              		.cfi_endproc
 401              	.LFE3:
 403              		.text
 404              	.Letext0:
 405              		.file 2 "D:/Programme/CodeWarrior/CW MCU v10.6.4/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 406              		.file 3 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/MKL25Z4.h"
 407              		.file 4 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/config.h"
 408              		.file 5 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/LineScanCam.h"
 409              		.file 6 "D:/NWT/Workplace/FRDM-TFC/Project_Headers/motorServo.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_Servo.c
                            *COM*:00000004 motor
                            *COM*:00000004 servo
                            *COM*:00000004 LEDconfig
                            *COM*:00000004 target
                            *COM*:00000004 auslmultiplier
                            *COM*:00000004 speedMultiplier
                            *COM*:00000004 minSpeed
                            *COM*:00000004 linetimeout
                            *COM*:00000004 ruckwartsZeit
                            *COM*:00000200 camData
                            *COM*:00000004 active
                            *COM*:00000004 Sausl
                            *COM*:00000004 linemissing
                            *COM*:00000004 checkLineStep
                            *COM*:00000004 Motorspeed
                            *COM*:00000004 Servoausl
                            *COM*:00000004 drivingBack
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:40     .text.TFC_SetServo:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:45     .text.TFC_SetServo:00000000 TFC_SetServo
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:134    .text.TFC_SetServoDutyCycle:00000000 TFC_SetServoDutyCycle
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:116    .text.TFC_SetServo:00000078 $d
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:129    .text.TFC_SetServoDutyCycle:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:203    .text.TFC_SetServoDutyCycle:00000064 $d
                            *COM*:00000001 ServoTickVar
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:209    .text.FTM1_IRQHandler:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:214    .text.FTM1_IRQHandler:00000000 FTM1_IRQHandler
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:262    .text.FTM1_IRQHandler:00000038 $d
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:268    .text.TFC_InitServos:00000000 $t
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:273    .text.TFC_InitServos:00000000 TFC_InitServos
C:\Users\Darkp\AppData\Local\Temp\ccYEV2nJ.s:393    .text.TFC_InitServos:000000b8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dadd
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_ui2f
__aeabi_fmul
__aeabi_f2uiz
enable_irq
